
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'Out/AmandaJS.data';
    var REMOTE_PACKAGE_BASE = 'AmandaJS.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
    var REMOTE_PACKAGE_SIZE = 3798;
    var PACKAGE_UUID = '855a8347-675a-4d9c-9089-a3ee32183deb';
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 3798, 0, 0).open('GET', '/amanda.ini');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/amanda.ini"].onload();
          Module['removeRunDependency']('datafile_Out/AmandaJS.data');

    };
    Module['addRunDependency']('datafile_Out/AmandaJS.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) return 0; }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;


var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}



// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');


var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 10928;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
   
  Module["_strlen"] = _strlen; 
  Module["_strcat"] = _strcat;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  var _emscripten_prep_setjmp=true;


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


  var _emscripten_check_longjmp=true;

  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

   
  Module["_i64Add"] = _i64Add;

  var _emscripten_cleanup_setjmp=true;

  var _emscripten_postinvoke=true;

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  var _sqrt=Math_sqrt;

  
  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;function _realloc(ptr, size) {
      // Very simple, inefficient implementation - if you use a real malloc, best to use
      // a real realloc with it
      if (!size) {
        if (ptr) _free(ptr);
        return 0;
      }
      var ret = _malloc(size);
      if (ptr) {
        _memcpy(ret, ptr, size); // might be some invalid reads
        _free(ptr);
      }
      return ret;
    }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _emscripten_get_longjmp_result=true;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  var _sin=Math_sin;

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  var _atan=Math_atan;

  var _BDtoILow=true;

  var _BDtoIHigh=true;

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }


  var _log=Math_log;

  var _emscripten_setjmp=true;

  var _cos=Math_cos;

  var _fabs=Math_abs;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  function _signal(sig, func) {
      Module.printErr('Calling stub instead of signal()');
      return 0;
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

   
  Module["_strcpy"] = _strcpy;

  var _exp=Math_exp;

  var _llvm_pow_f64=Math_pow;


___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iii": nullFunc_iii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "_fabs": _fabs, "_sin": _sin, "_exp": _exp, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_signal": _signal, "_fread": _fread, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_fopen": _fopen, "_longjmp": _longjmp, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_localtime_r": _localtime_r, "_tzset": _tzset, "_open": _open, "_sbrk": _sbrk, "_atan": _atan, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_clock": _clock, "_realloc": _realloc, "_cos": _cos, "_pread": _pread, "_mkport": _mkport, "_fclose": _fclose, "_log": _log, "_write": _write, "_fsync": _fsync, "___errno_location": ___errno_location, "_recv": _recv, "_fgetc": _fgetc, "_fputc": _fputc, "__exit": __exit, "_read": _read, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_abort": _abort, "_time": _time, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "_fgets": _fgets, "_fputs": _fputs, "_sqrt": _sqrt, "_localtime": _localtime, "_exit": _exit, "_close": _close, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var _fabs=env._fabs;
  var _sin=env._sin;
  var _exp=env._exp;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _signal=env._signal;
  var _fread=env._fread;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _fopen=env._fopen;
  var _longjmp=env._longjmp;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _open=env._open;
  var _sbrk=env._sbrk;
  var _atan=env._atan;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _clock=env._clock;
  var _realloc=env._realloc;
  var _cos=env._cos;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _fclose=env._fclose;
  var _log=env._log;
  var _write=env._write;
  var _fsync=env._fsync;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _fputc=env._fputc;
  var __exit=env.__exit;
  var _read=env._read;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _abort=env._abort;
  var _time=env._time;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _fgets=env._fgets;
  var _fputs=env._fputs;
  var _sqrt=env._sqrt;
  var _localtime=env._localtime;
  var _exit=env._exit;
  var _close=env._close;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _initmodify() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_gettemplate(4296)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[8>>2] = $2;
 $3 = (_gettemplate(9536)|0);
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[16>>2] = $5;
 $6 = (_gettemplate(6744)|0);
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[24>>2] = $8;
 $9 = (_gettemplate(6776)|0);
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[32>>2] = $11;
 $12 = (_gettemplate(6784)|0);
 $13 = (($12) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[40>>2] = $14;
 $15 = (_gettemplate(10808)|0);
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[48>>2] = $17;
 $18 = (_gettemplate(4304)|0);
 $19 = (($18) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[56>>2] = $20;
 return;
}
function _modify_expression($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $c;
 _initmodifyfunction(8984);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_reorganise(0,1,$1)|0);
 HEAP32[$0>>2] = $2;
 _forallhashtable(2);
 _forallhashtable(3);
 _modify_expr($0);
 $3 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _initmodifyfunction($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 (_strcpy((72|0),($1|0))|0);
 $2 = (_strstr(72,2936)|0);
 $pos = $2;
 $3 = $pos;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $pos;
  HEAP8[$5>>0] = 0;
 }
 $6 = $0;
 _storefunctionname($6);
 STACKTOP = sp;return;
}
function _reorganise($level,$exprtype,$c) {
 $level = $level|0;
 $exprtype = $exprtype|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arg = 0, $argcount = 0, $cmp = 0, $directors = 0, $dup = 0, $dupargcount = 0, $duphead = 0, $head = 0;
 var $k = 0, $temp = 0, $whereargcount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $level;
 $2 = $exprtype;
 $3 = $c;
 $4 = HEAP32[2576>>2]|0;
 $directors = $4;
 $5 = $3;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 0;
  $691 = $0;
  STACKTOP = sp;return ($691|0);
 }
 $7 = $2;
 if ((($7|0) == 1)) {
  $188 = $3;
  $189 = (($188) + 12|0);
  $190 = HEAP8[$189>>0]|0;
  $191 = $190&255;
  $192 = ($191|0)==(35);
  if ($192) {
   $193 = $3;
   $194 = (($193) + 4|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + 12|0);
   $197 = HEAP8[$196>>0]|0;
   $198 = $197&255;
   $199 = ($198|0)!=(35);
   if ($199) {
    $200 = $1;
    $201 = $3;
    $202 = HEAP32[$201>>2]|0;
    $203 = (_reorganise($200,1,$202)|0);
    $3 = $203;
   } else {
    $204 = $3;
    $205 = (($204) + 4|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = HEAP32[$206>>2]|0;
    $208 = (($207) + 4|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = ($209|0)==(0|0);
    if ($210) {
     $211 = $1;
     $212 = $3;
     $213 = (($212) + 4|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = HEAP32[$214>>2]|0;
     $216 = HEAP32[$215>>2]|0;
     $217 = (_reorganise($211,1,$216)|0);
     $218 = HEAP32[3152>>2]|0;
     $219 = HEAP32[3144>>2]|0;
     $220 = (($219) + ($218<<2)|0);
     HEAP32[$220>>2] = $217;
     $221 = HEAP32[3152>>2]|0;
     $222 = (($221) + 1)|0;
     HEAP32[3152>>2] = $222;
     $223 = $3;
     $224 = (($223) + 4|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = (($225) + 4|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = $3;
     $229 = (($228) + 4|0);
     HEAP32[$229>>2] = $227;
     $230 = $1;
     $231 = $3;
     $232 = (_reorganise($230,1,$231)|0);
     $233 = HEAP32[3152>>2]|0;
     $234 = HEAP32[3144>>2]|0;
     $235 = (($234) + ($233<<2)|0);
     HEAP32[$235>>2] = $232;
     $236 = HEAP32[3152>>2]|0;
     $237 = (($236) + 1)|0;
     HEAP32[3152>>2] = $237;
     $238 = HEAP32[2576>>2]|0;
     $239 = HEAP32[3152>>2]|0;
     $240 = HEAP32[3144>>2]|0;
     $241 = (($240) + ($239<<2)|0);
     HEAP32[$241>>2] = $238;
     $242 = HEAP32[3152>>2]|0;
     $243 = (($242) + 1)|0;
     HEAP32[3152>>2] = $243;
     _make_IF();
     $244 = HEAP32[3152>>2]|0;
     $245 = (($244) + -1)|0;
     HEAP32[3152>>2] = $245;
     $246 = HEAP32[3144>>2]|0;
     $247 = (($246) + ($245<<2)|0);
     $248 = HEAP32[$247>>2]|0;
     $3 = $248;
    } else {
     $249 = $1;
     $250 = $3;
     $251 = (_replace_listcomprehension($249,$250)|0);
     $3 = $251;
    }
   }
  } else {
   $252 = $3;
   $253 = (($252) + 12|0);
   $254 = HEAP8[$253>>0]|0;
   $255 = $254&255;
   $256 = ($255|0)==(32);
   if ($256) {
    $whereargcount = 0;
    $257 = $3;
    $258 = HEAP32[$257>>2]|0;
    $temp = $258;
    while(1) {
     $259 = $temp;
     $260 = (($259) + 12|0);
     $261 = HEAP8[$260>>0]|0;
     $262 = $261&255;
     $263 = ($262|0)==(39);
     if (!($263)) {
      break;
     }
     $264 = $temp;
     $265 = HEAP32[$264>>2]|0;
     $266 = HEAP32[$265>>2]|0;
     $267 = (($266) + 12|0);
     $268 = HEAP8[$267>>0]|0;
     $269 = $268&255;
     $270 = ($269|0)!=(22);
     if ($270) {
      $271 = $temp;
      $272 = HEAP32[$271>>2]|0;
      $273 = HEAP32[$272>>2]|0;
      $274 = (($273) + 12|0);
      $275 = HEAP8[$274>>0]|0;
      $276 = $275&255;
      $277 = ($276|0)!=(9);
      if ($277) {
       $278 = $1;
       $279 = $temp;
       $280 = HEAP32[$279>>2]|0;
       $281 = HEAP32[$280>>2]|0;
       $282 = (_reorganise($278,2,$281)|0);
       $283 = $temp;
       $284 = HEAP32[$283>>2]|0;
       HEAP32[$284>>2] = $282;
       $285 = (_newcell(18)|0);
       $head = $285;
       $286 = (_makeerror()|0);
       $287 = (($286) + 8|0);
       $288 = HEAP32[$287>>2]|0;
       $289 = $head;
       $290 = (($289) + 8|0);
       HEAP32[$290>>2] = $288;
       $291 = $temp;
       $292 = HEAP32[$291>>2]|0;
       $293 = HEAP32[$292>>2]|0;
       $294 = (_matchpattern($293)|0);
       $295 = $head;
       HEAP32[$295>>2] = $294;
       $296 = $temp;
       $297 = HEAP32[$296>>2]|0;
       $298 = (($297) + 4|0);
       $299 = HEAP32[$298>>2]|0;
       $300 = $head;
       $301 = (($300) + 4|0);
       HEAP32[$301>>2] = $299;
       $302 = $head;
       $303 = $temp;
       $304 = HEAP32[$303>>2]|0;
       $305 = (($304) + 4|0);
       HEAP32[$305>>2] = $302;
      }
     }
     $306 = $temp;
     $307 = HEAP32[$306>>2]|0;
     $308 = HEAP32[$307>>2]|0;
     $head = $308;
     while(1) {
      $309 = $head;
      $310 = (($309) + 12|0);
      $311 = HEAP8[$310>>0]|0;
      $312 = $311&255;
      $313 = ($312|0)==(22);
      if (!($313)) {
       break;
      }
      $314 = $head;
      $315 = HEAP32[$314>>2]|0;
      $head = $315;
     }
     $316 = $directors;
     $317 = $head;
     $318 = (_finddirector($316,$317)|0);
     $319 = ($318|0)==(0|0);
     if ($319) {
      $320 = (_newcell(16)|0);
      $arg = $320;
      $321 = $whereargcount;
      $322 = (($321) + 1)|0;
      $whereargcount = $322;
      $323 = (0 - ($321))|0;
      $324 = $arg;
      $325 = (($324) + 8|0);
      HEAP32[$325>>2] = $323;
      $326 = $directors;
      $327 = $arg;
      $328 = $head;
      $329 = (_appenddirectors($326,$327,$328,28)|0);
      $directors = $329;
     }
     $330 = $temp;
     $331 = (($330) + 4|0);
     $332 = HEAP32[$331>>2]|0;
     $temp = $332;
    }
    $333 = $whereargcount;
    $334 = $3;
    $335 = (($334) + 8|0);
    HEAP32[$335>>2] = $333;
    $336 = $directors;
    $337 = $3;
    $338 = (_replacedirectors($336,$337)|0);
    $339 = $whereargcount;
    _increasearg($338,$339);
    $340 = $1;
    $341 = $whereargcount;
    $342 = (($340) + ($341))|0;
    $343 = $3;
    $344 = (($343) + 4|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = (_reorganise($342,1,$345)|0);
    $347 = $3;
    $348 = (($347) + 4|0);
    HEAP32[$348>>2] = $346;
    $349 = $3;
    $350 = HEAP32[$349>>2]|0;
    $temp = $350;
    while(1) {
     $351 = $temp;
     $352 = (($351) + 12|0);
     $353 = HEAP8[$352>>0]|0;
     $354 = $353&255;
     $355 = ($354|0)==(39);
     if (!($355)) {
      break;
     }
     $356 = $temp;
     $357 = HEAP32[$356>>2]|0;
     $358 = HEAP32[$357>>2]|0;
     $359 = (($358) + 12|0);
     $360 = HEAP8[$359>>0]|0;
     $361 = $360&255;
     $362 = ($361|0)!=(22);
     if ($362) {
      $363 = $1;
      $364 = $whereargcount;
      $365 = (($363) + ($364))|0;
      $366 = $temp;
      $367 = HEAP32[$366>>2]|0;
      $368 = (($367) + 4|0);
      $369 = HEAP32[$368>>2]|0;
      $370 = (_reorganise($365,1,$369)|0);
      $371 = $temp;
      HEAP32[$371>>2] = $370;
      $372 = $temp;
      $373 = HEAP32[$372>>2]|0;
      $374 = (($373) + 12|0);
      $375 = HEAP8[$374>>0]|0;
      $376 = $375&255;
      $377 = ($376|0)==(16);
      if ($377) {
       $378 = $temp;
       $379 = HEAP32[$378>>2]|0;
       $380 = (_emptydirector($379)|0);
       $381 = $temp;
       HEAP32[$381>>2] = $380;
      } else {
       $382 = $temp;
       $383 = HEAP32[$382>>2]|0;
       $384 = (_lazylocal($383)|0);
       $385 = ($384|0)!=(0);
       if ($385) {
        $386 = $temp;
        $387 = HEAP32[$386>>2]|0;
        $388 = $1;
        $389 = $whereargcount;
        $390 = (($388) + ($389))|0;
        $391 = (_anonymoussection($387,$390,0)|0);
        $392 = $temp;
        HEAP32[$392>>2] = $391;
       }
      }
     } else {
      $argcount = 0;
      $393 = $temp;
      $394 = HEAP32[$393>>2]|0;
      $395 = HEAP32[$394>>2]|0;
      $head = $395;
      while(1) {
       $396 = $head;
       $397 = (($396) + 12|0);
       $398 = HEAP8[$397>>0]|0;
       $399 = $398&255;
       $400 = ($399|0)==(22);
       if (!($400)) {
        break;
       }
       $401 = $argcount;
       $402 = (($401) + 1)|0;
       $argcount = $402;
       $403 = $head;
       $404 = HEAP32[$403>>2]|0;
       $head = $404;
      }
      $405 = $1;
      $406 = $whereargcount;
      $407 = (($405) + ($406))|0;
      $408 = $temp;
      $409 = HEAP32[$408>>2]|0;
      $410 = (_reorganise($407,0,$409)|0);
      $411 = $temp;
      HEAP32[$411>>2] = $410;
      $412 = $temp;
      $dup = $412;
      while(1) {
       $413 = $dup;
       $414 = (($413) + 4|0);
       $415 = HEAP32[$414>>2]|0;
       $416 = (($415) + 12|0);
       $417 = HEAP8[$416>>0]|0;
       $418 = $417&255;
       $419 = ($418|0)==(39);
       if (!($419)) {
        break;
       }
       $dupargcount = 0;
       $420 = $dup;
       $421 = (($420) + 4|0);
       $422 = HEAP32[$421>>2]|0;
       $423 = HEAP32[$422>>2]|0;
       $424 = HEAP32[$423>>2]|0;
       $duphead = $424;
       while(1) {
        $425 = $duphead;
        $426 = (($425) + 12|0);
        $427 = HEAP8[$426>>0]|0;
        $428 = $427&255;
        $429 = ($428|0)==(22);
        if (!($429)) {
         break;
        }
        $430 = $dupargcount;
        $431 = (($430) + 1)|0;
        $dupargcount = $431;
        $432 = $duphead;
        $433 = HEAP32[$432>>2]|0;
        $duphead = $433;
       }
       $434 = $duphead;
       $435 = (($434) + 12|0);
       $436 = HEAP8[$435>>0]|0;
       $437 = $436&255;
       $438 = ($437|0)==(16);
       if ($438) {
        $439 = $duphead;
        $440 = (($439) + 8|0);
        $441 = HEAP32[$440>>2]|0;
        $442 = $head;
        $443 = (($442) + 8|0);
        $444 = HEAP32[$443>>2]|0;
        $445 = ($441|0)==($444|0);
        if ($445) {
         $446 = $dupargcount;
         $447 = $argcount;
         $448 = ($446|0)!=($447|0);
         if ($448) {
          _modifyerror(2,72);
         }
         $449 = $1;
         $450 = $whereargcount;
         $451 = (($449) + ($450))|0;
         $452 = $dup;
         $453 = (($452) + 4|0);
         $454 = HEAP32[$453>>2]|0;
         $455 = HEAP32[$454>>2]|0;
         $456 = (_reorganise($451,0,$455)|0);
         $457 = $dup;
         $458 = (($457) + 4|0);
         $459 = HEAP32[$458>>2]|0;
         HEAP32[$459>>2] = $456;
         $460 = $temp;
         $461 = HEAP32[$460>>2]|0;
         $462 = (($461) + 4|0);
         $463 = HEAP32[$462>>2]|0;
         $464 = $dup;
         $465 = (($464) + 4|0);
         $466 = HEAP32[$465>>2]|0;
         $467 = HEAP32[$466>>2]|0;
         $468 = (($467) + 4|0);
         $469 = HEAP32[$468>>2]|0;
         $470 = (_extenddefinition($463,$469)|0);
         $471 = $temp;
         $472 = HEAP32[$471>>2]|0;
         $473 = (($472) + 4|0);
         HEAP32[$473>>2] = $470;
         $474 = $dup;
         $475 = (($474) + 4|0);
         $476 = HEAP32[$475>>2]|0;
         $477 = (($476) + 4|0);
         $478 = HEAP32[$477>>2]|0;
         $479 = $dup;
         $480 = (($479) + 4|0);
         HEAP32[$480>>2] = $478;
        } else {
         label = 83;
        }
       } else {
        label = 83;
       }
       if ((label|0) == 83) {
        label = 0;
        $481 = $dup;
        $482 = (($481) + 4|0);
        $483 = HEAP32[$482>>2]|0;
        $dup = $483;
       }
      }
      $484 = $temp;
      $485 = HEAP32[$484>>2]|0;
      $486 = (($485) + 4|0);
      $487 = HEAP32[$486>>2]|0;
      $488 = $1;
      $489 = $whereargcount;
      $490 = (($488) + ($489))|0;
      $491 = $argcount;
      $492 = (_anonymoussection($487,$490,$491)|0);
      $493 = $temp;
      HEAP32[$493>>2] = $492;
     }
     $494 = $temp;
     $495 = (($494) + 4|0);
     $496 = HEAP32[$495>>2]|0;
     $temp = $496;
    }
    $497 = $3;
    $498 = $whereargcount;
    $499 = (0 - ($498))|0;
    _increasearg($497,$499);
   } else {
    $500 = $3;
    $501 = (($500) + 12|0);
    $502 = HEAP8[$501>>0]|0;
    $503 = $502&255;
    $504 = ($503|0)==(37);
    if ($504) {
     $argcount = 0;
     $505 = HEAP32[2968>>2]|0;
     $506 = HEAP32[3152>>2]|0;
     $507 = HEAP32[3144>>2]|0;
     $508 = (($507) + ($506<<2)|0);
     HEAP32[$508>>2] = $505;
     $509 = HEAP32[3152>>2]|0;
     $510 = (($509) + 1)|0;
     HEAP32[3152>>2] = $510;
     $511 = $3;
     $512 = HEAP32[$511>>2]|0;
     $temp = $512;
     while(1) {
      $513 = $temp;
      $514 = (($513) + 12|0);
      $515 = HEAP8[$514>>0]|0;
      $516 = $515&255;
      $517 = ($516|0)==(36);
      if (!($517)) {
       break;
      }
      $518 = $temp;
      $519 = HEAP32[$518>>2]|0;
      $520 = HEAP32[3152>>2]|0;
      $521 = HEAP32[3144>>2]|0;
      $522 = (($521) + ($520<<2)|0);
      HEAP32[$522>>2] = $519;
      $523 = HEAP32[3152>>2]|0;
      $524 = (($523) + 1)|0;
      HEAP32[3152>>2] = $524;
      _makeinverse(22);
      $525 = $argcount;
      $526 = (($525) + 1)|0;
      $argcount = $526;
      $527 = $temp;
      $528 = (($527) + 4|0);
      $529 = HEAP32[$528>>2]|0;
      $temp = $529;
     }
     $530 = $temp;
     $531 = HEAP32[3152>>2]|0;
     $532 = HEAP32[3144>>2]|0;
     $533 = (($532) + ($531<<2)|0);
     HEAP32[$533>>2] = $530;
     $534 = HEAP32[3152>>2]|0;
     $535 = (($534) + 1)|0;
     HEAP32[3152>>2] = $535;
     _makeinverse(39);
     $536 = $1;
     $537 = HEAP32[3152>>2]|0;
     $538 = (($537) + -1)|0;
     HEAP32[3152>>2] = $538;
     $539 = HEAP32[3144>>2]|0;
     $540 = (($539) + ($538<<2)|0);
     $541 = HEAP32[$540>>2]|0;
     $542 = (_reorganise($536,0,$541)|0);
     $543 = (($542) + 4|0);
     $544 = HEAP32[$543>>2]|0;
     $545 = $3;
     HEAP32[$545>>2] = $544;
     $546 = $3;
     $547 = (($546) + 4|0);
     $548 = HEAP32[$547>>2]|0;
     $dup = $548;
     while(1) {
      $549 = $dup;
      $550 = (($549) + 12|0);
      $551 = HEAP8[$550>>0]|0;
      $552 = $551&255;
      $553 = ($552|0)==(37);
      if (!($553)) {
       break;
      }
      $dupargcount = 0;
      $554 = HEAP32[2968>>2]|0;
      $555 = HEAP32[3152>>2]|0;
      $556 = HEAP32[3144>>2]|0;
      $557 = (($556) + ($555<<2)|0);
      HEAP32[$557>>2] = $554;
      $558 = HEAP32[3152>>2]|0;
      $559 = (($558) + 1)|0;
      HEAP32[3152>>2] = $559;
      $560 = $dup;
      $561 = HEAP32[$560>>2]|0;
      $temp = $561;
      while(1) {
       $562 = $temp;
       $563 = (($562) + 12|0);
       $564 = HEAP8[$563>>0]|0;
       $565 = $564&255;
       $566 = ($565|0)==(36);
       if (!($566)) {
        break;
       }
       $567 = $temp;
       $568 = HEAP32[$567>>2]|0;
       $569 = HEAP32[3152>>2]|0;
       $570 = HEAP32[3144>>2]|0;
       $571 = (($570) + ($569<<2)|0);
       HEAP32[$571>>2] = $568;
       $572 = HEAP32[3152>>2]|0;
       $573 = (($572) + 1)|0;
       HEAP32[3152>>2] = $573;
       _makeinverse(22);
       $574 = $dupargcount;
       $575 = (($574) + 1)|0;
       $dupargcount = $575;
       $576 = $temp;
       $577 = (($576) + 4|0);
       $578 = HEAP32[$577>>2]|0;
       $temp = $578;
      }
      $579 = $temp;
      $580 = HEAP32[3152>>2]|0;
      $581 = HEAP32[3144>>2]|0;
      $582 = (($581) + ($580<<2)|0);
      HEAP32[$582>>2] = $579;
      $583 = HEAP32[3152>>2]|0;
      $584 = (($583) + 1)|0;
      HEAP32[3152>>2] = $584;
      _makeinverse(39);
      $585 = $dupargcount;
      $586 = $argcount;
      $587 = ($585|0)!=($586|0);
      if ($587) {
       _modifyerror(2,72);
      }
      $588 = $3;
      $589 = HEAP32[$588>>2]|0;
      $590 = $1;
      $591 = HEAP32[3152>>2]|0;
      $592 = (($591) + -1)|0;
      HEAP32[3152>>2] = $592;
      $593 = HEAP32[3144>>2]|0;
      $594 = (($593) + ($592<<2)|0);
      $595 = HEAP32[$594>>2]|0;
      $596 = (_reorganise($590,0,$595)|0);
      $597 = (($596) + 4|0);
      $598 = HEAP32[$597>>2]|0;
      $599 = (_extenddefinition($589,$598)|0);
      $600 = $3;
      HEAP32[$600>>2] = $599;
      $601 = $dup;
      $602 = (($601) + 4|0);
      $603 = HEAP32[$602>>2]|0;
      $dup = $603;
     }
     $604 = $3;
     $605 = HEAP32[$604>>2]|0;
     $606 = $1;
     $607 = $argcount;
     $608 = (_anonymoussection($605,$606,$607)|0);
     $3 = $608;
    } else {
     $609 = $3;
     $610 = (($609) + 12|0);
     $611 = HEAP8[$610>>0]|0;
     $612 = $611&255;
     $613 = ($612|0)==(11);
     if ($613) {
      _modifyerror(5,72);
     } else {
      $614 = $3;
      $615 = (($614) + 12|0);
      $616 = HEAP8[$615>>0]|0;
      $617 = $616&255;
      $618 = ($617|0)==(42);
      if ($618) {
       $619 = $3;
       $620 = (_modifyrecord($619)|0);
       $3 = $620;
       $621 = $3;
       $temp = $621;
       while(1) {
        $622 = $temp;
        $623 = (($622) + 12|0);
        $624 = HEAP8[$623>>0]|0;
        $625 = $624&255;
        $626 = ($625|0)==(42);
        if (!($626)) {
         break;
        }
        $627 = $1;
        $628 = $temp;
        $629 = HEAP32[$628>>2]|0;
        $630 = (_reorganise($627,1,$629)|0);
        $631 = $temp;
        HEAP32[$631>>2] = $630;
        $632 = $temp;
        $633 = (($632) + 4|0);
        $634 = HEAP32[$633>>2]|0;
        $temp = $634;
       }
      } else {
       $635 = $3;
       $636 = (($635) + 12|0);
       $637 = HEAP8[$636>>0]|0;
       $638 = $637&255;
       $639 = ($638|0)==(41);
       if ($639) {
        label = 113;
       } else {
        $640 = $3;
        $641 = (($640) + 12|0);
        $642 = HEAP8[$641>>0]|0;
        $643 = $642&255;
        $644 = ($643|0)==(40);
        if ($644) {
         label = 113;
        } else {
         $668 = $3;
         $669 = (($668) + 12|0);
         $670 = HEAP8[$669>>0]|0;
         $671 = $670&255;
         $672 = ($671|0)>(17);
         if ($672) {
          $673 = $3;
          $674 = (($673) + 12|0);
          $675 = HEAP8[$674>>0]|0;
          $676 = $675&255;
          $677 = ($676|0)>(21);
          if ($677) {
           $678 = $1;
           $679 = $3;
           $680 = HEAP32[$679>>2]|0;
           $681 = (_reorganise($678,1,$680)|0);
           $682 = $3;
           HEAP32[$682>>2] = $681;
          }
          $683 = $1;
          $684 = $3;
          $685 = (($684) + 4|0);
          $686 = HEAP32[$685>>2]|0;
          $687 = (_reorganise($683,1,$686)|0);
          $688 = $3;
          $689 = (($688) + 4|0);
          HEAP32[$689>>2] = $687;
         }
        }
       }
       if ((label|0) == 113) {
        $645 = $3;
        $temp = $645;
        $k = 0;
        while(1) {
         $646 = $temp;
         $647 = (($646) + 12|0);
         $648 = HEAP8[$647>>0]|0;
         $649 = $648&255;
         $650 = $3;
         $651 = (($650) + 12|0);
         $652 = HEAP8[$651>>0]|0;
         $653 = $652&255;
         $654 = ($649|0)==($653|0);
         if (!($654)) {
          break;
         }
         $655 = $1;
         $656 = $temp;
         $657 = HEAP32[$656>>2]|0;
         $658 = (_reorganise($655,1,$657)|0);
         $659 = $temp;
         HEAP32[$659>>2] = $658;
         $660 = $temp;
         $661 = (($660) + 4|0);
         $662 = HEAP32[$661>>2]|0;
         $temp = $662;
         $663 = $k;
         $664 = (($663) + 1)|0;
         $k = $664;
        }
        $665 = $k;
        $666 = $3;
        $667 = (($666) + 8|0);
        HEAP32[$667>>2] = $665;
       }
      }
     }
    }
   }
  }
 } else if ((($7|0) == 0)) {
  $cmp = 0;
  $argcount = 0;
  $85 = $3;
  $86 = HEAP32[$85>>2]|0;
  $head = $86;
  while(1) {
   $87 = $head;
   $88 = (($87) + 12|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = ($90|0)==(22);
   if (!($91)) {
    break;
   }
   $92 = $argcount;
   $93 = (($92) + 1)|0;
   $argcount = $93;
   $94 = $head;
   $95 = HEAP32[$94>>2]|0;
   $head = $95;
  }
  $96 = $1;
  $97 = $argcount;
  $98 = (($96) + ($97))|0;
  $k = $98;
  $99 = $3;
  $100 = HEAP32[$99>>2]|0;
  $head = $100;
  while(1) {
   $101 = $head;
   $102 = (($101) + 12|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = ($104|0)==(22);
   if (!($105)) {
    break;
   }
   $106 = (_newcell(16)|0);
   $arg = $106;
   $107 = $k;
   $108 = (($107) + -1)|0;
   $k = $108;
   $109 = $arg;
   $110 = (($109) + 8|0);
   HEAP32[$110>>2] = $107;
   $111 = $1;
   $112 = $head;
   $113 = (($112) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (_reorganise($111,2,$114)|0);
   $116 = $head;
   $117 = (($116) + 4|0);
   HEAP32[$117>>2] = $115;
   $118 = $head;
   $119 = (($118) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($120) + 12|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = ($123|0)!=(9);
   if ($124) {
    $125 = (_newcell(19)|0);
    $temp = $125;
    $126 = $arg;
    $127 = (($126) + 8|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = $temp;
    $130 = (($129) + 8|0);
    HEAP32[$130>>2] = $128;
    $131 = $head;
    $132 = (($131) + 4|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (_matchpattern($133)|0);
    $135 = $temp;
    HEAP32[$135>>2] = $134;
    $136 = $cmp;
    $137 = $temp;
    $138 = (($137) + 4|0);
    HEAP32[$138>>2] = $136;
    $139 = $temp;
    $cmp = $139;
   }
   $140 = $directors;
   $141 = $arg;
   $142 = $head;
   $143 = (($142) + 4|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (_appenddirectors($140,$141,$144,27)|0);
   $directors = $145;
   $146 = $head;
   $147 = HEAP32[$146>>2]|0;
   $head = $147;
  }
  $148 = $cmp;
  $149 = ($148|0)!=(0|0);
  if ($149) {
   $150 = $cmp;
   $151 = HEAP32[3152>>2]|0;
   $152 = HEAP32[3144>>2]|0;
   $153 = (($152) + ($151<<2)|0);
   HEAP32[$153>>2] = $150;
   $154 = HEAP32[3152>>2]|0;
   $155 = (($154) + 1)|0;
   HEAP32[3152>>2] = $155;
   $156 = $3;
   $157 = (($156) + 4|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = HEAP32[3152>>2]|0;
   $160 = HEAP32[3144>>2]|0;
   $161 = (($160) + ($159<<2)|0);
   HEAP32[$161>>2] = $158;
   $162 = HEAP32[3152>>2]|0;
   $163 = (($162) + 1)|0;
   HEAP32[3152>>2] = $163;
   $164 = (_makeerror()|0);
   $165 = HEAP32[3152>>2]|0;
   $166 = HEAP32[3144>>2]|0;
   $167 = (($166) + ($165<<2)|0);
   HEAP32[$167>>2] = $164;
   $168 = HEAP32[3152>>2]|0;
   $169 = (($168) + 1)|0;
   HEAP32[3152>>2] = $169;
   _make_IF();
   $170 = HEAP32[3152>>2]|0;
   $171 = (($170) + -1)|0;
   HEAP32[3152>>2] = $171;
   $172 = HEAP32[3144>>2]|0;
   $173 = (($172) + ($171<<2)|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $3;
   $176 = (($175) + 4|0);
   HEAP32[$176>>2] = $174;
  }
  $177 = $1;
  $178 = $argcount;
  $179 = (($177) + ($178))|0;
  $180 = $directors;
  $181 = $3;
  $182 = (($181) + 4|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (_replacedirectors($180,$183)|0);
  $185 = (_reorganise($179,1,$184)|0);
  $186 = $3;
  $187 = (($186) + 4|0);
  HEAP32[$187>>2] = $185;
 } else if ((($7|0) == 2)) {
  $8 = $3;
  $9 = (($8) + 12|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)==(12);
  if ($12) {
   $13 = HEAP32[2968>>2]|0;
   $3 = $13;
  } else {
   $14 = $3;
   $15 = (($14) + 12|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = ($17|0)==(42);
   if ($18) {
    $19 = $3;
    $20 = (_modifyrecord($19)|0);
    $3 = $20;
    $21 = $3;
    $temp = $21;
    while(1) {
     $22 = $temp;
     $23 = (($22) + 12|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = ($25|0)==(42);
     if (!($26)) {
      break;
     }
     $27 = $1;
     $28 = $temp;
     $29 = HEAP32[$28>>2]|0;
     $30 = (_reorganise($27,2,$29)|0);
     $31 = $temp;
     HEAP32[$31>>2] = $30;
     $32 = $temp;
     $33 = (($32) + 4|0);
     $34 = HEAP32[$33>>2]|0;
     $temp = $34;
    }
   } else {
    $35 = $3;
    $36 = (($35) + 12|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = ($38|0)==(41);
    if ($39) {
     label = 14;
    } else {
     $40 = $3;
     $41 = (($40) + 12|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $42&255;
     $44 = ($43|0)==(40);
     if ($44) {
      label = 14;
     } else {
      $68 = $3;
      $69 = (($68) + 12|0);
      $70 = HEAP8[$69>>0]|0;
      $71 = $70&255;
      $72 = ($71|0)>(17);
      if ($72) {
       $73 = $1;
       $74 = $3;
       $75 = HEAP32[$74>>2]|0;
       $76 = (_reorganise($73,2,$75)|0);
       $77 = $3;
       HEAP32[$77>>2] = $76;
       $78 = $1;
       $79 = $3;
       $80 = (($79) + 4|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = (_reorganise($78,2,$81)|0);
       $83 = $3;
       $84 = (($83) + 4|0);
       HEAP32[$84>>2] = $82;
      }
     }
    }
    if ((label|0) == 14) {
     $45 = $3;
     $temp = $45;
     $k = 0;
     while(1) {
      $46 = $temp;
      $47 = (($46) + 12|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = $48&255;
      $50 = $3;
      $51 = (($50) + 12|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = $52&255;
      $54 = ($49|0)==($53|0);
      if (!($54)) {
       break;
      }
      $55 = $1;
      $56 = $temp;
      $57 = HEAP32[$56>>2]|0;
      $58 = (_reorganise($55,2,$57)|0);
      $59 = $temp;
      HEAP32[$59>>2] = $58;
      $60 = $temp;
      $61 = (($60) + 4|0);
      $62 = HEAP32[$61>>2]|0;
      $temp = $62;
      $63 = $k;
      $64 = (($63) + 1)|0;
      $k = $64;
     }
     $65 = $k;
     $66 = $3;
     $67 = (($66) + 8|0);
     HEAP32[$67>>2] = $65;
    }
   }
  }
 }
 $690 = $3;
 $0 = $690;
 $691 = $0;
 STACKTOP = sp;return ($691|0);
}
function _constantifyanonymous($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_strncmp($7,2936,4)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = (($10) + 4|0);
 _constantify($11);
 STACKTOP = sp;return;
}
function _modifyanonymous($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_strncmp($7,2936,4)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = (($10) + 4|0);
 _modify_expr($11);
 STACKTOP = sp;return;
}
function _modify_expr($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $app = 0, $argcount = 0, $fun = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp + 8|0;
 $0 = $c;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $app = $2;
 $3 = $app;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $app;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(22);
 if ($9) {
  label = 5;
 } else {
  $10 = $app;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)==(14);
  if ($14) {
   label = 5;
  } else {
   $297 = $app;
   $298 = (($297) + 12|0);
   $299 = HEAP8[$298>>0]|0;
   $300 = $299&255;
   $301 = ($300|0)>(17);
   if ($301) {
    $302 = $app;
    _modify_expr($302);
    $303 = $app;
    $304 = (($303) + 4|0);
    _modify_expr($304);
   }
  }
 }
 if ((label|0) == 5) {
  $argcount = 0;
  while(1) {
   $15 = $app;
   $16 = (($15) + 12|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = ($18|0)==(22);
   if (!($19)) {
    break;
   }
   $20 = $app;
   $21 = (($20) + 4|0);
   _modify_expr($21);
   $22 = $app;
   $23 = HEAP32[$22>>2]|0;
   $app = $23;
   $24 = $argcount;
   $25 = (($24) + 1)|0;
   $argcount = $25;
  }
  $26 = $app;
  $27 = (($26) + 12|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = ($29|0)!=(14);
  if ($30) {
   STACKTOP = sp;return;
  }
  $31 = HEAP32[2568>>2]|0;
  $32 = $app;
  $33 = (($32) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($31) + (($34*52)|0)|0);
  $fun = $35;
  $36 = $argcount;
  $37 = $fun;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($36|0)<($39|0);
  if ($40) {
   STACKTOP = sp;return;
  }
  while(1) {
   $41 = $argcount;
   $42 = $fun;
   $43 = (($42) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($41|0)>($44|0);
   if (!($45)) {
    break;
   }
   $46 = $0;
   $47 = HEAP32[$46>>2]|0;
   $0 = $47;
   $48 = $argcount;
   $49 = (($48) + -1)|0;
   $argcount = $49;
  }
  $50 = $argcount;
  $51 = ($50|0)==(0);
  if ($51) {
   $52 = $app;
   $53 = (($52) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (_constantfunction($54)|0);
   $56 = ($55|0)!=(0);
   if ($56) {
    STACKTOP = sp;return;
   }
  }
  $57 = $argcount;
  $58 = ($57|0)==(1);
  if ($58) {
   $59 = $fun;
   $60 = (($59) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)!=(0);
   if ($62) {
    $63 = (_newcell(25)|0);
    HEAP32[$temp>>2] = $63;
    $64 = $app;
    $65 = (($64) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = HEAP32[$temp>>2]|0;
    $68 = (($67) + 8|0);
    HEAP32[$68>>2] = $66;
    $69 = $0;
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = HEAP32[$temp>>2]|0;
    HEAP32[$73>>2] = $72;
   } else {
    label = 21;
   }
  } else {
   label = 21;
  }
  if ((label|0) == 21) {
   $74 = $argcount;
   $75 = ($74|0)==(1);
   if ($75) {
    $76 = $app;
    $77 = (($76) + 8|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = HEAP32[16>>2]|0;
    $80 = ($78|0)==($79|0);
    if ($80) {
     $81 = (_newcell(23)|0);
     HEAP32[$temp>>2] = $81;
     $82 = $0;
     $83 = HEAP32[$82>>2]|0;
     $84 = (($83) + 4|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = HEAP32[$temp>>2]|0;
     HEAP32[$86>>2] = $85;
     $87 = (_newcell(23)|0);
     $88 = HEAP32[$temp>>2]|0;
     $89 = (($88) + 4|0);
     HEAP32[$89>>2] = $87;
     $90 = HEAP32[2952>>2]|0;
     $91 = HEAP32[$temp>>2]|0;
     $92 = (($91) + 4|0);
     $93 = HEAP32[$92>>2]|0;
     HEAP32[$93>>2] = $90;
     $94 = HEAP32[2944>>2]|0;
     $95 = HEAP32[$temp>>2]|0;
     $96 = (($95) + 4|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($97) + 4|0);
     HEAP32[$98>>2] = $94;
    } else {
     label = 24;
    }
   } else {
    label = 24;
   }
   if ((label|0) == 24) {
    $99 = $argcount;
    $100 = ($99|0)==(2);
    if ($100) {
     $101 = $fun;
     $102 = (($101) + 16|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103|0)!=(0);
     if ($104) {
      $105 = (_newcell(26)|0);
      HEAP32[$temp>>2] = $105;
      $106 = $app;
      $107 = (($106) + 8|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = HEAP32[$temp>>2]|0;
      $110 = (($109) + 8|0);
      HEAP32[$110>>2] = $108;
      $111 = $0;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($112) + 4|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = HEAP32[$temp>>2]|0;
      $116 = (($115) + 4|0);
      HEAP32[$116>>2] = $114;
      $117 = $0;
      $118 = HEAP32[$117>>2]|0;
      $119 = HEAP32[$118>>2]|0;
      $120 = (($119) + 4|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = HEAP32[$temp>>2]|0;
      HEAP32[$122>>2] = $121;
     } else {
      label = 27;
     }
    } else {
     label = 27;
    }
    if ((label|0) == 27) {
     $123 = $argcount;
     $124 = ($123|0)==(2);
     if ($124) {
      $125 = $app;
      $126 = (($125) + 8|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = HEAP32[24>>2]|0;
      $129 = ($127|0)==($128|0);
      if ($129) {
       $130 = (_newcell(39)|0);
       HEAP32[$temp>>2] = $130;
       $131 = $0;
       $132 = HEAP32[$131>>2]|0;
       $133 = (($132) + 4|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = HEAP32[$temp>>2]|0;
       $136 = (($135) + 4|0);
       HEAP32[$136>>2] = $134;
       $137 = $0;
       $138 = HEAP32[$137>>2]|0;
       $139 = HEAP32[$138>>2]|0;
       $140 = (($139) + 4|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = HEAP32[$temp>>2]|0;
       HEAP32[$142>>2] = $141;
      } else {
       label = 30;
      }
     } else {
      label = 30;
     }
     if ((label|0) == 30) {
      $143 = $argcount;
      $144 = ($143|0)==(2);
      if ($144) {
       $145 = $app;
       $146 = (($145) + 8|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = HEAP32[32>>2]|0;
       $149 = ($147|0)==($148|0);
       if ($149) {
        $150 = (_newcell(23)|0);
        HEAP32[$temp>>2] = $150;
        $151 = $0;
        $152 = HEAP32[$151>>2]|0;
        $153 = HEAP32[$152>>2]|0;
        $154 = (($153) + 4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = HEAP32[$temp>>2]|0;
        HEAP32[$156>>2] = $155;
        $157 = (_newcell(23)|0);
        $158 = HEAP32[$temp>>2]|0;
        $159 = (($158) + 4|0);
        HEAP32[$159>>2] = $157;
        $160 = $0;
        $161 = HEAP32[$160>>2]|0;
        $162 = (($161) + 4|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = HEAP32[$temp>>2]|0;
        $165 = (($164) + 4|0);
        $166 = HEAP32[$165>>2]|0;
        HEAP32[$166>>2] = $163;
        $167 = HEAP32[2952>>2]|0;
        $168 = HEAP32[$temp>>2]|0;
        $169 = (($168) + 4|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (($170) + 4|0);
        HEAP32[$171>>2] = $167;
       } else {
        label = 33;
       }
      } else {
       label = 33;
      }
      if ((label|0) == 33) {
       $172 = $argcount;
       $173 = ($172|0)==(2);
       if ($173) {
        $174 = $app;
        $175 = (($174) + 8|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = HEAP32[40>>2]|0;
        $178 = ($176|0)==($177|0);
        if ($178) {
         $179 = (_newcell(23)|0);
         HEAP32[$temp>>2] = $179;
         $180 = $0;
         $181 = HEAP32[$180>>2]|0;
         $182 = HEAP32[$181>>2]|0;
         $183 = (($182) + 4|0);
         $184 = HEAP32[$183>>2]|0;
         $185 = HEAP32[$temp>>2]|0;
         HEAP32[$185>>2] = $184;
         $186 = (_newcell(23)|0);
         $187 = HEAP32[$temp>>2]|0;
         $188 = (($187) + 4|0);
         HEAP32[$188>>2] = $186;
         $189 = HEAP32[2944>>2]|0;
         $190 = HEAP32[$temp>>2]|0;
         $191 = (($190) + 4|0);
         $192 = HEAP32[$191>>2]|0;
         HEAP32[$192>>2] = $189;
         $193 = $0;
         $194 = HEAP32[$193>>2]|0;
         $195 = (($194) + 4|0);
         $196 = HEAP32[$195>>2]|0;
         $197 = HEAP32[$temp>>2]|0;
         $198 = (($197) + 4|0);
         $199 = HEAP32[$198>>2]|0;
         $200 = (($199) + 4|0);
         HEAP32[$200>>2] = $196;
        } else {
         label = 36;
        }
       } else {
        label = 36;
       }
       if ((label|0) == 36) {
        $201 = $argcount;
        $202 = ($201|0)==(3);
        do {
         if ($202) {
          $203 = $app;
          $204 = (($203) + 8|0);
          $205 = HEAP32[$204>>2]|0;
          $206 = HEAP32[8>>2]|0;
          $207 = ($205|0)==($206|0);
          if (!($207)) {
           label = 39;
           break;
          }
          $208 = (_newcell(23)|0);
          HEAP32[$temp>>2] = $208;
          $209 = $0;
          $210 = HEAP32[$209>>2]|0;
          $211 = HEAP32[$210>>2]|0;
          $212 = HEAP32[$211>>2]|0;
          $213 = (($212) + 4|0);
          $214 = HEAP32[$213>>2]|0;
          $215 = HEAP32[$temp>>2]|0;
          HEAP32[$215>>2] = $214;
          $216 = (_newcell(23)|0);
          $217 = HEAP32[$temp>>2]|0;
          $218 = (($217) + 4|0);
          HEAP32[$218>>2] = $216;
          $219 = $0;
          $220 = HEAP32[$219>>2]|0;
          $221 = HEAP32[$220>>2]|0;
          $222 = (($221) + 4|0);
          $223 = HEAP32[$222>>2]|0;
          $224 = HEAP32[$temp>>2]|0;
          $225 = (($224) + 4|0);
          $226 = HEAP32[$225>>2]|0;
          HEAP32[$226>>2] = $223;
          $227 = $0;
          $228 = HEAP32[$227>>2]|0;
          $229 = (($228) + 4|0);
          $230 = HEAP32[$229>>2]|0;
          $231 = HEAP32[$temp>>2]|0;
          $232 = (($231) + 4|0);
          $233 = HEAP32[$232>>2]|0;
          $234 = (($233) + 4|0);
          HEAP32[$234>>2] = $230;
         } else {
          label = 39;
         }
        } while(0);
        if ((label|0) == 39) {
         $235 = $argcount;
         $236 = ($235|0)==(3);
         do {
          if ($236) {
           $237 = $app;
           $238 = (($237) + 8|0);
           $239 = HEAP32[$238>>2]|0;
           $240 = HEAP32[48>>2]|0;
           $241 = ($239|0)==($240|0);
           if (!($241)) {
            label = 42;
            break;
           }
           $242 = (_newcell(22)|0);
           HEAP32[$temp>>2] = $242;
           $243 = $0;
           $244 = HEAP32[$243>>2]|0;
           $245 = HEAP32[$244>>2]|0;
           $246 = HEAP32[$245>>2]|0;
           $247 = (($246) + 4|0);
           $248 = HEAP32[$247>>2]|0;
           $249 = HEAP32[$temp>>2]|0;
           HEAP32[$249>>2] = $248;
           $250 = (_newcell(22)|0);
           $251 = HEAP32[$temp>>2]|0;
           $252 = (($251) + 4|0);
           HEAP32[$252>>2] = $250;
           $253 = $0;
           $254 = HEAP32[$253>>2]|0;
           $255 = HEAP32[$254>>2]|0;
           $256 = (($255) + 4|0);
           $257 = HEAP32[$256>>2]|0;
           $258 = HEAP32[$temp>>2]|0;
           $259 = (($258) + 4|0);
           $260 = HEAP32[$259>>2]|0;
           HEAP32[$260>>2] = $257;
           $261 = $0;
           $262 = HEAP32[$261>>2]|0;
           $263 = (($262) + 4|0);
           $264 = HEAP32[$263>>2]|0;
           $265 = HEAP32[$temp>>2]|0;
           $266 = (($265) + 4|0);
           $267 = HEAP32[$266>>2]|0;
           $268 = (($267) + 4|0);
           HEAP32[$268>>2] = $264;
           _modify_expr($temp);
          } else {
           label = 42;
          }
         } while(0);
         if ((label|0) == 42) {
          $269 = $0;
          $270 = HEAP32[$269>>2]|0;
          $app = $270;
          while(1) {
           $271 = $app;
           $272 = (($271) + 12|0);
           $273 = HEAP8[$272>>0]|0;
           $274 = $273&255;
           $275 = ($274|0)==(22);
           if (!($275)) {
            break;
           }
           $276 = $app;
           $277 = (($276) + 4|0);
           $278 = HEAP32[$277>>2]|0;
           $279 = HEAP32[3152>>2]|0;
           $280 = HEAP32[3144>>2]|0;
           $281 = (($280) + ($279<<2)|0);
           HEAP32[$281>>2] = $278;
           $282 = HEAP32[3152>>2]|0;
           $283 = (($282) + 1)|0;
           HEAP32[3152>>2] = $283;
           $284 = $app;
           $285 = HEAP32[$284>>2]|0;
           $app = $285;
          }
          $286 = $app;
          $287 = (($286) + 8|0);
          $288 = HEAP32[$287>>2]|0;
          $289 = $argcount;
          _makeAPPLICATION($288,$289);
          $290 = HEAP32[3152>>2]|0;
          $291 = (($290) + -1)|0;
          HEAP32[3152>>2] = $291;
          $292 = HEAP32[3144>>2]|0;
          $293 = (($292) + ($291<<2)|0);
          $294 = HEAP32[$293>>2]|0;
          HEAP32[$temp>>2] = $294;
         }
        }
       }
      }
     }
    }
   }
  }
  $295 = HEAP32[$temp>>2]|0;
  $296 = $0;
  HEAP32[$296>>2] = $295;
 }
 STACKTOP = sp;return;
}
function _modify_definitions() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _forallhashtable(4);
 while(1) {
  HEAP32[64>>2] = 0;
  _forallhashtable(5);
  $0 = HEAP32[64>>2]|0;
  $1 = ($0|0)!=(0);
  if (!($1)) {
   break;
  }
 }
 _forallhashtable(6);
 return;
}
function _reorganisefuncdef($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $def = 0, $temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_strstr($7,2936)|0);
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $def = 0;
 _checkmemlarge();
 $10 = $0;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 _initmodifyfunction($12);
 $13 = $0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $temp = $15;
 while(1) {
  $16 = $temp;
  $17 = (($16) + 12|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($19|0)==(39);
  if (!($20)) {
   break;
  }
  $21 = $temp;
  $22 = HEAP32[$21>>2]|0;
  $23 = (_reorganise(0,0,$22)|0);
  $24 = $temp;
  HEAP32[$24>>2] = $23;
  $25 = $def;
  $26 = $temp;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_extenddefinition($25,$29)|0);
  $def = $30;
  $31 = $temp;
  $32 = (($31) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $temp = $33;
 }
 $34 = $def;
 $35 = $0;
 $36 = (($35) + 4|0);
 HEAP32[$36>>2] = $34;
 STACKTOP = sp;return;
}
function _constantifyfuncdef($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  _checkmemlarge();
  $9 = $0;
  $10 = (($9) + 4|0);
  _constantify($10);
 } else {
  $11 = $0;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 12|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)==(14);
  if ($17) {
   $18 = $0;
   $19 = (($18) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_constantfunction($22)|0);
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = HEAP32[2568>>2]|0;
    $26 = $0;
    $27 = (($26) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($25) + (($30*52)|0)|0);
    $32 = (($31) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $0;
    $35 = (($34) + 4|0);
    HEAP32[$35>>2] = $33;
    HEAP32[64>>2] = 1;
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   $36 = $0;
   $37 = (($36) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 12|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = ($41|0)==(31);
   if (!($42)) {
    $43 = $0;
    $44 = (($43) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 12|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47&255;
    $49 = ($48|0)<(8);
    if (!($49)) {
     _checkmemlarge();
     $50 = $0;
     $51 = (($50) + 4|0);
     _constantify($51);
     $52 = $0;
     $53 = (($52) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($54) + 12|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = ($57|0)==(31);
     if ($58) {
      label = 12;
     } else {
      $59 = $0;
      $60 = (($59) + 4|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (($61) + 12|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = $63&255;
      $65 = ($64|0)<(8);
      if ($65) {
       label = 12;
      }
     }
     if ((label|0) == 12) {
      HEAP32[64>>2] = 1;
     }
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _modifyfuncdef($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 _checkmemlarge();
 $5 = $0;
 $6 = (($5) + 4|0);
 _modify_expr($6);
 STACKTOP = sp;return;
}
function _constantify($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_constant($2)|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 12|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(38);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (_newcell(31)|0);
 $temp = $11;
 $12 = $0;
 $13 = HEAP32[$12>>2]|0;
 $14 = $temp;
 HEAP32[$14>>2] = $13;
 $15 = $temp;
 $16 = $0;
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function _constant($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0;
 var $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $constleft = 0, $constright = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $114 = $0;
  STACKTOP = sp;return ($114|0);
 }
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)<(8);
 if ($8) {
  $0 = 1;
  $114 = $0;
  STACKTOP = sp;return ($114|0);
 }
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)>(38);
 if ($13) {
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = (_constant($15)|0);
  $constleft = $16;
  $17 = $1;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_constant($19)|0);
  $constright = $20;
  $21 = $constleft;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $constright;
   $24 = ($23|0)!=(0);
   $26 = $24;
  } else {
   $26 = 0;
  }
  $25 = $26&1;
  $0 = $25;
  $114 = $0;
  STACKTOP = sp;return ($114|0);
 }
 $27 = $1;
 $28 = (($27) + 12|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = ($30|0)==(31);
 if ($31) {
  $0 = 1;
  $114 = $0;
  STACKTOP = sp;return ($114|0);
 }
 $32 = $1;
 $33 = (($32) + 12|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = ($35|0)==(14);
 if ($36) {
  $37 = $1;
  $38 = (($37) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_constantfunction($39)|0);
  $0 = $40;
  $114 = $0;
  STACKTOP = sp;return ($114|0);
 }
 $41 = $1;
 $42 = (($41) + 12|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = ($44|0)==(22);
 do {
  if ($45) {
   $46 = $1;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + 12|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = ($50|0)==(14);
   if ($51) {
    $52 = $1;
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + 8|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[56>>2]|0;
    $57 = ($55|0)==($56|0);
    if ($57) {
     $58 = $1;
     $59 = (($58) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (($60) + 12|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62&255;
     $64 = ($63|0)==(3);
     if ($64) {
      $65 = $1;
      $66 = (($65) + 12|0);
      HEAP8[$66>>0] = 3;
      $67 = $1;
      $68 = (($67) + 4|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = HEAP32[$69>>2]|0;
      $71 = (0 - ($70))|0;
      $72 = $1;
      HEAP32[$72>>2] = $71;
      $0 = 1;
      $114 = $0;
      STACKTOP = sp;return ($114|0);
     }
     $73 = $1;
     $74 = (($73) + 4|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (($75) + 12|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77&255;
     $79 = ($78|0)==(4);
     if ($79) {
      $80 = $1;
      $81 = (($80) + 12|0);
      HEAP8[$81>>0] = 4;
      $82 = $1;
      $83 = (($82) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = +HEAPF64[$84>>3];
      $86 = -$85;
      $87 = $1;
      HEAPF64[$87>>3] = $86;
      $0 = 1;
      $114 = $0;
      STACKTOP = sp;return ($114|0);
     } else {
      break;
     }
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $88 = $1;
  $89 = (($88) + 12|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = ($91|0)==(32);
  if ($92) {
   $93 = $1;
   $94 = (($93) + 4|0);
   _constantify($94);
   $95 = $1;
   $96 = HEAP32[$95>>2]|0;
   $1 = $96;
   while(1) {
    $97 = $1;
    $98 = (($97) + 12|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = ($100|0)==(39);
    if (!($101)) {
     break;
    }
    $102 = $1;
    _constantify($102);
    $103 = $1;
    $104 = (($103) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $1 = $105;
   }
  } else {
   $106 = $1;
   $107 = (($106) + 12|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = ($109|0)>(21);
   if ($110) {
    $111 = $1;
    _constantify($111);
    $112 = $1;
    $113 = (($112) + 4|0);
    _constantify($113);
   }
  }
 }
 $0 = 0;
 $114 = $0;
 STACKTOP = sp;return ($114|0);
}
function _extenddefinition($definition,$c) {
 $definition = $definition|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $definition;
 $2 = $c;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = $1;
  $6 = (($5) + 12|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(13);
  if (!($9)) {
   $11 = $1;
   $12 = (($11) + 12|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = ($14|0)==(23);
   if ($15) {
    $16 = $1;
    $17 = (($16) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $2;
    $22 = (_extenddefinition($20,$21)|0);
    $23 = $1;
    $24 = (($23) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + 4|0);
    HEAP32[$26>>2] = $22;
    $27 = $1;
    $0 = $27;
    $29 = $0;
    STACKTOP = sp;return ($29|0);
   } else {
    _modifyerror(1,72);
    $28 = $1;
    $0 = $28;
    $29 = $0;
    STACKTOP = sp;return ($29|0);
   }
  }
 }
 $10 = $2;
 $0 = $10;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _modifyrecord($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $funnr = 0, $t1 = 0, $t2 = 0, $temp = 0, $type = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $c;
 $1 = HEAP32[2568>>2]|0;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + (($6*52)|0)|0);
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $funnr = $13;
 $14 = HEAP32[2568>>2]|0;
 $15 = $funnr;
 $16 = (($14) + (($15*52)|0)|0);
 $17 = (($16) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $type = $20;
 $21 = (_newcell(42)|0);
 $temp = $21;
 $22 = $type;
 $t1 = $22;
 $23 = $temp;
 $t2 = $23;
 $24 = $funnr;
 $25 = $temp;
 $26 = (($25) + 8|0);
 HEAP32[$26>>2] = $24;
 while(1) {
  $27 = (_newcell(12)|0);
  $28 = $t2;
  HEAP32[$28>>2] = $27;
  $29 = $t1;
  $30 = (($29) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $t1 = $31;
  $32 = $t1;
  $33 = (($32) + 12|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = ($35|0)!=(42);
  if ($36) {
   break;
  }
  $37 = (_newcell(42)|0);
  $38 = $t2;
  $39 = (($38) + 4|0);
  HEAP32[$39>>2] = $37;
  $t2 = $37;
 }
 $40 = HEAP32[2968>>2]|0;
 $41 = $t2;
 $42 = (($41) + 4|0);
 HEAP32[$42>>2] = $40;
 while(1) {
  $43 = $0;
  $44 = (($43) + 12|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = ($46|0)==(42);
  if (!($47)) {
   break;
  }
  $48 = $type;
  $t1 = $48;
  $49 = $temp;
  $t2 = $49;
  while(1) {
   $50 = $t1;
   $51 = HEAP32[$50>>2]|0;
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $0;
   $56 = HEAP32[$55>>2]|0;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($54|0)!=($59|0);
   if (!($60)) {
    break;
   }
   $61 = $t1;
   $62 = (($61) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $t1 = $63;
   $64 = $t2;
   $65 = (($64) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $t2 = $66;
  }
  $67 = $t2;
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + 12|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = ($71|0)!=(12);
  if ($72) {
   $73 = HEAP32[2568>>2]|0;
   $74 = $0;
   $75 = HEAP32[$74>>2]|0;
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($73) + (($78*52)|0)|0);
   $80 = (($79) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   HEAP32[$vararg_buffer>>2] = $81;
   _Write(5568,$vararg_buffer);
   _modifyerror(4,72);
  }
  $82 = $0;
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $t2;
  HEAP32[$86>>2] = $85;
  $87 = $0;
  $88 = (($87) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $0 = $89;
 }
 $90 = $temp;
 STACKTOP = sp;return ($90|0);
}
function _replace_listcomprehension($level,$c) {
 $level = $level|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arg = 0, $directors = 0;
 var $expr = 0, $filter = 0, $filtercount = 0, $generator = 0, $generatorcount = 0, $next = 0, $set2 = 0, $singlegenerator = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $level;
 $1 = $c;
 $2 = $1;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $next = $4;
 $filter = 0;
 $5 = HEAP32[2576>>2]|0;
 $directors = $5;
 $filtercount = 0;
 $generatorcount = 0;
 $6 = $next;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $generator = $8;
 $9 = $next;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $expr = $12;
 while(1) {
  $13 = $generator;
  $14 = (($13) + 12|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)==(39);
  if ($17) {
   $18 = $expr;
   $19 = (($18) + 12|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = ($21|0)==(39);
   $296 = $22;
  } else {
   $296 = 0;
  }
  if (!($296)) {
   break;
  }
  $23 = $generatorcount;
  $24 = (($23) + 1)|0;
  $generatorcount = $24;
  $25 = (_newcell(16)|0);
  $arg = $25;
  $26 = $0;
  $27 = $generatorcount;
  $28 = (($26) + ($27))|0;
  $29 = $arg;
  $30 = (($29) + 8|0);
  HEAP32[$30>>2] = $28;
  $31 = $0;
  $32 = $expr;
  $33 = HEAP32[$32>>2]|0;
  $34 = (_reorganise($31,1,$33)|0);
  $35 = $expr;
  HEAP32[$35>>2] = $34;
  $36 = $generator;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = ($40|0)==(9);
  $42 = $41&1;
  $singlegenerator = $42;
  $43 = $0;
  $44 = $generator;
  $45 = HEAP32[$44>>2]|0;
  $46 = (_reorganise($43,2,$45)|0);
  $47 = $generator;
  HEAP32[$47>>2] = $46;
  $48 = $singlegenerator;
  $49 = ($48|0)!=(0);
  if (!($49)) {
   $50 = (_newcell(19)|0);
   $51 = HEAP32[3152>>2]|0;
   $52 = HEAP32[3144>>2]|0;
   $53 = (($52) + ($51<<2)|0);
   HEAP32[$53>>2] = $50;
   $54 = HEAP32[3152>>2]|0;
   $55 = (($54) + 1)|0;
   HEAP32[3152>>2] = $55;
   $56 = $arg;
   $57 = (($56) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = HEAP32[3152>>2]|0;
   $60 = (($59) - 1)|0;
   $61 = HEAP32[3144>>2]|0;
   $62 = (($61) + ($60<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + 8|0);
   HEAP32[$64>>2] = $58;
   $65 = $generator;
   $66 = HEAP32[$65>>2]|0;
   $67 = (_matchpattern($66)|0);
   $68 = HEAP32[3152>>2]|0;
   $69 = (($68) - 1)|0;
   $70 = HEAP32[3144>>2]|0;
   $71 = (($70) + ($69<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   HEAP32[$72>>2] = $67;
   $73 = $filtercount;
   $74 = (($73) + 1)|0;
   $filtercount = $74;
  }
  $75 = $directors;
  $76 = $arg;
  $77 = $generator;
  $78 = HEAP32[$77>>2]|0;
  $79 = (_appenddirectors($75,$76,$78,27)|0);
  $directors = $79;
  $80 = $generator;
  $81 = (($80) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  $generator = $82;
  $83 = $expr;
  $84 = (($83) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $expr = $85;
 }
 $86 = $directors;
 $87 = $1;
 $88 = (_replacedirectors($86,$87)|0);
 $1 = $88;
 $89 = $filtercount;
 $90 = ($89|0)>(0);
 if ($90) {
  $91 = HEAP32[3152>>2]|0;
  $92 = (($91) + -1)|0;
  HEAP32[3152>>2] = $92;
  $93 = HEAP32[3144>>2]|0;
  $94 = (($93) + ($92<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $temp = $95;
  while(1) {
   $96 = $filtercount;
   $97 = (($96) + -1)|0;
   $filtercount = $97;
   $98 = ($97|0)>(0);
   if (!($98)) {
    break;
   }
   $99 = $temp;
   $100 = HEAP32[3152>>2]|0;
   $101 = (($100) - 1)|0;
   $102 = HEAP32[3144>>2]|0;
   $103 = (($102) + ($101<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + 4|0);
   HEAP32[$105>>2] = $99;
   $106 = HEAP32[3152>>2]|0;
   $107 = (($106) + -1)|0;
   HEAP32[3152>>2] = $107;
   $108 = HEAP32[3144>>2]|0;
   $109 = (($108) + ($107<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $temp = $110;
  }
  $111 = $temp;
  $112 = HEAP32[3152>>2]|0;
  $113 = HEAP32[3144>>2]|0;
  $114 = (($113) + ($112<<2)|0);
  HEAP32[$114>>2] = $111;
  $115 = HEAP32[3152>>2]|0;
  $116 = (($115) + 1)|0;
  HEAP32[3152>>2] = $116;
  $filtercount = 1;
 }
 while(1) {
  $117 = $next;
  $118 = (($117) + 4|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + 12|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = $121&255;
  $123 = ($122|0)==(35);
  if ($123) {
   $124 = $next;
   $125 = (($124) + 4|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + 4|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($129|0)==(0|0);
   $297 = $130;
  } else {
   $297 = 0;
  }
  if (!($297)) {
   break;
  }
  $131 = $0;
  $132 = $generatorcount;
  $133 = (($131) + ($132))|0;
  $134 = $next;
  $135 = (($134) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = HEAP32[$136>>2]|0;
  $138 = HEAP32[$137>>2]|0;
  $139 = (_reorganise($133,1,$138)|0);
  $140 = HEAP32[3152>>2]|0;
  $141 = HEAP32[3144>>2]|0;
  $142 = (($141) + ($140<<2)|0);
  HEAP32[$142>>2] = $139;
  $143 = HEAP32[3152>>2]|0;
  $144 = (($143) + 1)|0;
  HEAP32[3152>>2] = $144;
  $145 = $filtercount;
  $146 = (($145) + 1)|0;
  $filtercount = $146;
  $147 = $next;
  $148 = (($147) + 4|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (($149) + 4|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $next;
  $153 = (($152) + 4|0);
  HEAP32[$153>>2] = $151;
 }
 $154 = $filtercount;
 $155 = ($154|0)>(0);
 if ($155) {
  while(1) {
   $156 = $filtercount;
   $157 = (($156) + -1)|0;
   $filtercount = $157;
   $158 = ($157|0)>(0);
   if (!($158)) {
    break;
   }
   $159 = HEAP32[2952>>2]|0;
   $160 = HEAP32[3152>>2]|0;
   $161 = HEAP32[3144>>2]|0;
   $162 = (($161) + ($160<<2)|0);
   HEAP32[$162>>2] = $159;
   $163 = HEAP32[3152>>2]|0;
   $164 = (($163) + 1)|0;
   HEAP32[3152>>2] = $164;
   _make_IF();
  }
  $165 = HEAP32[3152>>2]|0;
  $166 = (($165) + -1)|0;
  HEAP32[3152>>2] = $166;
  $167 = HEAP32[3144>>2]|0;
  $168 = (($167) + ($166<<2)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $0;
  $171 = $generatorcount;
  $172 = (_anonymoussection($169,$170,$171)|0);
  $filter = $172;
 }
 $173 = $next;
 $174 = (($173) + 4|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = (($175) + 12|0);
 $177 = HEAP8[$176>>0]|0;
 $178 = $177&255;
 $179 = ($178|0)==(35);
 $180 = $179&1;
 $set2 = $180;
 $181 = $set2;
 $182 = ($181|0)!=(0);
 if ($182) {
  $183 = $next;
  $184 = (($183) + 4|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = $1;
  $187 = (($186) + 4|0);
  HEAP32[$187>>2] = $185;
  $188 = $0;
  $189 = $generatorcount;
  $190 = (($188) + ($189))|0;
  $191 = $1;
  $192 = (_replace_listcomprehension($190,$191)|0);
  $1 = $192;
 } else {
  $193 = $1;
  $194 = HEAP32[$193>>2]|0;
  $195 = (($194) + 4|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = (($196) + 12|0);
  $198 = HEAP8[$197>>0]|0;
  $199 = $198&255;
  $200 = ($199|0)==(39);
  if ($200) {
   $201 = HEAP32[3152>>2]|0;
   $202 = HEAP32[3144>>2]|0;
   $203 = (($202) + ($201<<2)|0);
   HEAP32[$203>>2] = 0;
   $204 = HEAP32[3152>>2]|0;
   $205 = (($204) + 1)|0;
   HEAP32[3152>>2] = $205;
   $206 = HEAP32[3152>>2]|0;
   $207 = HEAP32[3144>>2]|0;
   $208 = (($207) + ($206<<2)|0);
   HEAP32[$208>>2] = 0;
   $209 = HEAP32[3152>>2]|0;
   $210 = (($209) + 1)|0;
   HEAP32[3152>>2] = $210;
   $211 = $0;
   $212 = $generatorcount;
   $213 = (($211) + ($212))|0;
   $214 = $1;
   $215 = HEAP32[$214>>2]|0;
   $216 = (_reorganise($213,1,$215)|0);
   $217 = HEAP32[3152>>2]|0;
   $218 = HEAP32[3144>>2]|0;
   $219 = (($218) + ($217<<2)|0);
   HEAP32[$219>>2] = $216;
   $220 = HEAP32[3152>>2]|0;
   $221 = (($220) + 1)|0;
   HEAP32[3152>>2] = $221;
   _makeset(29,1);
   $222 = HEAP32[3152>>2]|0;
   $223 = (($222) + -1)|0;
   HEAP32[3152>>2] = $223;
   $224 = HEAP32[3144>>2]|0;
   $225 = (($224) + ($223<<2)|0);
   $226 = HEAP32[$225>>2]|0;
   $1 = $226;
   $set2 = 1;
  } else {
   $227 = $0;
   $228 = $generatorcount;
   $229 = (($227) + ($228))|0;
   $230 = $1;
   $231 = HEAP32[$230>>2]|0;
   $232 = HEAP32[$231>>2]|0;
   $233 = (_reorganise($229,1,$232)|0);
   $1 = $233;
   $234 = $generatorcount;
   $235 = ($234|0)==(1);
   if ($235) {
    $236 = $singlegenerator;
    $237 = ($236|0)!=(0);
    if ($237) {
     $238 = $1;
     $239 = (($238) + 12|0);
     $240 = HEAP8[$239>>0]|0;
     $241 = $240&255;
     $242 = ($241|0)==(16);
     if ($242) {
      $243 = $1;
      $244 = (($243) + 8|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = $0;
      $247 = (($246) + 1)|0;
      $248 = ($245|0)==($247|0);
      if ($248) {
       $1 = 0;
      }
     }
    }
   }
  }
 }
 $249 = $1;
 $250 = ($249|0)!=(0|0);
 if ($250) {
  $251 = $1;
  $252 = $0;
  $253 = $generatorcount;
  $254 = (_anonymoussection($251,$252,$253)|0);
  $258 = $254;
 } else {
  $258 = 0;
 }
 $255 = HEAP32[3152>>2]|0;
 $256 = HEAP32[3144>>2]|0;
 $257 = (($256) + ($255<<2)|0);
 HEAP32[$257>>2] = $258;
 $259 = HEAP32[3152>>2]|0;
 $260 = (($259) + 1)|0;
 HEAP32[3152>>2] = $260;
 $261 = $filter;
 $262 = HEAP32[3152>>2]|0;
 $263 = HEAP32[3144>>2]|0;
 $264 = (($263) + ($262<<2)|0);
 HEAP32[$264>>2] = $261;
 $265 = HEAP32[3152>>2]|0;
 $266 = (($265) + 1)|0;
 HEAP32[3152>>2] = $266;
 $267 = $next;
 $268 = HEAP32[$267>>2]|0;
 $269 = (($268) + 4|0);
 $270 = HEAP32[$269>>2]|0;
 $expr = $270;
 while(1) {
  $271 = $expr;
  $272 = (($271) + 12|0);
  $273 = HEAP8[$272>>0]|0;
  $274 = $273&255;
  $275 = ($274|0)==(39);
  if (!($275)) {
   break;
  }
  $276 = $expr;
  $277 = HEAP32[$276>>2]|0;
  $278 = HEAP32[3152>>2]|0;
  $279 = HEAP32[3144>>2]|0;
  $280 = (($279) + ($278<<2)|0);
  HEAP32[$280>>2] = $277;
  $281 = HEAP32[3152>>2]|0;
  $282 = (($281) + 1)|0;
  HEAP32[3152>>2] = $282;
  $283 = $expr;
  $284 = (($283) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $expr = $285;
 }
 $286 = $set2;
 $287 = ($286|0)!=(0);
 $288 = $287 ? 30 : 29;
 $289 = $288&255;
 $290 = $generatorcount;
 _makeset($289,$290);
 $291 = HEAP32[3152>>2]|0;
 $292 = (($291) + -1)|0;
 HEAP32[3152>>2] = $292;
 $293 = HEAP32[3144>>2]|0;
 $294 = (($293) + ($292<<2)|0);
 $295 = HEAP32[$294>>2]|0;
 STACKTOP = sp;return ($295|0);
}
function _increasearg($c,$n) {
 $c = $c|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $n;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = (($4) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)==(16);
 if ($8) {
  label = 5;
 } else {
  $9 = $0;
  $10 = (($9) + 12|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($12|0)==(19);
  if ($13) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $14 = $1;
  $15 = $0;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14))|0;
  HEAP32[$16>>2] = $18;
 }
 $19 = $0;
 $20 = (($19) + 12|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = ($22|0)>(17);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $0;
 $25 = HEAP32[$24>>2]|0;
 $26 = $1;
 _increasearg($25,$26);
 $27 = $0;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $1;
 _increasearg($29,$30);
 STACKTOP = sp;return;
}
function _lazylocal($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argcount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 if ((($5|0) == 18) | (($5|0) == 32) | (($5|0) == 23)) {
  $0 = 1;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 } else if ((($5|0) == 22)) {
  $argcount = 0;
  while(1) {
   $6 = $1;
   $7 = (($6) + 12|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8&255;
   $10 = ($9|0)==(22);
   if (!($10)) {
    break;
   }
   $11 = $argcount;
   $12 = (($11) + 1)|0;
   $argcount = $12;
   $13 = $1;
   $14 = HEAP32[$13>>2]|0;
   $1 = $14;
  }
  $15 = $1;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)==(14);
  if ($19) {
   $20 = $argcount;
   $21 = ($20|0)==(1);
   if ($21) {
    $22 = $1;
    $23 = (($22) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP32[16>>2]|0;
    $26 = ($24|0)==($25|0);
    if ($26) {
     $49 = 1;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
   do {
    if ((label|0) == 10) {
     $27 = $argcount;
     $28 = ($27|0)==(2);
     if ($28) {
      $29 = $1;
      $30 = (($29) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = HEAP32[40>>2]|0;
      $33 = ($31|0)==($32|0);
      if ($33) {
       $49 = 1;
       break;
      }
      $34 = $1;
      $35 = (($34) + 8|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = HEAP32[32>>2]|0;
      $38 = ($36|0)==($37|0);
      if ($38) {
       $49 = 1;
       break;
      }
     }
     $39 = $argcount;
     $40 = ($39|0)==(3);
     if ($40) {
      $41 = $1;
      $42 = (($41) + 8|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = HEAP32[8>>2]|0;
      $45 = ($43|0)==($44|0);
      $50 = $45;
     } else {
      $50 = 0;
     }
     $49 = $50;
    }
   } while(0);
   $47 = $49;
  } else {
   $47 = 0;
  }
  $46 = $47&1;
  $0 = $46;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 } else {
  $0 = 0;
  $48 = $0;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _anonymoussection($def,$neededlevel,$argcount) {
 $def = $def|0;
 $neededlevel = $neededlevel|0;
 $argcount = $argcount|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $args = 0, $k = 0, $list = 0, $makeapplcount = 0, $newlevel = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $def;
 $1 = $neededlevel;
 $2 = $argcount;
 $newlevel = 1;
 $3 = HEAP32[2576>>2]|0;
 $args = $3;
 $k = 1;
 while(1) {
  $4 = $k;
  $5 = $1;
  $6 = ($4|0)<=($5|0);
  if (!($6)) {
   break;
  }
  $7 = $k;
  $8 = $newlevel;
  $9 = $0;
  $10 = (_replacearg($7,$8,$9)|0);
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = (_newcell(39)|0);
   $list = $12;
   $13 = (_newcell(16)|0);
   $14 = $list;
   HEAP32[$14>>2] = $13;
   $15 = $k;
   $16 = $list;
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + 8|0);
   HEAP32[$18>>2] = $15;
   $19 = $args;
   $20 = $list;
   $21 = (($20) + 4|0);
   HEAP32[$21>>2] = $19;
   $22 = $list;
   $args = $22;
   $23 = $newlevel;
   $24 = (($23) + 1)|0;
   $newlevel = $24;
  }
  $25 = $k;
  $26 = (($25) + 1)|0;
  $k = $26;
 }
 while(1) {
  $27 = $k;
  $28 = $1;
  $29 = $2;
  $30 = (($28) + ($29))|0;
  $31 = ($27|0)<=($30|0);
  if (!($31)) {
   break;
  }
  $32 = $k;
  $33 = $newlevel;
  $34 = $0;
  (_replacearg($32,$33,$34)|0);
  $35 = $newlevel;
  $36 = (($35) + 1)|0;
  $newlevel = $36;
  $37 = $k;
  $38 = (($37) + 1)|0;
  $k = $38;
 }
 $39 = $newlevel;
 $40 = (($39) + -1)|0;
 $newlevel = $40;
 $makeapplcount = 0;
 while(1) {
  $41 = $args;
  $42 = (($41) + 12|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = ($44|0)==(39);
  if (!($45)) {
   break;
  }
  $46 = $args;
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[3152>>2]|0;
  $49 = HEAP32[3144>>2]|0;
  $50 = (($49) + ($48<<2)|0);
  HEAP32[$50>>2] = $47;
  $51 = HEAP32[3152>>2]|0;
  $52 = (($51) + 1)|0;
  HEAP32[3152>>2] = $52;
  $53 = $makeapplcount;
  $54 = (($53) + 1)|0;
  $makeapplcount = $54;
  $55 = $args;
  $56 = (($55) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $args = $57;
 }
 $58 = $newlevel;
 $59 = $0;
 $60 = (_anonymousfunction($58,$59)|0);
 $61 = HEAP32[3152>>2]|0;
 $62 = HEAP32[3144>>2]|0;
 $63 = (($62) + ($61<<2)|0);
 HEAP32[$63>>2] = $60;
 $64 = HEAP32[3152>>2]|0;
 $65 = (($64) + 1)|0;
 HEAP32[3152>>2] = $65;
 while(1) {
  $66 = $makeapplcount;
  $67 = (($66) + -1)|0;
  $makeapplcount = $67;
  $68 = ($66|0)>(0);
  if (!($68)) {
   break;
  }
  _make(22);
 }
 $69 = HEAP32[3152>>2]|0;
 $70 = (($69) + -1)|0;
 HEAP32[3152>>2] = $70;
 $71 = HEAP32[3144>>2]|0;
 $72 = (($71) + ($70<<2)|0);
 $73 = HEAP32[$72>>2]|0;
 STACKTOP = sp;return ($73|0);
}
function _replacearg($level,$newlevel,$c) {
 $level = $level|0;
 $newlevel = $newlevel|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $level;
 $2 = $newlevel;
 $3 = $c;
 $result = 0;
 $4 = $3;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = $result;
  $0 = $6;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $7 = $3;
 $8 = (($7) + 12|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)==(16);
 if ($11) {
  label = 5;
 } else {
  $12 = $3;
  $13 = (($12) + 12|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==(19);
  if ($16) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $17 = $3;
  $18 = (($17) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = ($19|0)==($20|0);
  if ($21) {
   $22 = $2;
   $23 = $3;
   $24 = (($23) + 8|0);
   HEAP32[$24>>2] = $22;
   $result = 1;
  }
 }
 $25 = $3;
 $26 = (($25) + 12|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = ($28|0)>(17);
 if ($29) {
  $30 = $1;
  $31 = $2;
  $32 = $3;
  $33 = HEAP32[$32>>2]|0;
  $34 = (_replacearg($30,$31,$33)|0);
  $35 = ($34|0)!=(0);
  if ($35) {
   $result = 1;
  }
  $36 = $1;
  $37 = $2;
  $38 = $3;
  $39 = (($38) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (_replacearg($36,$37,$40)|0);
  $42 = ($41|0)!=(0);
  if ($42) {
   $result = 1;
  }
 }
 $43 = $result;
 $0 = $43;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _checkpattern($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + 12|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 switch ($6|0) {
 case 42:  {
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  _checkpattern($15);
  $16 = $0;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  _checkpattern($18);
  break;
 }
 case 11: case 7: case 6: case 5: case 2: case 4: case 3: case 14: case 1: case 12:  {
  break;
 }
 case 41: case 40: case 39:  {
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  _checkpattern($8);
  $9 = $0;
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  _checkpattern($11);
  break;
 }
 case 22:  {
  $19 = $0;
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  _checkpattern($21);
  $22 = $0;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 12|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = ($26|0)!=(22);
  do {
   if ($27) {
    label = 12;
   } else {
    $28 = $0;
    $29 = (($28) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 12|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = ($33|0)==(12);
    if ($34) {
     label = 12;
    } else {
     $35 = $0;
     $36 = (($35) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (($37) + 12|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39&255;
     $41 = ($40|0)==(14);
     if ($41) {
      label = 12;
     } else {
      $42 = $0;
      $43 = HEAP32[$42>>2]|0;
      $44 = (($43) + 4|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = (($45) + 12|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $47&255;
      $49 = ($48|0)==(12);
      if (!($49)) {
       $50 = $0;
       $51 = HEAP32[$50>>2]|0;
       $52 = (($51) + 4|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (($53) + 12|0);
       $55 = HEAP8[$54>>0]|0;
       $56 = $55&255;
       $57 = ($56|0)==(14);
       if (!($57)) {
        label = 12;
        break;
       }
      }
      $58 = $0;
      $59 = HEAP32[$58>>2]|0;
      $60 = HEAP32[$59>>2]|0;
      $61 = (_gettemplate(3832)|0);
      $62 = ($60|0)!=($61|0);
      if ($62) {
       label = 12;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   _parseerror(30);
  }
  $63 = $0;
  $64 = (($63) + 12|0);
  HEAP8[$64>>0] = 20;
  $65 = $0;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $0;
  HEAP32[$69>>2] = $68;
  break;
 }
 default: {
  _parseerror(30);
 }
 }
 STACKTOP = sp;return;
}
function _matchpattern($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, $temp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = (($4) + 12|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   switch ($7|0) {
   case 20:  {
    $9 = $1;
    $10 = (($9) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_matchpattern($11)|0);
    $0 = $12;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
    break;
   }
   case 42: case 41: case 40:  {
    $28 = $1;
    $29 = (($28) + 12|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = (_newcell($30)|0);
    $temp1 = $31;
    $32 = $1;
    $33 = (($32) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $temp1;
    $36 = (($35) + 8|0);
    HEAP32[$36>>2] = $34;
    $37 = $1;
    $38 = HEAP32[$37>>2]|0;
    $39 = (_matchpattern($38)|0);
    $40 = $temp1;
    HEAP32[$40>>2] = $39;
    $41 = $1;
    $42 = (($41) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (_fastmatchpattern($43)|0);
    $45 = $temp1;
    $46 = (($45) + 4|0);
    HEAP32[$46>>2] = $44;
    $47 = $temp1;
    $0 = $47;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
    break;
   }
   case 9:  {
    $8 = HEAP32[2968>>2]|0;
    $0 = $8;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
    break;
   }
   case 39:  {
    $13 = $1;
    $14 = (($13) + 12|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = (_newcell($15)|0);
    $temp = $16;
    $17 = $1;
    $18 = HEAP32[$17>>2]|0;
    $19 = (_matchpattern($18)|0);
    $20 = $temp;
    HEAP32[$20>>2] = $19;
    $21 = $1;
    $22 = (($21) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (_matchpattern($23)|0);
    $25 = $temp;
    $26 = (($25) + 4|0);
    HEAP32[$26>>2] = $24;
    $27 = $temp;
    $0 = $27;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 $48 = $1;
 $0 = $48;
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function _match($pattern,$c) {
 $pattern = $pattern|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $pattern;
 $2 = $c;
 $3 = $2;
 $4 = (($3) + 12|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)>(8);
 if ($7) {
  $8 = $2;
  $9 = (($8) + 12|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)<(38);
  if ($12) {
   $13 = $2;
   $14 = HEAP32[3152>>2]|0;
   $15 = HEAP32[3144>>2]|0;
   $16 = (($15) + ($14<<2)|0);
   HEAP32[$16>>2] = $13;
   $17 = HEAP32[3152>>2]|0;
   $18 = (($17) + 1)|0;
   HEAP32[3152>>2] = $18;
   _eval();
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) - 1)|0;
   HEAP32[3152>>2] = $20;
  }
 }
 $21 = $1;
 $22 = (($21) + 12|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $2;
 $26 = (($25) + 12|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = ($24|0)!=($28|0);
 if ($29) {
  $30 = $1;
  $31 = (($30) + 12|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($33|0)==(11);
  if ($34) {
   $35 = $1;
   $36 = (($35) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $2;
   $39 = (($38) + 12|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = ($37|0)==($41|0);
   if ($42) {
    $160 = 1;
   } else {
    $43 = $1;
    $44 = (($43) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)==(3);
    if ($46) {
     $47 = $2;
     $48 = (($47) + 12|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = ($50|0)==(4);
     $161 = $51;
    } else {
     $161 = 0;
    }
    $160 = $161;
   }
   $53 = $160;
  } else {
   $53 = 0;
  }
  $52 = $53&1;
  $0 = $52;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 $54 = $1;
 $55 = (($54) + 12|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 switch ($57|0) {
 case 6:  {
  $0 = 1;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
  break;
 }
 case 4:  {
  $64 = $1;
  $65 = +HEAPF64[$64>>3];
  $66 = $2;
  $67 = +HEAPF64[$66>>3];
  $68 = $65 == $67;
  $69 = $68&1;
  $0 = $69;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
  break;
 }
 case 39:  {
  while(1) {
   $70 = $1;
   $71 = HEAP32[$70>>2]|0;
   $72 = HEAP32[2968>>2]|0;
   $73 = ($71|0)!=($72|0);
   if ($73) {
    $74 = $1;
    $75 = HEAP32[$74>>2]|0;
    $76 = $2;
    $77 = HEAP32[$76>>2]|0;
    $78 = (_match($75,$77)|0);
    $79 = ($78|0)!=(0);
    if (!($79)) {
     label = 19;
     break;
    }
   }
   $80 = $1;
   $81 = (($80) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = HEAP32[2968>>2]|0;
   $84 = ($82|0)==($83|0);
   if ($84) {
    label = 21;
    break;
   }
   $85 = $1;
   $86 = (($85) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $1 = $87;
   $88 = $2;
   $89 = (($88) + 4|0);
   $90 = HEAP32[$89>>2]|0;
   $2 = $90;
   $91 = $2;
   $92 = (($91) + 12|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = ($94|0)>(8);
   if ($95) {
    $96 = $2;
    $97 = (($96) + 12|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = ($99|0)<(38);
    if ($100) {
     $101 = $2;
     $102 = HEAP32[3152>>2]|0;
     $103 = HEAP32[3144>>2]|0;
     $104 = (($103) + ($102<<2)|0);
     HEAP32[$104>>2] = $101;
     $105 = HEAP32[3152>>2]|0;
     $106 = (($105) + 1)|0;
     HEAP32[3152>>2] = $106;
     _eval();
     $107 = HEAP32[3152>>2]|0;
     $108 = (($107) - 1)|0;
     HEAP32[3152>>2] = $108;
    }
   }
   $109 = $1;
   $110 = (($109) + 12|0);
   $111 = HEAP8[$110>>0]|0;
   $112 = $111&255;
   $113 = $2;
   $114 = (($113) + 12|0);
   $115 = HEAP8[$114>>0]|0;
   $116 = $115&255;
   $117 = ($112|0)!=($116|0);
   if ($117) {
    label = 26;
    break;
   }
   $118 = $1;
   $119 = (($118) + 12|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = ($121|0)!=(39);
   if ($122) {
    label = 28;
    break;
   }
  }
  if ((label|0) == 19) {
   $0 = 0;
   $159 = $0;
   STACKTOP = sp;return ($159|0);
  }
  else if ((label|0) == 21) {
   $0 = 1;
   $159 = $0;
   STACKTOP = sp;return ($159|0);
  }
  else if ((label|0) == 26) {
   $0 = 0;
   $159 = $0;
   STACKTOP = sp;return ($159|0);
  }
  else if ((label|0) == 28) {
   $0 = 1;
   $159 = $0;
   STACKTOP = sp;return ($159|0);
  }
  break;
 }
 case 3:  {
  $58 = $1;
  $59 = HEAP32[$58>>2]|0;
  $60 = $2;
  $61 = HEAP32[$60>>2]|0;
  $62 = ($59|0)==($61|0);
  $63 = $62&1;
  $0 = $63;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
  break;
 }
 case 42: case 41: case 40:  {
  $123 = $1;
  $124 = (($123) + 8|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $2;
  $127 = (($126) + 8|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($125|0)!=($128|0);
  if ($129) {
   $0 = 0;
   $159 = $0;
   STACKTOP = sp;return ($159|0);
  }
  while(1) {
   $130 = $1;
   $131 = HEAP32[$130>>2]|0;
   $132 = HEAP32[2968>>2]|0;
   $133 = ($131|0)!=($132|0);
   if ($133) {
    $134 = $1;
    $135 = HEAP32[$134>>2]|0;
    $136 = $2;
    $137 = HEAP32[$136>>2]|0;
    $138 = (_match($135,$137)|0);
    $139 = ($138|0)!=(0);
    if (!($139)) {
     label = 35;
     break;
    }
   }
   $140 = $1;
   $141 = (($140) + 4|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = HEAP32[2968>>2]|0;
   $144 = ($142|0)==($143|0);
   if ($144) {
    label = 37;
    break;
   }
   $145 = $1;
   $146 = (($145) + 4|0);
   $147 = HEAP32[$146>>2]|0;
   $1 = $147;
   $148 = $2;
   $149 = (($148) + 4|0);
   $150 = HEAP32[$149>>2]|0;
   $2 = $150;
  }
  if ((label|0) == 35) {
   $0 = 0;
   $159 = $0;
   STACKTOP = sp;return ($159|0);
  }
  else if ((label|0) == 37) {
   $0 = 1;
   $159 = $0;
   STACKTOP = sp;return ($159|0);
  }
  break;
 }
 default: {
  $151 = $1;
  $152 = (($151) + 8|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $2;
  $155 = (($154) + 8|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ($153|0)==($156|0);
  $158 = $157&1;
  $0 = $158;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 }
 return (0)|0;
}
function _copydirector($bitstring,$c) {
 $bitstring = $bitstring|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bitstring;
 $1 = $c;
 while(1) {
  $2 = $0;
  $3 = ($2|0)>=(16);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = $4 & 15;
  do {
   switch ($5|0) {
   case 13:  {
    $101 = $1;
    $102 = HEAP32[$101>>2]|0;
    $103 = (($102) + 4|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = HEAP32[$104>>2]|0;
    $106 = HEAP32[$105>>2]|0;
    $1 = $106;
    break;
   }
   case 14:  {
    $107 = $1;
    $108 = (($107) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = HEAP32[$109>>2]|0;
    $111 = HEAP32[$110>>2]|0;
    $112 = HEAP32[$111>>2]|0;
    $1 = $112;
    break;
   }
   case 11:  {
    $88 = $1;
    $89 = HEAP32[$88>>2]|0;
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = HEAP32[$92>>2]|0;
    $1 = $93;
    break;
   }
   case 3:  {
    $31 = $1;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $1 = $37;
    break;
   }
   case 0:  {
    $6 = $1;
    $7 = (($6) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($8) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $1 = $14;
    break;
   }
   case 2:  {
    $23 = $1;
    $24 = (($23) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $1 = $30;
    break;
   }
   case 1:  {
    $15 = $1;
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $1 = $22;
    break;
   }
   case 12:  {
    $94 = $1;
    $95 = (($94) + 4|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($96) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP32[$98>>2]|0;
    $100 = HEAP32[$99>>2]|0;
    $1 = $100;
    break;
   }
   case 15:  {
    $113 = $1;
    $114 = HEAP32[$113>>2]|0;
    $115 = HEAP32[$114>>2]|0;
    $116 = HEAP32[$115>>2]|0;
    $117 = HEAP32[$116>>2]|0;
    $1 = $117;
    break;
   }
   case 5:  {
    $46 = $1;
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $1 = $52;
    break;
   }
   case 4:  {
    $38 = $1;
    $39 = (($38) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $1 = $45;
    break;
   }
   case 7:  {
    $60 = $1;
    $61 = HEAP32[$60>>2]|0;
    $62 = HEAP32[$61>>2]|0;
    $63 = HEAP32[$62>>2]|0;
    $64 = (($63) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $1 = $65;
    break;
   }
   case 9:  {
    $74 = $1;
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + 4|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = HEAP32[$79>>2]|0;
    $1 = $80;
    break;
   }
   case 8:  {
    $66 = $1;
    $67 = (($66) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = HEAP32[$72>>2]|0;
    $1 = $73;
    break;
   }
   case 6:  {
    $53 = $1;
    $54 = (($53) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[$55>>2]|0;
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $1 = $59;
    break;
   }
   case 10:  {
    $81 = $1;
    $82 = (($81) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + 4|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = HEAP32[$86>>2]|0;
    $1 = $87;
    break;
   }
   default: {
   }
   }
  } while(0);
  $118 = $0;
  $119 = $118 >> 4;
  $0 = $119;
 }
 $120 = $0;
 do {
  switch ($120|0) {
  case 13:  {
   $172 = $1;
   $173 = HEAP32[$172>>2]|0;
   $174 = (($173) + 4|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = HEAP32[$175>>2]|0;
   $1 = $176;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  case 15:  {
   $182 = $1;
   $183 = HEAP32[$182>>2]|0;
   $184 = HEAP32[$183>>2]|0;
   $185 = HEAP32[$184>>2]|0;
   $1 = $185;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  case 14:  {
   $177 = $1;
   $178 = (($177) + 4|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = HEAP32[$179>>2]|0;
   $181 = HEAP32[$180>>2]|0;
   $1 = $181;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  case 8:  {
   $142 = $1;
   $143 = (($142) + 4|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (($144) + 4|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (($146) + 4|0);
   $148 = HEAP32[$147>>2]|0;
   $1 = $148;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  case 9:  {
   $149 = $1;
   $150 = HEAP32[$149>>2]|0;
   $151 = (($150) + 4|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = (($152) + 4|0);
   $154 = HEAP32[$153>>2]|0;
   $1 = $154;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  case 12:  {
   $166 = $1;
   $167 = (($166) + 4|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (($168) + 4|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = HEAP32[$170>>2]|0;
   $1 = $171;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  case 6:  {
   $135 = $1;
   $136 = (($135) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = HEAP32[$137>>2]|0;
   $1 = $138;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  case 11:  {
   $161 = $1;
   $162 = HEAP32[$161>>2]|0;
   $163 = HEAP32[$162>>2]|0;
   $164 = (($163) + 4|0);
   $165 = HEAP32[$164>>2]|0;
   $1 = $165;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  case 7:  {
   $139 = $1;
   $140 = HEAP32[$139>>2]|0;
   $141 = HEAP32[$140>>2]|0;
   $1 = $141;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  case 4:  {
   $126 = $1;
   $127 = (($126) + 4|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (($128) + 4|0);
   $130 = HEAP32[$129>>2]|0;
   $1 = $130;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  case 2:  {
   $121 = $1;
   $122 = (($121) + 4|0);
   $123 = HEAP32[$122>>2]|0;
   $1 = $123;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  case 5:  {
   $131 = $1;
   $132 = HEAP32[$131>>2]|0;
   $133 = (($132) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $1 = $134;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  case 3:  {
   $124 = $1;
   $125 = HEAP32[$124>>2]|0;
   $1 = $125;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  case 10:  {
   $155 = $1;
   $156 = (($155) + 4|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = HEAP32[$157>>2]|0;
   $159 = (($158) + 4|0);
   $160 = HEAP32[$159>>2]|0;
   $1 = $160;
   $186 = $1;
   STACKTOP = sp;return ($186|0);
   break;
  }
  default: {
   $186 = $1;
   STACKTOP = sp;return ($186|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _emptydirector($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $director = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = (_newcell(28)|0);
 $director = $1;
 $2 = $director;
 $3 = (($2) + 8|0);
 HEAP32[$3>>2] = 1;
 $4 = $0;
 $5 = $director;
 HEAP32[$5>>2] = $4;
 $6 = $director;
 STACKTOP = sp;return ($6|0);
}
function _finddirector($directorlist,$c) {
 $directorlist = $directorlist|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $directorlist;
 $2 = $c;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 0;
  $31 = $0;
  STACKTOP = sp;return ($31|0);
 }
 $5 = $2;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(9);
 do {
  if ($9) {
   while(1) {
    $10 = $1;
    $11 = (($10) + 12|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = ($13|0)==(39);
    if (!($14)) {
     label = 10;
     break;
    }
    $15 = $1;
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $2;
    $21 = (($20) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($19|0)==($22|0);
    if ($23) {
     break;
    }
    $28 = $1;
    $29 = (($28) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $1 = $30;
   }
   if ((label|0) == 10) {
    break;
   }
   $24 = $1;
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $0 = $27;
   $31 = $0;
   STACKTOP = sp;return ($31|0);
  }
 } while(0);
 $0 = 0;
 $31 = $0;
 STACKTOP = sp;return ($31|0);
}
function _appenddirectors($dlist,$director,$pattern,$tag) {
 $dlist = $dlist|0;
 $director = $director|0;
 $pattern = $pattern|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dlist;
 $1 = $director;
 $2 = $pattern;
 $3 = $tag;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_recappend($4,$5,0,1,$6,$7)|0);
 STACKTOP = sp;return ($8|0);
}
function _replacedirectors($directorlist,$c) {
 $directorlist = $directorlist|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $replacement = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $directorlist;
 $2 = $c;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
 } else {
  $5 = $2;
  $6 = (($5) + 12|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(9);
  do {
   if ($9) {
    $10 = $1;
    $11 = $2;
    $12 = (_finddirector($10,$11)|0);
    $replacement = $12;
    $13 = $replacement;
    $14 = ($13|0)!=(0|0);
    if (!($14)) {
     break;
    }
    $15 = $replacement;
    $16 = (_copy($15)|0);
    $0 = $16;
    $35 = $0;
    STACKTOP = sp;return ($35|0);
   } else {
    $17 = $2;
    $18 = (($17) + 12|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = ($20|0)>(17);
    if ($21) {
     $22 = $1;
     $23 = $2;
     $24 = HEAP32[$23>>2]|0;
     $25 = (_replacedirectors($22,$24)|0);
     $26 = $2;
     HEAP32[$26>>2] = $25;
     $27 = $1;
     $28 = $2;
     $29 = (($28) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (_replacedirectors($27,$30)|0);
     $32 = $2;
     $33 = (($32) + 4|0);
     HEAP32[$33>>2] = $31;
    }
   }
  } while(0);
 }
 $34 = $2;
 $0 = $34;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _initrename($funname) {
 $funname = $funname|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $funname;
 HEAP32[328>>2] = 0;
 $1 = $0;
 HEAP32[336>>2] = $1;
 STACKTOP = sp;return;
}
function _appendrenamelistrec($renamelist,$checkduplicate,$c) {
 $renamelist = $renamelist|0;
 $checkduplicate = $checkduplicate|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $renamelist;
 $1 = $checkduplicate;
 $2 = $c;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $53 = $0;
  STACKTOP = sp;return ($53|0);
 }
 $5 = $2;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(12);
 if ($9) {
  label = 5;
 } else {
  $10 = $2;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)==(14);
  if ($14) {
   label = 5;
  } else {
   $19 = $2;
   $20 = (($19) + 12|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = ($22|0)==(42);
   if ($23) {
    $24 = $0;
    $25 = $1;
    $26 = $2;
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (_appendrenamelistrec($24,$25,$29)|0);
    $0 = $30;
    $31 = $0;
    $32 = $1;
    $33 = $2;
    $34 = (($33) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (_appendrenamelistrec($31,$32,$35)|0);
    $0 = $36;
   } else {
    $37 = $2;
    $38 = (($37) + 12|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = ($40|0)>(17);
    if ($41) {
     $42 = $0;
     $43 = $1;
     $44 = $2;
     $45 = HEAP32[$44>>2]|0;
     $46 = (_appendrenamelistrec($42,$43,$45)|0);
     $0 = $46;
     $47 = $0;
     $48 = $1;
     $49 = $2;
     $50 = (($49) + 4|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = (_appendrenamelistrec($47,$48,$51)|0);
     $0 = $52;
    }
   }
  }
 }
 if ((label|0) == 5) {
  $15 = $0;
  $16 = $1;
  $17 = $2;
  $18 = (_appendrenamelist($15,$16,$17)|0);
  $0 = $18;
 }
 $53 = $0;
 STACKTOP = sp;return ($53|0);
}
function _replacerenamelist($renamelist,$c) {
 $renamelist = $renamelist|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $renamelist;
 $2 = $c;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
 } else {
  $5 = $2;
  $6 = (($5) + 12|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(12);
  if ($9) {
   label = 5;
  } else {
   $10 = $2;
   $11 = (($10) + 12|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = ($13|0)==(14);
   if ($14) {
    label = 5;
   } else {
    $48 = $2;
    $49 = (($48) + 12|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50&255;
    $52 = ($51|0)==(42);
    if ($52) {
     $53 = $1;
     $54 = $2;
     $55 = HEAP32[$54>>2]|0;
     $56 = (($55) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (_replacerenamelist($53,$57)|0);
     $59 = $2;
     $60 = HEAP32[$59>>2]|0;
     $61 = (($60) + 4|0);
     HEAP32[$61>>2] = $58;
     $62 = $1;
     $63 = $2;
     $64 = (($63) + 4|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (_replacerenamelist($62,$65)|0);
     $67 = $2;
     $68 = (($67) + 4|0);
     HEAP32[$68>>2] = $66;
    } else {
     $69 = $2;
     $70 = (($69) + 12|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71&255;
     $73 = ($72|0)>(17);
     if ($73) {
      $74 = $1;
      $75 = $2;
      $76 = HEAP32[$75>>2]|0;
      $77 = (_replacerenamelist($74,$76)|0);
      $78 = $2;
      HEAP32[$78>>2] = $77;
      $79 = $1;
      $80 = $2;
      $81 = (($80) + 4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = (_replacerenamelist($79,$82)|0);
      $84 = $2;
      $85 = (($84) + 4|0);
      HEAP32[$85>>2] = $83;
     }
    }
   }
  }
  do {
   if ((label|0) == 5) {
    while(1) {
     $15 = $1;
     $16 = (($15) + 12|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = ($18|0)==(39);
     if (!($19)) {
      label = 11;
      break;
     }
     $20 = $1;
     $21 = HEAP32[$20>>2]|0;
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $2;
     $26 = (($25) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($24|0)==($27|0);
     if ($28) {
      break;
     }
     $45 = $1;
     $46 = (($45) + 4|0);
     $47 = HEAP32[$46>>2]|0;
     $1 = $47;
    }
    if ((label|0) == 11) {
     break;
    }
    $29 = (_newcell(9)|0);
    $2 = $29;
    $30 = $1;
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $2;
    $37 = (($36) + 8|0);
    HEAP32[$37>>2] = $35;
    $38 = $1;
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP32[$41>>2]|0;
    $43 = $2;
    HEAP32[$43>>2] = $42;
    $44 = $2;
    $0 = $44;
    $87 = $0;
    STACKTOP = sp;return ($87|0);
   }
  } while(0);
 }
 $86 = $2;
 $0 = $86;
 $87 = $0;
 STACKTOP = sp;return ($87|0);
}
function _fastmatchpattern($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, $temp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = (($4) + 12|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   switch ($7|0) {
   case 42: case 41: case 40:  {
    $28 = $1;
    $29 = (($28) + 12|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = (_newcell($30)|0);
    $temp1 = $31;
    $32 = $1;
    $33 = HEAP32[$32>>2]|0;
    $34 = (_matchpattern($33)|0);
    $35 = $temp1;
    HEAP32[$35>>2] = $34;
    $36 = $1;
    $37 = (($36) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (_fastmatchpattern($38)|0);
    $40 = $temp1;
    $41 = (($40) + 4|0);
    HEAP32[$41>>2] = $39;
    $42 = $temp1;
    $43 = HEAP32[$42>>2]|0;
    $44 = HEAP32[2968>>2]|0;
    $45 = ($43|0)==($44|0);
    if ($45) {
     $46 = $temp1;
     $47 = (($46) + 4|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = HEAP32[2968>>2]|0;
     $50 = ($48|0)==($49|0);
     if ($50) {
      $51 = HEAP32[2968>>2]|0;
      $0 = $51;
      $54 = $0;
      STACKTOP = sp;return ($54|0);
     }
    }
    $52 = $temp1;
    $0 = $52;
    $54 = $0;
    STACKTOP = sp;return ($54|0);
    break;
   }
   case 9:  {
    $8 = HEAP32[2968>>2]|0;
    $0 = $8;
    $54 = $0;
    STACKTOP = sp;return ($54|0);
    break;
   }
   case 20:  {
    $9 = $1;
    $10 = (($9) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_matchpattern($11)|0);
    $0 = $12;
    $54 = $0;
    STACKTOP = sp;return ($54|0);
    break;
   }
   case 39:  {
    $13 = $1;
    $14 = (($13) + 12|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = (_newcell($15)|0);
    $temp = $16;
    $17 = $1;
    $18 = HEAP32[$17>>2]|0;
    $19 = (_matchpattern($18)|0);
    $20 = $temp;
    HEAP32[$20>>2] = $19;
    $21 = $1;
    $22 = (($21) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (_matchpattern($23)|0);
    $25 = $temp;
    $26 = (($25) + 4|0);
    HEAP32[$26>>2] = $24;
    $27 = $temp;
    $0 = $27;
    $54 = $0;
    STACKTOP = sp;return ($54|0);
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 $53 = $1;
 $0 = $53;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function _recappend($dlist,$expression,$bitstring,$power,$pattern,$tag) {
 $dlist = $dlist|0;
 $expression = $expression|0;
 $bitstring = $bitstring|0;
 $power = $power|0;
 $pattern = $pattern|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $director = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dlist;
 $1 = $expression;
 $2 = $bitstring;
 $3 = $power;
 $4 = $pattern;
 $5 = $tag;
 $6 = $4;
 $7 = (($6) + 12|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(9);
 if (!($10)) {
  $39 = $4;
  $40 = (($39) + 12|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)==(20);
  if ($43) {
   $44 = $0;
   $45 = $1;
   $46 = $2;
   $47 = $3;
   $48 = $4;
   $49 = HEAP32[$48>>2]|0;
   $50 = $5;
   $51 = (_recappend($44,$45,$46,$47,$49,$50)|0);
   $0 = $51;
   $52 = $0;
   $53 = $1;
   $54 = $2;
   $55 = $3;
   $56 = $4;
   $57 = (($56) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $5;
   $60 = (_recappend($52,$53,$54,$55,$58,$59)|0);
   $0 = $60;
  } else {
   $61 = $4;
   $62 = (($61) + 12|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = ($64|0)>(38);
   if ($65) {
    $66 = $0;
    $67 = $1;
    $68 = $2;
    $69 = $3;
    $70 = $68 | $69;
    $71 = $3;
    $72 = $71<<1;
    $73 = $4;
    $74 = HEAP32[$73>>2]|0;
    $75 = $5;
    $76 = (_recappend($66,$67,$70,$72,$74,$75)|0);
    $0 = $76;
    $77 = $0;
    $78 = $1;
    $79 = $2;
    $80 = $3;
    $81 = $80<<1;
    $82 = $4;
    $83 = (($82) + 4|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = $5;
    $86 = (_recappend($77,$78,$79,$81,$84,$85)|0);
    $0 = $86;
   }
  }
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $11 = $3;
 $12 = ($11|0)==(0);
 if ($12) {
  _systemerror(17);
 } else {
  $13 = $3;
  $14 = ($13|0)==(1);
  if ($14) {
   $15 = $1;
   $director = $15;
  } else {
   $16 = $5;
   $17 = (_newcell($16)|0);
   $director = $17;
   $18 = $2;
   $19 = $3;
   $20 = $18 | $19;
   $21 = $director;
   $22 = (($21) + 8|0);
   HEAP32[$22>>2] = $20;
   $23 = $1;
   $24 = $director;
   HEAP32[$24>>2] = $23;
  }
 }
 $25 = (_newcell(39)|0);
 $temp = $25;
 $26 = $0;
 $27 = $temp;
 $28 = (($27) + 4|0);
 HEAP32[$28>>2] = $26;
 $29 = (_newcell(39)|0);
 $30 = $temp;
 HEAP32[$30>>2] = $29;
 $31 = $4;
 $32 = $temp;
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$33>>2] = $31;
 $34 = $director;
 $35 = $temp;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = $34;
 $38 = $temp;
 $0 = $38;
 $87 = $0;
 STACKTOP = sp;return ($87|0);
}
function _copy($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $temp = 0, $temp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)==(16);
 if ($8) {
  $9 = (_newcell(16)|0);
  $temp = $9;
  $10 = $1;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $temp;
  $14 = (($13) + 8|0);
  HEAP32[$14>>2] = $12;
  $15 = $temp;
  $0 = $15;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $16 = $1;
 $17 = (($16) + 12|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ($19|0)>(17);
 if ($20) {
  $21 = $1;
  $22 = (($21) + 12|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = (_newcell($23)|0);
  $temp1 = $24;
  $25 = $1;
  $26 = (($25) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $temp1;
  $29 = (($28) + 8|0);
  HEAP32[$29>>2] = $27;
  $30 = $1;
  $31 = HEAP32[$30>>2]|0;
  $32 = (_copy($31)|0);
  $33 = $temp1;
  HEAP32[$33>>2] = $32;
  $34 = $1;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_copy($36)|0);
  $38 = $temp1;
  $39 = (($38) + 4|0);
  HEAP32[$39>>2] = $37;
  $40 = $temp1;
  $0 = $40;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 } else {
  $41 = $1;
  $0 = $41;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _appendrenamelist($renamelist,$checkduplicate,$c) {
 $renamelist = $renamelist|0;
 $checkduplicate = $checkduplicate|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $temp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $renamelist;
 $2 = $checkduplicate;
 $3 = $c;
 $4 = $1;
 $temp = $4;
 while(1) {
  $5 = $temp;
  $6 = (($5) + 12|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(39);
  if (!($9)) {
   label = 11;
   break;
  }
  $10 = $temp;
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $3;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)!=($17|0);
  if ($18) {
  } else {
   $19 = $2;
   $20 = ($19|0)!=(0);
   if (!($20)) {
    label = 7;
    break;
   }
   $21 = HEAP32[2568>>2]|0;
   $22 = $3;
   $23 = (($22) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($21) + (($24*52)|0)|0);
   $26 = (($25) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$vararg_buffer>>2] = $27;
   _Write(5568,$vararg_buffer);
   $28 = HEAP32[336>>2]|0;
   _modifyerror(3,$28);
  }
  $30 = $temp;
  $31 = (($30) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $temp = $32;
 }
 if ((label|0) == 7) {
  $29 = $1;
  $0 = $29;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 else if ((label|0) == 11) {
  $33 = (_newcell(39)|0);
  $temp = $33;
  $34 = (_newcell(39)|0);
  $35 = $temp;
  HEAP32[$35>>2] = $34;
  $36 = $3;
  $37 = $temp;
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$38>>2] = $36;
  $39 = (_newcell(9)|0);
  $40 = $temp;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 4|0);
  HEAP32[$42>>2] = $39;
  $43 = HEAP32[328>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[328>>2] = $44;
  $45 = $temp;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 8|0);
  HEAP32[$49>>2] = $44;
  $50 = $3;
  $51 = $temp;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  HEAP32[$54>>2] = $50;
  $55 = $1;
  $56 = $temp;
  $57 = (($56) + 4|0);
  HEAP32[$57>>2] = $55;
  $58 = $temp;
  $0 = $58;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function _checkinterrupt() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _CheckIO();
 HEAP32[352>>2] = 500;
 $0 = HEAP32[344>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  return;
 }
 _systemerror(1);
 return;
}
function _systemerror($messagenr) {
 $messagenr = $messagenr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $messagenr;
 $1 = $0;
 $2 = ($1|0)<(1);
 if ($2) {
  label = 3;
 } else {
  $3 = $0;
  $4 = ($3|0)>(19);
  if ($4) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $0 = 0;
 }
 $5 = $0;
 $6 = (576 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 _error($7);
 STACKTOP = sp;return;
}
function _parseerror($messagenr) {
 $messagenr = $messagenr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $messagenr;
 _lexerror();
 $1 = $0;
 $2 = ($1|0)<(1);
 if ($2) {
  label = 3;
 } else {
  $3 = $0;
  $4 = ($3|0)>(34);
  if ($4) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $0 = 0;
 }
 $5 = $0;
 $6 = (360 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 _error($7);
 STACKTOP = sp;return;
}
function _runtimeerror($tag,$hashtablenr) {
 $tag = $tag|0;
 $hashtablenr = $hashtablenr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $string = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $string = sp + 16|0;
 $0 = $tag;
 $1 = $hashtablenr;
 $2 = $1;
 $3 = ($2|0)>=(0);
 if ($3) {
  $4 = $0;
  $5 = (_runtimeerrormessage($4)|0);
  $6 = HEAP32[2568>>2]|0;
  $7 = $1;
  $8 = (($6) + (($7*52)|0)|0);
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $10;
  (_sprintf($string,504,$vararg_buffer)|0);
  _error($string);
  STACKTOP = sp;return;
 } else {
  $11 = $0;
  $12 = (_runtimeerrormessage($11)|0);
  HEAP32[$vararg_buffer2>>2] = $12;
  (_sprintf($string,5608,$vararg_buffer2)|0);
  _error($string);
  STACKTOP = sp;return;
 }
}
function _modifyerror($messagenr,$functionname) {
 $messagenr = $messagenr|0;
 $functionname = $functionname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $string = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $string = sp + 16|0;
 $0 = $messagenr;
 $1 = $functionname;
 $2 = $0;
 $3 = ($2|0)<(1);
 if ($3) {
  label = 3;
 } else {
  $4 = $0;
  $5 = ($4|0)>(5);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $0 = 0;
 }
 $6 = $1;
 $7 = (_strlen(($6|0))|0);
 $8 = ($7>>>0)>(0);
 if ($8) {
  $9 = $0;
  $10 = (552 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  HEAP32[$vararg_buffer>>2] = $11;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $12;
  (_sprintf($string,528,$vararg_buffer)|0);
  _error($string);
  STACKTOP = sp;return;
 } else {
  $13 = $0;
  $14 = (552 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  (_strcpy(($string|0),($15|0))|0);
  _error($string);
  STACKTOP = sp;return;
 }
}
function _starttiming() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_clock()|0);
 HEAP32[664>>2] = $0;
 return;
}
function _stoptiming() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[656>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  $2 = (_clock()|0);
  HEAP32[672>>2] = $2;
  $3 = HEAP32[672>>2]|0;
  $4 = HEAP32[664>>2]|0;
  $5 = (($3) - ($4))|0;
  $6 = (+($5|0));
  $7 = $6 / 1.0E+6;
  $8 = $7;
  HEAPF64[tempDoublePtr>>3]=$8;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
  _Write(680,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _error($message) {
 $message = $message|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $message;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 _Write(2536,$vararg_buffer);
 HEAP32[344>>2] = 0;
 _longjmp((712|0),1);
 // unreachable;
}
function _runtimeerrormessage($tag) {
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $tag;
 $2 = $1;
 $3 = $2&255;
 if ((($3|0) == 3)) {
  $0 = 1608;
 } else if ((($3|0) == 39)) {
  $0 = 1592;
 } else if ((($3|0) == 12)) {
  $0 = 1640;
 } else if ((($3|0) == 4)) {
  $0 = 1624;
 } else {
  $0 = 1704;
 }
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _parsefile($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $filename;
 _setchecktypevariables(0);
 $1 = $0;
 _openfileinput($1);
 HEAP32[9384>>2] = 0;
 _gettoken();
 while(1) {
  $2 = HEAP32[9112>>2]|0;
  $3 = ($2|0)!=(28);
  if (!($3)) {
   break;
  }
  _checkmemlarge();
  _parsedefinition(1);
  HEAP32[9384>>2] = 0;
  $4 = HEAP32[9112>>2]|0;
  $5 = ($4|0)==(27);
  if ($5) {
   _gettoken();
  }
 }
 _closeinput();
 STACKTOP = sp;return;
}
function _parseinput($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $result = 0;
 _setchecktypevariables(0);
 $2 = $1;
 _openinput($2);
 _checkmemlarge();
 _storefunctionname(8984);
 HEAP32[9384>>2] = 0;
 _gettoken();
 $3 = HEAP32[9112>>2]|0;
 $4 = ($3|0)==(28);
 if ($4) {
  $5 = HEAP32[2576>>2]|0;
  $6 = HEAP32[3152>>2]|0;
  $7 = HEAP32[3144>>2]|0;
  $8 = (($7) + ($6<<2)|0);
  HEAP32[$8>>2] = $5;
  $9 = HEAP32[3152>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[3152>>2] = $10;
  $11 = $result;
  $0 = $11;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 _parseexpression(7);
 $12 = HEAP32[9112>>2]|0;
 $13 = ($12|0)==(15);
 if ($13) {
  _gettoken();
  _parsewhereclause();
 }
 $14 = HEAP32[9112>>2]|0;
 $15 = ($14|0)==(20);
 if ($15) {
  $result = 1;
 } else {
  $16 = HEAP32[9112>>2]|0;
  $17 = ($16|0)!=(28);
  if ($17) {
   _parseerror(19);
  }
 }
 _closeinput();
 _initrename(8984);
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) - 1)|0;
 $20 = HEAP32[3144>>2]|0;
 $21 = (($20) + ($19<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_renamerec(1,$22)|0);
 $24 = HEAP32[3152>>2]|0;
 $25 = (($24) - 1)|0;
 $26 = HEAP32[3144>>2]|0;
 $27 = (($26) + ($25<<2)|0);
 HEAP32[$27>>2] = $23;
 $28 = $result;
 $0 = $28;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _parsetypeexpr($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 _setchecktypevariables(0);
 $1 = $0;
 _openinput($1);
 _checkmemlarge();
 HEAP32[9384>>2] = 0;
 _gettoken();
 _parsetype(0);
 _closeinput();
 STACKTOP = sp;return;
}
function _setchecktypevariables($check) {
 $check = $check|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $check;
 $1 = $0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = HEAP32[2576>>2]|0;
  HEAP32[2560>>2] = $3;
 }
 $4 = $0;
 HEAP32[2552>>2] = $4;
 STACKTOP = sp;return;
}
function _parsedefinition($globallevel) {
 $globallevel = $globallevel|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $argcount = 0, $def = 0, $funname = 0, $generic = 0, $globaltokenoffside = 0, $head = 0, $posCode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $globallevel;
 $1 = HEAP32[9376>>2]|0;
 $globaltokenoffside = $1;
 $generic = 0;
 $2 = HEAP32[9112>>2]|0;
 $3 = ($2|0)==(24);
 if ($3) {
  $4 = $0;
  $5 = ($4|0)!=(0);
  if ($5) {
   _parseabstype();
   while(1) {
    $6 = HEAP32[9112>>2]|0;
    $7 = ($6|0)==(8);
    if (!($7)) {
     break;
    }
    _gettoken();
   }
   STACKTOP = sp;return;
  }
 }
 $8 = HEAP32[9112>>2]|0;
 $9 = ($8|0)==(26);
 if ($9) {
  $10 = $0;
  $11 = ($10|0)!=(0);
  if ($11) {
   $generic = 1;
   _gettoken();
  }
 }
 _parselefthandside();
 $12 = (_getPositionCode()|0);
 $posCode = $12;
 $13 = HEAP32[9376>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[9384>>2] = $14;
 $15 = HEAP32[9112>>2]|0;
 $16 = ($15|0)==(20);
 if ($16) {
  $17 = $0;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + -1)|0;
   HEAP32[3152>>2] = $20;
   $21 = HEAP32[3144>>2]|0;
   $22 = (($21) + ($20<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $head = $23;
   $24 = $head;
   $25 = (($24) + 12|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = ($27|0)!=(12);
   if ($28) {
    $29 = $head;
    $30 = (($29) + 12|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = ($32|0)!=(14);
    if ($33) {
     _parseerror(13);
    }
   }
   _gettoken();
   _parsetype(0);
   $34 = HEAP32[2568>>2]|0;
   $35 = $head;
   $36 = (($35) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($34) + (($37*52)|0)|0);
   $39 = (($38) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = HEAP32[3152>>2]|0;
   $42 = (($41) + -1)|0;
   HEAP32[3152>>2] = $42;
   $43 = HEAP32[3144>>2]|0;
   $44 = (($43) + ($42<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (_inserttypeexpr($40,$45)|0);
   $47 = ($46|0)!=(0);
   if (!($47)) {
    _parseerror(12);
   }
   $48 = $generic;
   $49 = HEAP32[2568>>2]|0;
   $50 = $head;
   $51 = (($50) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($49) + (($52*52)|0)|0);
   $54 = (($53) + 24|0);
   HEAP32[$54>>2] = $48;
   while(1) {
    $55 = HEAP32[9112>>2]|0;
    $56 = ($55|0)==(8);
    if (!($56)) {
     break;
    }
    _gettoken();
   }
   STACKTOP = sp;return;
  }
 }
 $57 = HEAP32[9112>>2]|0;
 $58 = ($57|0)==(21);
 if ($58) {
  $59 = $0;
  $60 = ($59|0)!=(0);
  if ($60) {
   _parsestructdef();
   while(1) {
    $61 = HEAP32[9112>>2]|0;
    $62 = ($61|0)==(8);
    if (!($62)) {
     break;
    }
    _gettoken();
   }
  } else {
   label = 28;
  }
 } else {
  label = 28;
 }
 if ((label|0) == 28) {
  $63 = HEAP32[9112>>2]|0;
  $64 = ($63|0)==(22);
  if ($64) {
   $65 = $0;
   $66 = ($65|0)!=(0);
   if ($66) {
    _parsetypesynonym();
    while(1) {
     $67 = HEAP32[9112>>2]|0;
     $68 = ($67|0)==(8);
     if (!($68)) {
      break;
     }
     _gettoken();
    }
   } else {
    label = 34;
   }
  } else {
   label = 34;
  }
  if ((label|0) == 34) {
   $69 = HEAP32[3152>>2]|0;
   $70 = (($69) - 1)|0;
   $71 = HEAP32[3144>>2]|0;
   $72 = (($71) + ($70<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $head = $73;
   $74 = $head;
   $75 = (($74) + 12|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = ($77|0)==(22);
   if ($78) {
    label = 36;
   } else {
    $79 = $0;
    $80 = ($79|0)!=(0);
    if ($80) {
     label = 36;
    } else {
     $110 = $head;
     _checkpattern($110);
    }
   }
   if ((label|0) == 36) {
    while(1) {
     $81 = $head;
     $82 = (($81) + 12|0);
     $83 = HEAP8[$82>>0]|0;
     $84 = $83&255;
     $85 = ($84|0)==(22);
     if (!($85)) {
      break;
     }
     $86 = $head;
     $87 = (($86) + 4|0);
     $88 = HEAP32[$87>>2]|0;
     _checkpattern($88);
     $89 = $head;
     $90 = HEAP32[$89>>2]|0;
     $head = $90;
    }
    $91 = $head;
    $92 = (($91) + 12|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = ($94|0)!=(12);
    if ($95) {
     $96 = $head;
     $97 = (($96) + 12|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = $98&255;
     $100 = ($99|0)!=(14);
     if ($100) {
      _parseerror(17);
     }
    }
    $101 = $0;
    $102 = ($101|0)!=(0);
    if ($102) {
     $103 = HEAP32[2568>>2]|0;
     $104 = $head;
     $105 = (($104) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = (($103) + (($106*52)|0)|0);
     $108 = (($107) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     _storefunctionname($109);
    }
   }
   _parseexpressionclause();
   $111 = HEAP32[9112>>2]|0;
   $112 = ($111|0)==(15);
   if ($112) {
    _gettoken();
    _parsewhereclause();
   } else {
    $113 = HEAP32[9112>>2]|0;
    $114 = ($113|0)==(27);
    if ($114) {
     $115 = $globaltokenoffside;
     HEAP32[9384>>2] = $115;
     _gettoken();
     $116 = HEAP32[9112>>2]|0;
     $117 = ($116|0)==(15);
     if ($117) {
      $118 = HEAP32[9376>>2]|0;
      $119 = (($118) + 1)|0;
      HEAP32[9384>>2] = $119;
      _gettoken();
      _parsewhereclause();
     }
    }
   }
   _makeinverse(39);
   $120 = $posCode;
   $121 = HEAP32[3152>>2]|0;
   $122 = (($121) - 1)|0;
   $123 = HEAP32[3144>>2]|0;
   $124 = (($123) + ($122<<2)|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($125) + 8|0);
   HEAP32[$126>>2] = $120;
   $127 = $0;
   $128 = ($127|0)!=(0);
   if ($128) {
    $129 = HEAP32[3152>>2]|0;
    $130 = (($129) + -1)|0;
    HEAP32[3152>>2] = $130;
    $131 = HEAP32[3144>>2]|0;
    $132 = (($131) + ($130<<2)|0);
    $133 = HEAP32[$132>>2]|0;
    $def = $133;
    $argcount = 0;
    $134 = $def;
    $head = $134;
    $135 = $head;
    $136 = HEAP32[$135>>2]|0;
    $head = $136;
    while(1) {
     $137 = $head;
     $138 = (($137) + 12|0);
     $139 = HEAP8[$138>>0]|0;
     $140 = $139&255;
     $141 = ($140|0)==(22);
     if (!($141)) {
      break;
     }
     $142 = $argcount;
     $143 = (($142) + 1)|0;
     $argcount = $143;
     $144 = $head;
     $145 = HEAP32[$144>>2]|0;
     $head = $145;
    }
    $146 = HEAP32[2568>>2]|0;
    $147 = $head;
    $148 = (($147) + 8|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = (($146) + (($149*52)|0)|0);
    $151 = (($150) + 8|0);
    $152 = HEAP32[$151>>2]|0;
    $funname = $152;
    $153 = $funname;
    _initrename($153);
    $154 = $def;
    $155 = (_renamerec(0,$154)|0);
    $def = $155;
    $156 = $funname;
    $157 = $argcount;
    $158 = $def;
    $159 = (_insert($156,$157,14,$158,0)|0);
    $160 = ($159|0)!=(0);
    if (!($160)) {
     _parseerror(18);
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _parseexpression($prio) {
 $prio = $prio|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $lambdacount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $prio;
 _parseapplication();
 $1 = HEAP32[9112>>2]|0;
 $2 = ($1|0)!=(23);
 if (!($2)) {
  $3 = $0;
  $4 = ($3|0)<(7);
  if (!($4)) {
   $lambdacount = 1;
   while(1) {
    $count = 0;
    while(1) {
     $6 = HEAP32[9112>>2]|0;
     $7 = ($6|0)==(23);
     if (!($7)) {
      break;
     }
     $8 = HEAP32[3152>>2]|0;
     $9 = (($8) - 1)|0;
     $10 = HEAP32[3144>>2]|0;
     $11 = (($10) + ($9<<2)|0);
     $12 = HEAP32[$11>>2]|0;
     _checkpattern($12);
     $13 = $count;
     $14 = (($13) + 1)|0;
     $count = $14;
     _gettoken();
     _parseapplication();
    }
    _parsesection(7);
    while(1) {
     $15 = $count;
     $16 = (($15) + -1)|0;
     $count = $16;
     $17 = ($15|0)>(0);
     if (!($17)) {
      break;
     }
     _makeinverse(36);
    }
    $18 = HEAP32[9112>>2]|0;
    $19 = ($18|0)!=(14);
    if ($19) {
     break;
    }
    $20 = $lambdacount;
    $21 = (($20) + 1)|0;
    $lambdacount = $21;
    _gettoken();
    _parseapplication();
   }
   $22 = HEAP32[2968>>2]|0;
   $23 = HEAP32[3152>>2]|0;
   $24 = HEAP32[3144>>2]|0;
   $25 = (($24) + ($23<<2)|0);
   HEAP32[$25>>2] = $22;
   $26 = HEAP32[3152>>2]|0;
   $27 = (($26) + 1)|0;
   HEAP32[3152>>2] = $27;
   while(1) {
    $28 = $lambdacount;
    $29 = (($28) + -1)|0;
    $lambdacount = $29;
    $30 = ($28|0)>(0);
    if (!($30)) {
     break;
    }
    _makeinverse(37);
   }
   STACKTOP = sp;return;
  }
 }
 $5 = $0;
 _parsesection($5);
 STACKTOP = sp;return;
}
function _parsewhereclause() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $globaltokenoffside = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[9384>>2]|0;
 $globaltokenoffside = $0;
 $count = 0;
 while(1) {
  $1 = HEAP32[9112>>2]|0;
  $2 = ($1|0)==(1);
  if ($2) {
   $35 = 1;
  } else {
   $3 = HEAP32[9112>>2]|0;
   $4 = ($3|0)==(3);
   if ($4) {
    $35 = 1;
   } else {
    $5 = HEAP32[9112>>2]|0;
    $6 = ($5|0)==(2);
    if ($6) {
     $35 = 1;
    } else {
     $7 = HEAP32[9112>>2]|0;
     $8 = ($7|0)==(0);
     if ($8) {
      $35 = 1;
     } else {
      $9 = HEAP32[9112>>2]|0;
      $10 = ($9|0)==(4);
      if ($10) {
       $35 = 1;
      } else {
       $11 = HEAP32[9112>>2]|0;
       $12 = ($11|0)==(5);
       if ($12) {
        $35 = 1;
       } else {
        $13 = HEAP32[9112>>2]|0;
        $14 = ($13|0)==(10);
        if ($14) {
         $35 = 1;
        } else {
         $15 = HEAP32[9112>>2]|0;
         $16 = ($15|0)==(12);
         if ($16) {
          $35 = 1;
         } else {
          $17 = HEAP32[9112>>2]|0;
          $18 = ($17|0)==(6);
          $35 = $18;
         }
        }
       }
      }
     }
    }
   }
  }
  if (!($35)) {
   break;
  }
  _parsedefinition(0);
  $19 = $count;
  $20 = (($19) + 1)|0;
  $count = $20;
  $21 = $globaltokenoffside;
  HEAP32[9384>>2] = $21;
  $22 = HEAP32[9112>>2]|0;
  $23 = ($22|0)==(27);
  if ($23) {
   _gettoken();
  }
 }
 $24 = $count;
 $25 = ($24|0)>(0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = HEAP32[2576>>2]|0;
 $27 = HEAP32[3152>>2]|0;
 $28 = HEAP32[3144>>2]|0;
 $29 = (($28) + ($27<<2)|0);
 HEAP32[$29>>2] = $26;
 $30 = HEAP32[3152>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[3152>>2] = $31;
 while(1) {
  $32 = $count;
  $33 = (($32) + -1)|0;
  $count = $33;
  $34 = ($32|0)>(0);
  if (!($34)) {
   break;
  }
  _makeinverse(39);
 }
 _make(32);
 STACKTOP = sp;return;
}
function _renamerec($exprtype,$c) {
 $exprtype = $exprtype|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $before = 0, $directors = 0, $head = 0, $last = 0, $renamelist = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $exprtype;
 $2 = $c;
 $3 = HEAP32[2576>>2]|0;
 $renamelist = $3;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $300 = $0;
  STACKTOP = sp;return ($300|0);
 }
 $6 = $1;
 if ((($6|0) == 2)) {
 } else if ((($6|0) == 1)) {
  $30 = $2;
  $31 = (($30) + 12|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($33|0)==(35);
  if ($34) {
   $35 = $2;
   $36 = (($35) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $head = $37;
   while(1) {
    $38 = $head;
    $39 = (($38) + 12|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = ($41|0)==(35);
    if ($42) {
     $43 = $head;
     $44 = HEAP32[$43>>2]|0;
     $45 = (($44) + 4|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46|0)==(0|0);
     $301 = $47;
    } else {
     $301 = 0;
    }
    if (!($301)) {
     break;
    }
    $48 = $head;
    $49 = HEAP32[$48>>2]|0;
    $50 = HEAP32[$49>>2]|0;
    $51 = (_renamerec(1,$50)|0);
    $52 = $head;
    $53 = HEAP32[$52>>2]|0;
    HEAP32[$53>>2] = $51;
    $54 = $head;
    $55 = (($54) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $head = $56;
   }
   $57 = $head;
   $58 = (($57) + 12|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = ($60|0)==(35);
   if ($61) {
    $62 = $2;
    $63 = (($62) + 4|0);
    $64 = HEAP32[$63>>2]|0;
    $temp = $64;
    $65 = $head;
    $66 = (($65) + 4|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = $2;
    $69 = (($68) + 4|0);
    HEAP32[$69>>2] = $67;
    $70 = $2;
    $71 = (_renamerec(1,$70)|0);
    $2 = $71;
    $72 = $temp;
    $73 = $2;
    $74 = (($73) + 4|0);
    HEAP32[$74>>2] = $72;
    $75 = $head;
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) + 4|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (_renamerec(1,$78)|0);
    $80 = $head;
    $81 = HEAP32[$80>>2]|0;
    $82 = (($81) + 4|0);
    HEAP32[$82>>2] = $79;
    $83 = $renamelist;
    $84 = $head;
    $85 = HEAP32[$84>>2]|0;
    $86 = HEAP32[$85>>2]|0;
    $87 = (_appendrenamelistrec($83,1,$86)|0);
    $renamelist = $87;
    $88 = $renamelist;
    $89 = $2;
    $90 = HEAP32[$89>>2]|0;
    $91 = (_replacerenamelist($88,$90)|0);
    $92 = $2;
    HEAP32[$92>>2] = $91;
    $93 = $renamelist;
    $94 = $head;
    $95 = (($94) + 4|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (_replacerenamelist($93,$96)|0);
    $98 = $head;
    $99 = (($98) + 4|0);
    HEAP32[$99>>2] = $97;
    $100 = $renamelist;
    $101 = $head;
    $102 = HEAP32[$101>>2]|0;
    $103 = HEAP32[$102>>2]|0;
    $104 = (_replacerenamelist($100,$103)|0);
    $105 = $head;
    $106 = HEAP32[$105>>2]|0;
    HEAP32[$106>>2] = $104;
   } else {
    $107 = $2;
    $108 = HEAP32[$107>>2]|0;
    $109 = (_renamerec(1,$108)|0);
    $110 = $2;
    HEAP32[$110>>2] = $109;
   }
  } else {
   $111 = $2;
   $112 = (($111) + 12|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = $113&255;
   $115 = ($114|0)==(32);
   if ($115) {
    $116 = $2;
    $117 = (($116) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (_renamerec(1,$118)|0);
    $120 = $2;
    $121 = (($120) + 4|0);
    HEAP32[$121>>2] = $119;
    $122 = $2;
    $123 = HEAP32[$122>>2]|0;
    $temp = $123;
    while(1) {
     $124 = $temp;
     $125 = (($124) + 12|0);
     $126 = HEAP8[$125>>0]|0;
     $127 = $126&255;
     $128 = ($127|0)==(39);
     if (!($128)) {
      break;
     }
     $129 = $temp;
     $130 = HEAP32[$129>>2]|0;
     $131 = (_renamerec(0,$130)|0);
     $132 = $temp;
     HEAP32[$132>>2] = $131;
     $head = $131;
     $133 = $head;
     $134 = HEAP32[$133>>2]|0;
     $135 = (($134) + 12|0);
     $136 = HEAP8[$135>>0]|0;
     $137 = $136&255;
     $138 = ($137|0)==(22);
     if ($138) {
      while(1) {
       $139 = $head;
       $140 = HEAP32[$139>>2]|0;
       $141 = (($140) + 12|0);
       $142 = HEAP8[$141>>0]|0;
       $143 = $142&255;
       $144 = ($143|0)==(22);
       if (!($144)) {
        break;
       }
       $145 = $head;
       $146 = HEAP32[$145>>2]|0;
       $head = $146;
      }
      $147 = $renamelist;
      $148 = $head;
      $149 = HEAP32[$148>>2]|0;
      $150 = (_appendrenamelistrec($147,0,$149)|0);
      $renamelist = $150;
     } else {
      $151 = $renamelist;
      $152 = $head;
      $153 = HEAP32[$152>>2]|0;
      $154 = (_appendrenamelistrec($151,1,$153)|0);
      $renamelist = $154;
     }
     $155 = $temp;
     $156 = (($155) + 4|0);
     $157 = HEAP32[$156>>2]|0;
     $temp = $157;
    }
    $158 = $renamelist;
    $159 = $2;
    $160 = (_replacerenamelist($158,$159)|0);
    $2 = $160;
    $161 = $2;
    $162 = HEAP32[$161>>2]|0;
    $temp = $162;
    while(1) {
     $163 = $temp;
     $164 = (($163) + 12|0);
     $165 = HEAP8[$164>>0]|0;
     $166 = $165&255;
     $167 = ($166|0)==(39);
     if (!($167)) {
      break;
     }
     $168 = $temp;
     $169 = HEAP32[$168>>2]|0;
     $head = $169;
     $170 = $head;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($171) + 12|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = ($174|0)!=(22);
     if ($175) {
      $176 = $head;
      $177 = (($176) + 4|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = (($178) + 12|0);
      $180 = HEAP8[$179>>0]|0;
      $181 = $180&255;
      $182 = ($181|0)==(32);
      if ($182) {
       $183 = $temp;
       $last = $183;
       while(1) {
        $184 = $last;
        $185 = (($184) + 4|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = (($186) + 12|0);
        $188 = HEAP8[$187>>0]|0;
        $189 = $188&255;
        $190 = ($189|0)==(39);
        if (!($190)) {
         break;
        }
        $191 = $last;
        $192 = (($191) + 4|0);
        $193 = HEAP32[$192>>2]|0;
        $last = $193;
       }
       $194 = $head;
       $195 = (($194) + 4|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = HEAP32[$196>>2]|0;
       $198 = $last;
       $199 = (($198) + 4|0);
       HEAP32[$199>>2] = $197;
       $200 = $head;
       $201 = (($200) + 4|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = (($202) + 4|0);
       $204 = HEAP32[$203>>2]|0;
       $205 = $head;
       $206 = (($205) + 4|0);
       HEAP32[$206>>2] = $204;
      }
     }
     $207 = $head;
     $208 = HEAP32[$207>>2]|0;
     $209 = (($208) + 12|0);
     $210 = HEAP8[$209>>0]|0;
     $211 = $210&255;
     $212 = ($211|0)==(9);
     if ($212) {
      $213 = $head;
      $214 = (($213) + 4|0);
      $215 = HEAP32[$214>>2]|0;
      $216 = (($215) + 12|0);
      $217 = HEAP8[$216>>0]|0;
      $218 = $217&255;
      $219 = ($218|0)==(9);
      if ($219) {
       $220 = HEAP32[2576>>2]|0;
       $221 = $head;
       $222 = (($221) + 4|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = $head;
       $225 = HEAP32[$224>>2]|0;
       $226 = (_appenddirectors($220,$223,$225,28)|0);
       $directors = $226;
       $227 = $head;
       $228 = HEAP32[$227>>2]|0;
       $229 = (($228) + 8|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = $head;
       $232 = (($231) + 4|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = (($233) + 8|0);
       $235 = HEAP32[$234>>2]|0;
       $236 = ($230|0)==($235|0);
       if ($236) {
        _parseerror(16);
       }
       $237 = $temp;
       $238 = $2;
       $239 = HEAP32[$238>>2]|0;
       $240 = ($237|0)==($239|0);
       if ($240) {
        $241 = $temp;
        $242 = (($241) + 4|0);
        $243 = HEAP32[$242>>2]|0;
        $244 = $2;
        HEAP32[$244>>2] = $243;
       } else {
        $245 = $2;
        $246 = HEAP32[$245>>2]|0;
        $before = $246;
        while(1) {
         $247 = $before;
         $248 = (($247) + 4|0);
         $249 = HEAP32[$248>>2]|0;
         $250 = $temp;
         $251 = ($249|0)!=($250|0);
         if (!($251)) {
          break;
         }
         $252 = $before;
         $253 = (($252) + 4|0);
         $254 = HEAP32[$253>>2]|0;
         $before = $254;
        }
        $255 = $temp;
        $256 = (($255) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $before;
        $259 = (($258) + 4|0);
        HEAP32[$259>>2] = $257;
       }
       $260 = $directors;
       $261 = $2;
       $262 = (_replacedirectors($260,$261)|0);
       $2 = $262;
      }
     }
     $263 = $temp;
     $264 = (($263) + 4|0);
     $265 = HEAP32[$264>>2]|0;
     $temp = $265;
    }
   } else {
    $266 = $2;
    $267 = (($266) + 12|0);
    $268 = HEAP8[$267>>0]|0;
    $269 = $268&255;
    $270 = ($269|0)==(36);
    if ($270) {
     $271 = $2;
     $272 = (($271) + 4|0);
     $273 = HEAP32[$272>>2]|0;
     $274 = (_renamerec(1,$273)|0);
     $275 = $2;
     $276 = (($275) + 4|0);
     HEAP32[$276>>2] = $274;
     $277 = $renamelist;
     $278 = $2;
     $279 = HEAP32[$278>>2]|0;
     $280 = (_appendrenamelistrec($277,1,$279)|0);
     $renamelist = $280;
     $281 = $renamelist;
     $282 = $2;
     $283 = (_replacerenamelist($281,$282)|0);
     $2 = $283;
    } else {
     $284 = $2;
     $285 = (($284) + 12|0);
     $286 = HEAP8[$285>>0]|0;
     $287 = $286&255;
     $288 = ($287|0)>(17);
     if ($288) {
      $289 = $2;
      $290 = HEAP32[$289>>2]|0;
      $291 = (_renamerec(1,$290)|0);
      $292 = $2;
      HEAP32[$292>>2] = $291;
      $293 = $2;
      $294 = (($293) + 4|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = (_renamerec(1,$295)|0);
      $297 = $2;
      $298 = (($297) + 4|0);
      HEAP32[$298>>2] = $296;
     }
    }
   }
  }
 } else if ((($6|0) == 0)) {
  $7 = $2;
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_renamerec(1,$9)|0);
  $11 = $2;
  $12 = (($11) + 4|0);
  HEAP32[$12>>2] = $10;
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  $head = $14;
  while(1) {
   $15 = $head;
   $16 = (($15) + 12|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = ($18|0)==(22);
   if (!($19)) {
    break;
   }
   $20 = $renamelist;
   $21 = $head;
   $22 = (($21) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_appendrenamelistrec($20,1,$23)|0);
   $renamelist = $24;
   $25 = $head;
   $26 = HEAP32[$25>>2]|0;
   $head = $26;
  }
  $27 = $renamelist;
  $28 = $2;
  $29 = (_replacerenamelist($27,$28)|0);
  $2 = $29;
 }
 $299 = $2;
 $0 = $299;
 $300 = $0;
 STACKTOP = sp;return ($300|0);
}
function _parsetype($typetype) {
 $typetype = $typetype|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $count = 0, $count1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $typetype;
 $1 = HEAP32[9112>>2]|0;
 if ((($1|0) == 1)) {
  $2 = (_strcmp(9120,4696)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $4 = (_newcell(3)|0);
   $5 = HEAP32[3152>>2]|0;
   $6 = HEAP32[3144>>2]|0;
   $7 = (($6) + ($5<<2)|0);
   HEAP32[$7>>2] = $4;
   $8 = HEAP32[3152>>2]|0;
   $9 = (($8) + 1)|0;
   HEAP32[3152>>2] = $9;
   _gettoken();
  } else {
   $10 = (_strcmp(9120,4704)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = (_newcell(5)|0);
    $13 = HEAP32[3152>>2]|0;
    $14 = HEAP32[3144>>2]|0;
    $15 = (($14) + ($13<<2)|0);
    HEAP32[$15>>2] = $12;
    $16 = HEAP32[3152>>2]|0;
    $17 = (($16) + 1)|0;
    HEAP32[3152>>2] = $17;
    _gettoken();
   } else {
    $18 = (_strcmp(9120,4712)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = (_newcell(2)|0);
     $21 = HEAP32[3152>>2]|0;
     $22 = HEAP32[3144>>2]|0;
     $23 = (($22) + ($21<<2)|0);
     HEAP32[$23>>2] = $20;
     $24 = HEAP32[3152>>2]|0;
     $25 = (($24) + 1)|0;
     HEAP32[3152>>2] = $25;
     _gettoken();
    } else {
     $count = 1;
     $26 = (_gettemplate(9120)|0);
     $27 = HEAP32[3152>>2]|0;
     $28 = HEAP32[3144>>2]|0;
     $29 = (($28) + ($27<<2)|0);
     HEAP32[$29>>2] = $26;
     $30 = HEAP32[3152>>2]|0;
     $31 = (($30) + 1)|0;
     HEAP32[3152>>2] = $31;
     _gettoken();
     $32 = $0;
     $33 = ($32|0)==(0);
     if ($33) {
      while(1) {
       $34 = HEAP32[9112>>2]|0;
       $35 = ($34|0)==(1);
       if ($35) {
        $80 = 1;
       } else {
        $36 = HEAP32[9112>>2]|0;
        $37 = ($36|0)==(3);
        if ($37) {
         $80 = 1;
        } else {
         $38 = HEAP32[9112>>2]|0;
         $39 = ($38|0)==(10);
         if ($39) {
          $80 = 1;
         } else {
          $40 = HEAP32[9112>>2]|0;
          $41 = ($40|0)==(6);
          $80 = $41;
         }
        }
       }
       if (!($80)) {
        break;
       }
       _parsetype(1);
       $42 = $count;
       $43 = (($42) + 1)|0;
       $count = $43;
      }
     }
     $44 = $count;
     _makecompound(40,$44);
    }
   }
  }
 } else if ((($1|0) == 6)) {
  _gettoken();
  $51 = HEAP32[9112>>2]|0;
  $52 = ($51|0)==(7);
  if ($52) {
   $53 = (_newcell(7)|0);
   $54 = HEAP32[3152>>2]|0;
   $55 = HEAP32[3144>>2]|0;
   $56 = (($55) + ($54<<2)|0);
   HEAP32[$56>>2] = $53;
   $57 = HEAP32[3152>>2]|0;
   $58 = (($57) + 1)|0;
   HEAP32[3152>>2] = $58;
  } else {
   _parsetype(0);
   $59 = HEAP32[9112>>2]|0;
   $60 = ($59|0)==(9);
   if ($60) {
    $count1 = 1;
    while(1) {
     $61 = HEAP32[9112>>2]|0;
     $62 = ($61|0)==(9);
     if (!($62)) {
      break;
     }
     _gettoken();
     _parsetype(0);
     $63 = $count1;
     $64 = (($63) + 1)|0;
     $count1 = $64;
    }
    $65 = $count1;
    _makecompound(41,$65);
   }
  }
  $66 = HEAP32[9112>>2]|0;
  $67 = ($66|0)!=(7);
  if ($67) {
   _parseerror(2);
  }
  _gettoken();
 } else if ((($1|0) == 3)) {
  $45 = (_maketypevariable(9120)|0);
  $46 = HEAP32[3152>>2]|0;
  $47 = HEAP32[3144>>2]|0;
  $48 = (($47) + ($46<<2)|0);
  HEAP32[$48>>2] = $45;
  $49 = HEAP32[3152>>2]|0;
  $50 = (($49) + 1)|0;
  HEAP32[3152>>2] = $50;
  _gettoken();
 } else if ((($1|0) == 10)) {
  _gettoken();
  _parsetype(0);
  $68 = HEAP32[2576>>2]|0;
  $69 = HEAP32[3152>>2]|0;
  $70 = HEAP32[3144>>2]|0;
  $71 = (($70) + ($69<<2)|0);
  HEAP32[$71>>2] = $68;
  $72 = HEAP32[3152>>2]|0;
  $73 = (($72) + 1)|0;
  HEAP32[3152>>2] = $73;
  _makeinverse(39);
  $74 = HEAP32[9112>>2]|0;
  $75 = ($74|0)!=(11);
  if ($75) {
   _parseerror(1);
  }
  _gettoken();
 } else {
  _parseerror(8);
 }
 $76 = $0;
 $77 = ($76|0)==(0);
 if (!($77)) {
  STACKTOP = sp;return;
 }
 $78 = HEAP32[9112>>2]|0;
 $79 = ($78|0)==(23);
 if (!($79)) {
  STACKTOP = sp;return;
 }
 _gettoken();
 _parsetype(0);
 _makeinverse(22);
 STACKTOP = sp;return;
}
function _parseabstype() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $abstype = 0, $globaltokenoffside = 0, $head = 0, $temptokenoffside = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _gettoken();
 _parselefthandside();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) + -1)|0;
 HEAP32[3152>>2] = $1;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $abstype = $4;
 while(1) {
  $5 = $abstype;
  $6 = (($5) + 12|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(22);
  if (!($9)) {
   break;
  }
  $10 = $abstype;
  $11 = HEAP32[$10>>2]|0;
  $abstype = $11;
 }
 $12 = $abstype;
 $13 = (($12) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)!=(12);
 if ($16) {
  $17 = $abstype;
  $18 = (($17) + 12|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)!=(14);
  if ($21) {
   _parseerror(13);
  }
 }
 $22 = HEAP32[2568>>2]|0;
 $23 = $abstype;
 $24 = (($23) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($22) + (($25*52)|0)|0);
 $27 = (($26) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $abstype;
 $30 = (_insertabstype($28,$29)|0);
 $31 = ($30|0)!=(0);
 if (!($31)) {
  _parseerror(12);
 }
 $32 = HEAP32[9112>>2]|0;
 $33 = ($32|0)!=(25);
 if ($33) {
  _parseerror(14);
 }
 $34 = HEAP32[9384>>2]|0;
 $globaltokenoffside = $34;
 $35 = HEAP32[9376>>2]|0;
 $36 = (($35) + 1)|0;
 HEAP32[9384>>2] = $36;
 _gettoken();
 while(1) {
  $37 = HEAP32[9112>>2]|0;
  $38 = ($37|0)==(1);
  if ($38) {
   $95 = 1;
  } else {
   $39 = HEAP32[9112>>2]|0;
   $40 = ($39|0)==(3);
   if ($40) {
    $95 = 1;
   } else {
    $41 = HEAP32[9112>>2]|0;
    $42 = ($41|0)==(6);
    $95 = $42;
   }
  }
  if (!($95)) {
   break;
  }
  $43 = HEAP32[9384>>2]|0;
  $temptokenoffside = $43;
  _parselefthandside();
  $44 = HEAP32[9376>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[9384>>2] = $45;
  $46 = HEAP32[9112>>2]|0;
  $47 = ($46|0)!=(20);
  if ($47) {
   _parseerror(15);
  }
  $48 = HEAP32[3152>>2]|0;
  $49 = (($48) + -1)|0;
  HEAP32[3152>>2] = $49;
  $50 = HEAP32[3144>>2]|0;
  $51 = (($50) + ($49<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $head = $52;
  $53 = $head;
  $54 = (($53) + 12|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = ($56|0)!=(12);
  if ($57) {
   $58 = $head;
   $59 = (($58) + 12|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = ($61|0)!=(14);
   if ($62) {
    _parseerror(13);
   }
  }
  _gettoken();
  _parsetype(0);
  $63 = HEAP32[2568>>2]|0;
  $64 = $head;
  $65 = (($64) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($63) + (($66*52)|0)|0);
  $68 = (($67) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = HEAP32[3152>>2]|0;
  $71 = (($70) + -1)|0;
  HEAP32[3152>>2] = $71;
  $72 = HEAP32[3144>>2]|0;
  $73 = (($72) + ($71<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (_inserttypeexpr($69,$74)|0);
  $76 = ($75|0)!=(0);
  if (!($76)) {
   _parseerror(12);
  }
  $77 = HEAP32[2568>>2]|0;
  $78 = $head;
  $79 = (($78) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($77) + (($80*52)|0)|0);
  $82 = (($81) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $abstype;
  $85 = (_insertabstype($83,$84)|0);
  $86 = ($85|0)!=(0);
  if (!($86)) {
   _parseerror(12);
  }
  while(1) {
   $87 = HEAP32[9112>>2]|0;
   $88 = ($87|0)==(8);
   if (!($88)) {
    break;
   }
   _gettoken();
  }
  $89 = $temptokenoffside;
  HEAP32[9384>>2] = $89;
  $90 = HEAP32[9112>>2]|0;
  $91 = ($90|0)==(27);
  if ($91) {
   _gettoken();
  }
 }
 $92 = $globaltokenoffside;
 HEAP32[9384>>2] = $92;
 $93 = HEAP32[9112>>2]|0;
 $94 = ($93|0)==(27);
 if (!($94)) {
  STACKTOP = sp;return;
 }
 _gettoken();
 STACKTOP = sp;return;
}
function _parselefthandside() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _parseapplication();
 while(1) {
  $0 = HEAP32[9112>>2]|0;
  $1 = ($0|0)==(3);
  if ($1) {
   $2 = (_strcmp(9120,3832)|0);
   $3 = ($2|0)!=(0);
   if ($3) {
    _parsename();
    _makeinverse(22);
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   label = 0;
   $4 = HEAP32[9112>>2]|0;
   $5 = ($4|0)==(6);
   if (!($5)) {
    break;
   }
   _gettoken();
   _parseexpression(7);
   _makeinverse(22);
   $6 = HEAP32[9112>>2]|0;
   $7 = ($6|0)!=(7);
   if ($7) {
    _parseerror(2);
   }
   _gettoken();
  }
 }
 return;
}
function _parsestructdef() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $head = 0, $headname = 0, $structname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $structname = sp + 16|0;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) + -1)|0;
 HEAP32[3152>>2] = $1;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $head = $4;
 _setchecktypevariables(1);
 $5 = HEAP32[2968>>2]|0;
 $6 = HEAP32[3152>>2]|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 HEAP32[$8>>2] = $5;
 $9 = HEAP32[3152>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[3152>>2] = $10;
 while(1) {
  $11 = $head;
  $12 = (($11) + 12|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(22);
  if (!($15)) {
   break;
  }
  $16 = $head;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 12|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ($21|0)!=(12);
  if ($22) {
   $23 = $head;
   $24 = (($23) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + 12|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = ($28|0)!=(14);
   if ($29) {
    _parseerror(9);
   }
  }
  $30 = HEAP32[2568>>2]|0;
  $31 = $head;
  $32 = (($31) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($30) + (($35*52)|0)|0);
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_maketypevariable($38)|0);
  $40 = HEAP32[3152>>2]|0;
  $41 = HEAP32[3144>>2]|0;
  $42 = (($41) + ($40<<2)|0);
  HEAP32[$42>>2] = $39;
  $43 = HEAP32[3152>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[3152>>2] = $44;
  _make(40);
  $45 = $head;
  $46 = HEAP32[$45>>2]|0;
  $head = $46;
 }
 $47 = $head;
 $48 = (($47) + 12|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = ($50|0)!=(12);
 if ($51) {
  $52 = $head;
  $53 = (($52) + 12|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = ($55|0)!=(14);
  if ($56) {
   _parseerror(10);
  }
 }
 $57 = HEAP32[2568>>2]|0;
 $58 = $head;
 $59 = (($58) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($57) + (($60*52)|0)|0);
 $62 = (($61) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $headname = $63;
 $64 = (_newcell(14)|0);
 $65 = HEAP32[3152>>2]|0;
 $66 = HEAP32[3144>>2]|0;
 $67 = (($66) + ($65<<2)|0);
 HEAP32[$67>>2] = $64;
 $68 = HEAP32[3152>>2]|0;
 $69 = (($68) + 1)|0;
 HEAP32[3152>>2] = $69;
 $70 = $head;
 $71 = (($70) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = HEAP32[3152>>2]|0;
 $74 = (($73) - 1)|0;
 $75 = HEAP32[3144>>2]|0;
 $76 = (($75) + ($74<<2)|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) + 8|0);
 HEAP32[$78>>2] = $72;
 _make(40);
 _setchecktypevariables(2);
 _gettoken();
 $79 = HEAP32[3152>>2]|0;
 $80 = (($79) - 1)|0;
 $81 = HEAP32[3144>>2]|0;
 $82 = (($81) + ($80<<2)|0);
 $83 = HEAP32[$82>>2]|0;
 $head = $83;
 $84 = HEAP32[9112>>2]|0;
 $85 = ($84|0)==(12);
 if ($85) {
  $count = 0;
  while(1) {
   _gettoken();
   $86 = HEAP32[9112>>2]|0;
   $87 = ($86|0)!=(1);
   if ($87) {
    _parseerror(25);
   }
   $88 = (_gettemplate(9120)|0);
   $89 = HEAP32[3152>>2]|0;
   $90 = HEAP32[3144>>2]|0;
   $91 = (($90) + ($89<<2)|0);
   HEAP32[$91>>2] = $88;
   $92 = HEAP32[3152>>2]|0;
   $93 = (($92) + 1)|0;
   HEAP32[3152>>2] = $93;
   _gettoken();
   $94 = HEAP32[9112>>2]|0;
   $95 = ($94|0)!=(20);
   if ($95) {
    _parseerror(15);
   }
   _gettoken();
   _parsetype(0);
   $96 = $head;
   $97 = HEAP32[3152>>2]|0;
   $98 = (($97) - 2)|0;
   $99 = HEAP32[3144>>2]|0;
   $100 = (($99) + ($98<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = HEAP32[3152>>2]|0;
   $103 = (($102) - 1)|0;
   $104 = HEAP32[3144>>2]|0;
   $105 = (($104) + ($103<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   _makerecordfield($96,$101,$106);
   _makeinverse(34);
   $107 = $count;
   $108 = (($107) + 1)|0;
   $count = $108;
   $109 = HEAP32[9112>>2]|0;
   $110 = ($109|0)==(9);
   if (!($110)) {
    break;
   }
  }
  $111 = $count;
  _makecompound(42,$111);
  _makeinverse(34);
  $112 = HEAP32[9112>>2]|0;
  $113 = ($112|0)!=(13);
  if ($113) {
   _parseerror(33);
  }
  _gettoken();
 } else {
  while(1) {
   $114 = HEAP32[9112>>2]|0;
   $115 = ($114|0)!=(2);
   if ($115) {
    _parseerror(11);
   }
   (_strcpy(($structname|0),(9120|0))|0);
   $count = 0;
   _gettoken();
   while(1) {
    $116 = HEAP32[9112>>2]|0;
    $117 = ($116|0)==(1);
    if ($117) {
     $152 = 1;
    } else {
     $118 = HEAP32[9112>>2]|0;
     $119 = ($118|0)==(3);
     if ($119) {
      $152 = 1;
     } else {
      $120 = HEAP32[9112>>2]|0;
      $121 = ($120|0)==(10);
      if ($121) {
       $152 = 1;
      } else {
       $122 = HEAP32[9112>>2]|0;
       $123 = ($122|0)==(6);
       $152 = $123;
      }
     }
    }
    if (!($152)) {
     break;
    }
    _parsetype(1);
    $124 = $count;
    $125 = (($124) + 1)|0;
    $count = $125;
   }
   $126 = $head;
   $127 = HEAP32[3152>>2]|0;
   $128 = HEAP32[3144>>2]|0;
   $129 = (($128) + ($127<<2)|0);
   HEAP32[$129>>2] = $126;
   $130 = HEAP32[3152>>2]|0;
   $131 = (($130) + 1)|0;
   HEAP32[3152>>2] = $131;
   while(1) {
    $132 = $count;
    $133 = (($132) + -1)|0;
    $count = $133;
    $134 = ($132|0)>(0);
    if (!($134)) {
     break;
    }
    _makeinverse(22);
   }
   $135 = HEAP32[3152>>2]|0;
   $136 = (($135) + -1)|0;
   HEAP32[3152>>2] = $136;
   $137 = HEAP32[3144>>2]|0;
   $138 = (($137) + ($136<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (_inserttypeexpr($structname,$139)|0);
   $141 = ($140|0)!=(0);
   if (!($141)) {
    _parseerror(12);
   }
   $142 = HEAP32[9112>>2]|0;
   $143 = ($142|0)!=(14);
   if ($143) {
    break;
   }
   _gettoken();
  }
 }
 $144 = $headname;
 $145 = HEAP32[3152>>2]|0;
 $146 = (($145) + -1)|0;
 HEAP32[3152>>2] = $146;
 $147 = HEAP32[3144>>2]|0;
 $148 = (($147) + ($146<<2)|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (_inserttypeexpr($144,$149)|0);
 $151 = ($150|0)!=(0);
 if ($151) {
  _setchecktypevariables(0);
  STACKTOP = sp;return;
 }
 _parseerror(12);
 _setchecktypevariables(0);
 STACKTOP = sp;return;
}
function _parsetypesynonym() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $head = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) + -1)|0;
 HEAP32[3152>>2] = $1;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $head = $4;
 _setchecktypevariables(1);
 $5 = HEAP32[2968>>2]|0;
 $6 = HEAP32[3152>>2]|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 HEAP32[$8>>2] = $5;
 $9 = HEAP32[3152>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[3152>>2] = $10;
 while(1) {
  $11 = $head;
  $12 = (($11) + 12|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(22);
  if (!($15)) {
   break;
  }
  $16 = $head;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 12|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ($21|0)!=(12);
  if ($22) {
   $23 = $head;
   $24 = (($23) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + 12|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = ($28|0)!=(14);
   if ($29) {
    _parseerror(9);
   }
  }
  $30 = HEAP32[2568>>2]|0;
  $31 = $head;
  $32 = (($31) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($30) + (($35*52)|0)|0);
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_maketypevariable($38)|0);
  $40 = HEAP32[3152>>2]|0;
  $41 = HEAP32[3144>>2]|0;
  $42 = (($41) + ($40<<2)|0);
  HEAP32[$42>>2] = $39;
  $43 = HEAP32[3152>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[3152>>2] = $44;
  _make(40);
  $45 = $head;
  $46 = HEAP32[$45>>2]|0;
  $head = $46;
 }
 $47 = $head;
 $48 = (($47) + 12|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = ($50|0)!=(12);
 if ($51) {
  $52 = $head;
  $53 = (($52) + 12|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = ($55|0)!=(14);
  if ($56) {
   _parseerror(10);
  }
 }
 $57 = (_newcell(14)|0);
 $58 = HEAP32[3152>>2]|0;
 $59 = HEAP32[3144>>2]|0;
 $60 = (($59) + ($58<<2)|0);
 HEAP32[$60>>2] = $57;
 $61 = HEAP32[3152>>2]|0;
 $62 = (($61) + 1)|0;
 HEAP32[3152>>2] = $62;
 $63 = $head;
 $64 = (($63) + 8|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[3152>>2]|0;
 $67 = (($66) - 1)|0;
 $68 = HEAP32[3144>>2]|0;
 $69 = (($68) + ($67<<2)|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + 8|0);
 HEAP32[$71>>2] = $65;
 _make(40);
 _setchecktypevariables(2);
 _gettoken();
 _parsetype(0);
 _makeinverse(33);
 $72 = HEAP32[2568>>2]|0;
 $73 = $head;
 $74 = (($73) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($72) + (($75*52)|0)|0);
 $77 = (($76) + 8|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = HEAP32[3152>>2]|0;
 $80 = (($79) + -1)|0;
 HEAP32[3152>>2] = $80;
 $81 = HEAP32[3144>>2]|0;
 $82 = (($81) + ($80<<2)|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (_inserttypeexpr($78,$83)|0);
 $85 = ($84|0)!=(0);
 if ($85) {
  _setchecktypevariables(0);
  STACKTOP = sp;return;
 }
 _parseerror(12);
 _setchecktypevariables(0);
 STACKTOP = sp;return;
}
function _parseexpressionclause() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $definition = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_makeerror()|0);
 $definition = $0;
 $1 = (_strcmp(9120,3832)|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  _parseerror(5);
 }
 while(1) {
  _gettoken();
  _parseexpression(7);
  $3 = HEAP32[9112>>2]|0;
  $4 = ($3|0)==(9);
  if ($4) {
   _gettoken();
   $5 = (_strcmp(9120,4296)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    _gettoken();
   }
   $7 = HEAP32[9112>>2]|0;
   $8 = ($7|0)==(16);
   if ($8) {
    _gettoken();
   } else {
    $9 = (_makeerror()|0);
    $10 = HEAP32[3152>>2]|0;
    $11 = HEAP32[3144>>2]|0;
    $12 = (($11) + ($10<<2)|0);
    HEAP32[$12>>2] = $9;
    $13 = HEAP32[3152>>2]|0;
    $14 = (($13) + 1)|0;
    HEAP32[3152>>2] = $14;
    _makeinverse(23);
    _parseexpression(7);
    _make(23);
   }
  }
  $15 = $definition;
  $16 = HEAP32[3152>>2]|0;
  $17 = (($16) + -1)|0;
  HEAP32[3152>>2] = $17;
  $18 = HEAP32[3144>>2]|0;
  $19 = (($18) + ($17<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_extenddefinition84($15,$20)|0);
  $definition = $21;
  while(1) {
   $22 = HEAP32[9112>>2]|0;
   $23 = ($22|0)==(8);
   if (!($23)) {
    break;
   }
   _gettoken();
  }
  $24 = HEAP32[9112>>2]|0;
  $25 = ($24|0)==(27);
  if ($25) {
   $26 = HEAP32[9384>>2]|0;
   $27 = (($26) + -1)|0;
   HEAP32[9384>>2] = $27;
   _gettoken();
   $28 = HEAP32[9384>>2]|0;
   $29 = (($28) + 1)|0;
   HEAP32[9384>>2] = $29;
  }
  $30 = (_strcmp(9120,3832)|0);
  $31 = ($30|0)==(0);
  if (!($31)) {
   break;
  }
 }
 $32 = $definition;
 $33 = HEAP32[3152>>2]|0;
 $34 = HEAP32[3144>>2]|0;
 $35 = (($34) + ($33<<2)|0);
 HEAP32[$35>>2] = $32;
 $36 = HEAP32[3152>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[3152>>2] = $37;
 STACKTOP = sp;return;
}
function _parseapplication() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[9112>>2]|0;
 $1 = ($0|0)==(2);
 if ($1) {
  $count = 1;
  $2 = (_gettemplate(9120)|0);
  $3 = HEAP32[3152>>2]|0;
  $4 = HEAP32[3144>>2]|0;
  $5 = (($4) + ($3<<2)|0);
  HEAP32[$5>>2] = $2;
  $6 = HEAP32[3152>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[3152>>2] = $7;
  _gettoken();
  while(1) {
   $8 = HEAP32[9112>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    $57 = 1;
   } else {
    $10 = HEAP32[9112>>2]|0;
    $11 = ($10|0)==(1);
    if ($11) {
     $57 = 1;
    } else {
     $12 = HEAP32[9112>>2]|0;
     $13 = ($12|0)==(2);
     if ($13) {
      $57 = 1;
     } else {
      $14 = HEAP32[9112>>2]|0;
      $15 = ($14|0)==(4);
      if ($15) {
       $57 = 1;
      } else {
       $16 = HEAP32[9112>>2]|0;
       $17 = ($16|0)==(5);
       if ($17) {
        $57 = 1;
       } else {
        $18 = HEAP32[9112>>2]|0;
        $19 = ($18|0)==(6);
        if ($19) {
         $57 = 1;
        } else {
         $20 = HEAP32[9112>>2]|0;
         $21 = ($20|0)==(10);
         if ($21) {
          $57 = 1;
         } else {
          $22 = HEAP32[9112>>2]|0;
          $23 = ($22|0)==(12);
          $57 = $23;
         }
        }
       }
      }
     }
    }
   }
   if (!($57)) {
    break;
   }
   _parseterm();
   $24 = $count;
   $25 = (($24) + 1)|0;
   $count = $25;
  }
  $26 = $count;
  _makecompound(40,$26);
 } else {
  $27 = HEAP32[9112>>2]|0;
  $28 = ($27|0)==(3);
  if ($28) {
   _parsename();
  } else {
   _parseterm();
  }
 }
 while(1) {
  $29 = HEAP32[9112>>2]|0;
  $30 = ($29|0)==(0);
  if ($30) {
   $58 = 1;
  } else {
   $31 = HEAP32[9112>>2]|0;
   $32 = ($31|0)==(1);
   if ($32) {
    $58 = 1;
   } else {
    $33 = HEAP32[9112>>2]|0;
    $34 = ($33|0)==(2);
    if ($34) {
     $58 = 1;
    } else {
     $35 = HEAP32[9112>>2]|0;
     $36 = ($35|0)==(4);
     if ($36) {
      $58 = 1;
     } else {
      $37 = HEAP32[9112>>2]|0;
      $38 = ($37|0)==(5);
      if ($38) {
       $58 = 1;
      } else {
       $39 = HEAP32[9112>>2]|0;
       $40 = ($39|0)==(6);
       if ($40) {
        $58 = 1;
       } else {
        $41 = HEAP32[9112>>2]|0;
        $42 = ($41|0)==(10);
        if ($42) {
         $58 = 1;
        } else {
         $43 = HEAP32[9112>>2]|0;
         $44 = ($43|0)==(12);
         $58 = $44;
        }
       }
      }
     }
    }
   }
  }
  if (!($58)) {
   break;
  }
  _parseterm();
  _makeinverse(22);
 }
 $45 = HEAP32[9112>>2]|0;
 $46 = ($45|0)==(3);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = (_strcmp(9120,6744)|0);
 $48 = ($47|0)==(0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 _gettoken();
 $49 = HEAP32[9112>>2]|0;
 $50 = ($49|0)==(7);
 if ($50) {
  $51 = (_gettemplate(6744)|0);
  $52 = HEAP32[3152>>2]|0;
  $53 = HEAP32[3144>>2]|0;
  $54 = (($53) + ($52<<2)|0);
  HEAP32[$54>>2] = $51;
  $55 = HEAP32[3152>>2]|0;
  $56 = (($55) + 1)|0;
  HEAP32[3152>>2] = $56;
  _make(22);
 } else {
  _parseapplication();
  _makeinverse(39);
 }
 STACKTOP = sp;return;
}
function _parsesection($prio) {
 $prio = $prio|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fun = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $prio;
 while(1) {
  $1 = HEAP32[9112>>2]|0;
  $2 = ($1|0)==(3);
  if (!($2)) {
   label = 11;
   break;
  }
  $3 = (_gettemplate(9120)|0);
  $temp = $3;
  $4 = HEAP32[2568>>2]|0;
  $5 = $temp;
  $6 = (($5) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($4) + (($7*52)|0)|0);
  $fun = $8;
  $9 = $fun;
  $10 = (($9) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $0;
  $13 = ($11|0)>($12|0);
  if ($13) {
   label = 4;
   break;
  }
  $14 = $temp;
  $15 = HEAP32[3152>>2]|0;
  $16 = HEAP32[3144>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  HEAP32[$17>>2] = $14;
  $18 = HEAP32[3152>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[3152>>2] = $19;
  _make(22);
  _gettoken();
  $20 = HEAP32[9112>>2]|0;
  $21 = ($20|0)==(7);
  if ($21) {
   label = 6;
   break;
  }
  $22 = $fun;
  $23 = (($22) + 40|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = $fun;
   $27 = (($26) + 36|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) - 1)|0;
   $33 = $29;
  } else {
   $30 = $fun;
   $31 = (($30) + 36|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32;
  }
  _parseexpression($33);
  _makeinverse(22);
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _maketypevariable($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, $l = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $1;
 $3 = (_strlen(($2|0))|0);
 $k = $3;
 $l = 0;
 while(1) {
  $4 = $l;
  $5 = $k;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $l;
  $8 = $1;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)!=(42);
  if ($12) {
   _parseerror(6);
  }
  $13 = $l;
  $14 = (($13) + 1)|0;
  $l = $14;
 }
 $15 = HEAP32[2552>>2]|0;
 if ((($15|0) == 2)) {
  $37 = HEAP32[2560>>2]|0;
  $temp = $37;
  while(1) {
   $38 = $temp;
   $39 = (($38) + 12|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = ($41|0)==(39);
   if ($42) {
    $43 = $temp;
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $k;
    $48 = ($46|0)!=($47|0);
    $65 = $48;
   } else {
    $65 = 0;
   }
   if (!($65)) {
    break;
   }
   $49 = $temp;
   $50 = (($49) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $temp = $51;
  }
  $52 = $temp;
  $53 = (($52) + 12|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = ($55|0)!=(39);
  if ($56) {
   _parseerror(7);
  }
  $57 = $temp;
  $58 = HEAP32[$57>>2]|0;
  $0 = $58;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 } else if ((($15|0) == 1)) {
  $16 = HEAP32[2560>>2]|0;
  $17 = HEAP32[3152>>2]|0;
  $18 = HEAP32[3144>>2]|0;
  $19 = (($18) + ($17<<2)|0);
  HEAP32[$19>>2] = $16;
  $20 = HEAP32[3152>>2]|0;
  $21 = (($20) + 1)|0;
  HEAP32[3152>>2] = $21;
  $22 = (_newcell(10)|0);
  $temp = $22;
  $23 = HEAP32[3152>>2]|0;
  $24 = HEAP32[3144>>2]|0;
  $25 = (($24) + ($23<<2)|0);
  HEAP32[$25>>2] = $22;
  $26 = HEAP32[3152>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[3152>>2] = $27;
  $28 = $k;
  $29 = $temp;
  $30 = (($29) + 8|0);
  HEAP32[$30>>2] = $28;
  _make(39);
  $31 = HEAP32[3152>>2]|0;
  $32 = (($31) + -1)|0;
  HEAP32[3152>>2] = $32;
  $33 = HEAP32[3144>>2]|0;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[2560>>2] = $35;
  $36 = $temp;
  $0 = $36;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 } else {
  $59 = (_newcell(10)|0);
  $temp = $59;
  $60 = $k;
  $61 = $temp;
  $62 = (($61) + 8|0);
  HEAP32[$62>>2] = $60;
  $63 = $temp;
  $0 = $63;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _parsename() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp(9120,4344)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_gettemplate(4304)|0);
  $3 = HEAP32[3152>>2]|0;
  $4 = HEAP32[3144>>2]|0;
  $5 = (($4) + ($3<<2)|0);
  HEAP32[$5>>2] = $2;
  $6 = HEAP32[3152>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[3152>>2] = $7;
  _gettoken();
  return;
 }
 $8 = (_strcmp(9120,4696)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = (_newcell(11)|0);
  $11 = HEAP32[3152>>2]|0;
  $12 = HEAP32[3144>>2]|0;
  $13 = (($12) + ($11<<2)|0);
  HEAP32[$13>>2] = $10;
  $14 = HEAP32[3152>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[3152>>2] = $15;
  $16 = HEAP32[3152>>2]|0;
  $17 = (($16) - 1)|0;
  $18 = HEAP32[3144>>2]|0;
  $19 = (($18) + ($17<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 8|0);
  HEAP32[$21>>2] = 3;
 } else {
  $22 = (_strcmp(9120,4712)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   $24 = (_newcell(11)|0);
   $25 = HEAP32[3152>>2]|0;
   $26 = HEAP32[3144>>2]|0;
   $27 = (($26) + ($25<<2)|0);
   HEAP32[$27>>2] = $24;
   $28 = HEAP32[3152>>2]|0;
   $29 = (($28) + 1)|0;
   HEAP32[3152>>2] = $29;
   $30 = HEAP32[3152>>2]|0;
   $31 = (($30) - 1)|0;
   $32 = HEAP32[3144>>2]|0;
   $33 = (($32) + ($31<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 8|0);
   HEAP32[$35>>2] = 2;
  } else {
   $36 = (_strcmp(9120,4704)|0);
   $37 = ($36|0)==(0);
   if ($37) {
    $38 = (_newcell(11)|0);
    $39 = HEAP32[3152>>2]|0;
    $40 = HEAP32[3144>>2]|0;
    $41 = (($40) + ($39<<2)|0);
    HEAP32[$41>>2] = $38;
    $42 = HEAP32[3152>>2]|0;
    $43 = (($42) + 1)|0;
    HEAP32[3152>>2] = $43;
    $44 = HEAP32[3152>>2]|0;
    $45 = (($44) - 1)|0;
    $46 = HEAP32[3144>>2]|0;
    $47 = (($46) + ($45<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + 8|0);
    HEAP32[$49>>2] = 5;
   } else {
    $50 = (_gettemplate(9120)|0);
    $51 = HEAP32[3152>>2]|0;
    $52 = HEAP32[3144>>2]|0;
    $53 = (($52) + ($51<<2)|0);
    HEAP32[$53>>2] = $50;
    $54 = HEAP32[3152>>2]|0;
    $55 = (($54) + 1)|0;
    HEAP32[3152>>2] = $55;
   }
  }
 }
 _gettoken();
 return;
}
function _makerecordfield($recordtype,$field,$fieldtype) {
 $recordtype = $recordtype|0;
 $field = $field|0;
 $fieldtype = $fieldtype|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $fieldname = 0, $var = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $recordtype;
 $1 = $field;
 $2 = $fieldtype;
 $3 = HEAP32[2568>>2]|0;
 $4 = $1;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + (($6*52)|0)|0);
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $fieldname = $9;
 $10 = (_newcell(9)|0);
 $var = $10;
 $11 = $var;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = 1;
 $13 = $1;
 $14 = $var;
 HEAP32[$14>>2] = $13;
 $15 = $2;
 $16 = HEAP32[3152>>2]|0;
 $17 = HEAP32[3144>>2]|0;
 $18 = (($17) + ($16<<2)|0);
 HEAP32[$18>>2] = $15;
 $19 = HEAP32[3152>>2]|0;
 $20 = (($19) + 1)|0;
 HEAP32[3152>>2] = $20;
 $21 = $0;
 $22 = HEAP32[3152>>2]|0;
 $23 = HEAP32[3144>>2]|0;
 $24 = (($23) + ($22<<2)|0);
 HEAP32[$24>>2] = $21;
 $25 = HEAP32[3152>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[3152>>2] = $26;
 _make(22);
 $27 = $fieldname;
 $28 = HEAP32[3152>>2]|0;
 $29 = (($28) + -1)|0;
 HEAP32[3152>>2] = $29;
 $30 = HEAP32[3144>>2]|0;
 $31 = (($30) + ($29<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_inserttypeexpr($27,$32)|0);
 $34 = ($33|0)!=(0);
 if (!($34)) {
  _parseerror(12);
 }
 $35 = $var;
 $36 = HEAP32[3152>>2]|0;
 $37 = HEAP32[3144>>2]|0;
 $38 = (($37) + ($36<<2)|0);
 HEAP32[$38>>2] = $35;
 $39 = HEAP32[3152>>2]|0;
 $40 = (($39) + 1)|0;
 HEAP32[3152>>2] = $40;
 $41 = $var;
 $42 = HEAP32[3152>>2]|0;
 $43 = HEAP32[3144>>2]|0;
 $44 = (($43) + ($42<<2)|0);
 HEAP32[$44>>2] = $41;
 $45 = HEAP32[3152>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[3152>>2] = $46;
 $47 = $1;
 $48 = HEAP32[3152>>2]|0;
 $49 = HEAP32[3144>>2]|0;
 $50 = (($49) + ($48<<2)|0);
 HEAP32[$50>>2] = $47;
 $51 = HEAP32[3152>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[3152>>2] = $52;
 _make(20);
 _makecompound(42,1);
 $53 = $1;
 $54 = HEAP32[3152>>2]|0;
 $55 = HEAP32[3144>>2]|0;
 $56 = (($55) + ($54<<2)|0);
 HEAP32[$56>>2] = $53;
 $57 = HEAP32[3152>>2]|0;
 $58 = (($57) + 1)|0;
 HEAP32[3152>>2] = $58;
 _make(22);
 _make(39);
 $59 = $fieldname;
 $60 = HEAP32[3152>>2]|0;
 $61 = (($60) + -1)|0;
 HEAP32[3152>>2] = $61;
 $62 = HEAP32[3144>>2]|0;
 $63 = (($62) + ($61<<2)|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (_insert($59,1,14,$64,0)|0);
 $66 = ($65|0)!=(0);
 if ($66) {
  STACKTOP = sp;return;
 }
 _parseerror(18);
 STACKTOP = sp;return;
}
function _extenddefinition84($definition,$c) {
 $definition = $definition|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $definition;
 $2 = $c;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _parseerror(4);
 }
 $5 = $1;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(13);
 if ($9) {
  $10 = $2;
  $0 = $10;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $11 = $1;
 $12 = (($11) + 12|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)==(23);
 if ($15) {
  $16 = $1;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = (_extenddefinition84($20,$21)|0);
  $23 = $1;
  $24 = (($23) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 4|0);
  HEAP32[$26>>2] = $22;
  $27 = $1;
  $0 = $27;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 } else {
  _parseerror(4);
  $28 = $1;
  $0 = $28;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _parseterm() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $count = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[9112>>2]|0;
 switch ($0|0) {
 case 2:  {
  $27 = (_gettemplate(9120)|0);
  $28 = HEAP32[3152>>2]|0;
  $29 = HEAP32[3144>>2]|0;
  $30 = (($29) + ($28<<2)|0);
  HEAP32[$30>>2] = $27;
  $31 = HEAP32[3152>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[3152>>2] = $32;
  _makecompound(40,1);
  _gettoken();
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  _buildstring(9120);
  _gettoken();
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  _gettoken();
  $47 = HEAP32[9112>>2]|0;
  $48 = ($47|0)==(3);
  if ($48) {
   $49 = (_strcmp(9120,4344)|0);
   $50 = ($49|0)!=(0);
   if ($50) {
    _parsename();
    $51 = HEAP32[9112>>2]|0;
    $52 = ($51|0)!=(7);
    if ($52) {
     _parseexpression(7);
     _rotatestack();
     $53 = (_gettemplate(4280)|0);
     $54 = HEAP32[3152>>2]|0;
     $55 = HEAP32[3144>>2]|0;
     $56 = (($55) + ($54<<2)|0);
     HEAP32[$56>>2] = $53;
     $57 = HEAP32[3152>>2]|0;
     $58 = (($57) + 1)|0;
     HEAP32[3152>>2] = $58;
     _make(22);
     _make(22);
    }
   } else {
    label = 15;
   }
  } else {
   label = 15;
  }
  if ((label|0) == 15) {
   $59 = HEAP32[9112>>2]|0;
   $60 = ($59|0)==(7);
   if ($60) {
    $61 = (_newcell(7)|0);
    $62 = HEAP32[3152>>2]|0;
    $63 = HEAP32[3144>>2]|0;
    $64 = (($63) + ($62<<2)|0);
    HEAP32[$64>>2] = $61;
    $65 = HEAP32[3152>>2]|0;
    $66 = (($65) + 1)|0;
    HEAP32[3152>>2] = $66;
    $67 = HEAP32[3152>>2]|0;
    $68 = (($67) - 1)|0;
    $69 = HEAP32[3144>>2]|0;
    $70 = (($69) + ($68<<2)|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + 8|0);
    HEAP32[$72>>2] = 0;
   } else {
    _parseexpression(7);
    $73 = HEAP32[9112>>2]|0;
    $74 = ($73|0)==(9);
    if ($74) {
     $count = 1;
     while(1) {
      $75 = HEAP32[9112>>2]|0;
      $76 = ($75|0)==(9);
      if (!($76)) {
       break;
      }
      _gettoken();
      _parseexpression(7);
      $77 = $count;
      $78 = (($77) + 1)|0;
      $count = $78;
     }
     $79 = $count;
     _makecompound(41,$79);
    }
   }
  }
  $80 = HEAP32[9112>>2]|0;
  $81 = ($80|0)!=(7);
  if ($81) {
   _parseerror(2);
  }
  _gettoken();
  STACKTOP = sp;return;
  break;
 }
 case 10:  {
  _parselist();
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  _parsename();
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $33 = (_newcell(5)|0);
  $34 = HEAP32[3152>>2]|0;
  $35 = HEAP32[3144>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  HEAP32[$36>>2] = $33;
  $37 = HEAP32[3152>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[3152>>2] = $38;
  $39 = HEAP8[9120>>0]|0;
  $40 = $39 << 24 >> 24;
  $41 = HEAP32[3152>>2]|0;
  $42 = (($41) - 1)|0;
  $43 = HEAP32[3144>>2]|0;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 8|0);
  HEAP32[$46>>2] = $40;
  _gettoken();
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $1 = (_strchr(9120,46)|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $3 = (_newcell(3)|0);
   $4 = HEAP32[3152>>2]|0;
   $5 = HEAP32[3144>>2]|0;
   $6 = (($5) + ($4<<2)|0);
   HEAP32[$6>>2] = $3;
   $7 = HEAP32[3152>>2]|0;
   $8 = (($7) + 1)|0;
   HEAP32[3152>>2] = $8;
   $9 = (_atol(9120)|0);
   $10 = HEAP32[3152>>2]|0;
   $11 = (($10) - 1)|0;
   $12 = HEAP32[3144>>2]|0;
   $13 = (($12) + ($11<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   HEAP32[$14>>2] = $9;
  } else {
   $15 = (_newcell(4)|0);
   $16 = HEAP32[3152>>2]|0;
   $17 = HEAP32[3144>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $15;
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[3152>>2] = $20;
   $21 = (+_atof(9120));
   $22 = HEAP32[3152>>2]|0;
   $23 = (($22) - 1)|0;
   $24 = HEAP32[3144>>2]|0;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   HEAPF64[$26>>3] = $21;
  }
  _gettoken();
  STACKTOP = sp;return;
  break;
 }
 case 12:  {
  $count = 0;
  while(1) {
   _gettoken();
   $82 = HEAP32[9112>>2]|0;
   $83 = ($82|0)!=(1);
   if ($83) {
    _parseerror(25);
   }
   $84 = (_gettemplate(9120)|0);
   $85 = HEAP32[3152>>2]|0;
   $86 = HEAP32[3144>>2]|0;
   $87 = (($86) + ($85<<2)|0);
   HEAP32[$87>>2] = $84;
   $88 = HEAP32[3152>>2]|0;
   $89 = (($88) + 1)|0;
   HEAP32[3152>>2] = $89;
   _gettoken();
   $90 = (_strcmp(9120,3832)|0);
   $91 = ($90|0)!=(0);
   if ($91) {
    _parseerror(5);
   }
   _gettoken();
   _parseexpression(7);
   _makeinverse(20);
   $92 = $count;
   $93 = (($92) + 1)|0;
   $count = $93;
   $94 = HEAP32[9112>>2]|0;
   $95 = ($94|0)==(9);
   if (!($95)) {
    break;
   }
  }
  $96 = $count;
  _makecompound(42,$96);
  $97 = HEAP32[9112>>2]|0;
  $98 = ($97|0)!=(13);
  if ($98) {
   _parseerror(33);
  }
  _gettoken();
  STACKTOP = sp;return;
  break;
 }
 default: {
  _parseerror(3);
  STACKTOP = sp;return;
 }
 }
}
function _buildstring($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $count = 0;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = ($3|0)!=(0);
  if (!($4)) {
   break;
  }
  $5 = (_newcell(5)|0);
  $6 = HEAP32[3152>>2]|0;
  $7 = HEAP32[3144>>2]|0;
  $8 = (($7) + ($6<<2)|0);
  HEAP32[$8>>2] = $5;
  $9 = HEAP32[3152>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[3152>>2] = $10;
  $11 = $0;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = HEAP32[3152>>2]|0;
  $15 = (($14) - 1)|0;
  $16 = HEAP32[3144>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 8|0);
  HEAP32[$19>>2] = $13;
  $20 = $count;
  $21 = (($20) + 1)|0;
  $count = $21;
  $22 = $0;
  $23 = (($22) + 1|0);
  $0 = $23;
 }
 $24 = HEAP32[2576>>2]|0;
 $25 = HEAP32[3152>>2]|0;
 $26 = HEAP32[3144>>2]|0;
 $27 = (($26) + ($25<<2)|0);
 HEAP32[$27>>2] = $24;
 $28 = HEAP32[3152>>2]|0;
 $29 = (($28) + 1)|0;
 HEAP32[3152>>2] = $29;
 while(1) {
  $30 = $count;
  $31 = (($30) + -1)|0;
  $count = $31;
  $32 = ($30|0)>(0);
  if (!($32)) {
   break;
  }
  _makeinverse(39);
 }
 STACKTOP = sp;return;
}
function _parselist() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $count = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp;
 HEAP32[$count>>2] = 0;
 _gettoken();
 $0 = HEAP32[9112>>2]|0;
 $1 = ($0|0)!=(11);
 if ($1) {
  _parseexpression(7);
  $2 = HEAP32[$count>>2]|0;
  $3 = (($2) + 1)|0;
  HEAP32[$count>>2] = $3;
 }
 while(1) {
  $4 = HEAP32[9112>>2]|0;
  $5 = ($4|0)==(9);
  if (!($5)) {
   break;
  }
  _gettoken();
  _parseexpression(7);
  $6 = HEAP32[$count>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[$count>>2] = $7;
 }
 $8 = HEAP32[9112>>2]|0;
 $9 = ($8|0)==(11);
 if ($9) {
  $10 = HEAP32[2576>>2]|0;
  $11 = HEAP32[3152>>2]|0;
  $12 = HEAP32[3144>>2]|0;
  $13 = (($12) + ($11<<2)|0);
  HEAP32[$13>>2] = $10;
  $14 = HEAP32[3152>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[3152>>2] = $15;
  while(1) {
   $16 = HEAP32[$count>>2]|0;
   $17 = (($16) + -1)|0;
   HEAP32[$count>>2] = $17;
   $18 = ($16|0)>(0);
   if (!($18)) {
    break;
   }
   _makeinverse(39);
  }
 } else {
  $19 = HEAP32[9112>>2]|0;
  $20 = ($19|0)==(14);
  if ($20) {
   $21 = HEAP32[$count>>2]|0;
   $22 = ($21|0)>=(1);
   if ($22) {
    $23 = HEAP32[2576>>2]|0;
    $24 = HEAP32[3152>>2]|0;
    $25 = HEAP32[3144>>2]|0;
    $26 = (($25) + ($24<<2)|0);
    HEAP32[$26>>2] = $23;
    $27 = HEAP32[3152>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[3152>>2] = $28;
    while(1) {
     $29 = HEAP32[$count>>2]|0;
     $30 = (($29) + -1)|0;
     HEAP32[$count>>2] = $30;
     $31 = ($29|0)>(0);
     if (!($31)) {
      break;
     }
     _makeinverse(39);
    }
    HEAP32[$count>>2] = 1;
    _gettoken();
    _parsegenerators($count);
    $32 = HEAP32[2576>>2]|0;
    $33 = HEAP32[3152>>2]|0;
    $34 = HEAP32[3144>>2]|0;
    $35 = (($34) + ($33<<2)|0);
    HEAP32[$35>>2] = $32;
    $36 = HEAP32[3152>>2]|0;
    $37 = (($36) + 1)|0;
    HEAP32[3152>>2] = $37;
    while(1) {
     $38 = HEAP32[$count>>2]|0;
     $39 = (($38) + -1)|0;
     HEAP32[$count>>2] = $39;
     $40 = ($38|0)>(0);
     if (!($40)) {
      break;
     }
     _makeinverse(35);
    }
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
  if ((label|0) == 20) {
   $41 = HEAP32[9112>>2]|0;
   $42 = ($41|0)==(19);
   if ($42) {
    $43 = HEAP32[$count>>2]|0;
    $44 = ($43|0)==(1);
    if ($44) {
     _gettoken();
     $45 = HEAP32[9112>>2]|0;
     $46 = ($45|0)==(11);
     if ($46) {
      $47 = (_gettemplate(6648)|0);
      $48 = HEAP32[3152>>2]|0;
      $49 = HEAP32[3144>>2]|0;
      $50 = (($49) + ($48<<2)|0);
      HEAP32[$50>>2] = $47;
      $51 = HEAP32[3152>>2]|0;
      $52 = (($51) + 1)|0;
      HEAP32[3152>>2] = $52;
      _make(22);
     } else {
      $53 = (_gettemplate(6640)|0);
      $54 = HEAP32[3152>>2]|0;
      $55 = HEAP32[3144>>2]|0;
      $56 = (($55) + ($54<<2)|0);
      HEAP32[$56>>2] = $53;
      $57 = HEAP32[3152>>2]|0;
      $58 = (($57) + 1)|0;
      HEAP32[3152>>2] = $58;
      _make(22);
      _parseexpression(7);
      _makeinverse(22);
     }
    } else {
     label = 26;
    }
   } else {
    label = 26;
   }
   if ((label|0) == 26) {
    $59 = HEAP32[9112>>2]|0;
    $60 = ($59|0)==(19);
    if ($60) {
     $61 = HEAP32[$count>>2]|0;
     $62 = ($61|0)==(2);
     if ($62) {
      _gettoken();
      $63 = HEAP32[9112>>2]|0;
      $64 = ($63|0)==(11);
      if ($64) {
       _rotatestack();
       $65 = (_gettemplate(6664)|0);
       $66 = HEAP32[3152>>2]|0;
       $67 = HEAP32[3144>>2]|0;
       $68 = (($67) + ($66<<2)|0);
       HEAP32[$68>>2] = $65;
       $69 = HEAP32[3152>>2]|0;
       $70 = (($69) + 1)|0;
       HEAP32[3152>>2] = $70;
       _make(22);
       _make(22);
      } else {
       _rotatestack();
       $71 = (_gettemplate(6656)|0);
       $72 = HEAP32[3152>>2]|0;
       $73 = HEAP32[3144>>2]|0;
       $74 = (($73) + ($72<<2)|0);
       HEAP32[$74>>2] = $71;
       $75 = HEAP32[3152>>2]|0;
       $76 = (($75) + 1)|0;
       HEAP32[3152>>2] = $76;
       _make(22);
       _make(22);
       _parseexpression(7);
       _makeinverse(22);
      }
     }
    }
   }
  }
 }
 $77 = HEAP32[9112>>2]|0;
 $78 = ($77|0)!=(11);
 if (!($78)) {
  _gettoken();
  STACKTOP = sp;return;
 }
 _parseerror(1);
 _gettoken();
 STACKTOP = sp;return;
}
function _parsegenerators($count) {
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $assignment = 0, $exprcount = 0, $temp = 0, $varcount = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $count;
 while(1) {
  $varcount = 0;
  $exprcount = 0;
  while(1) {
   $1 = HEAP32[9112>>2]|0;
   $2 = ($1|0)==(8);
   if (!($2)) {
    break;
   }
   _gettoken();
  }
  $3 = HEAP32[9112>>2]|0;
  $4 = ($3|0)==(11);
  if ($4) {
   break;
  }
  $5 = (_newcell(35)|0);
  $temp = $5;
  $6 = HEAP32[3152>>2]|0;
  $7 = HEAP32[3144>>2]|0;
  $8 = (($7) + ($6<<2)|0);
  HEAP32[$8>>2] = $5;
  $9 = HEAP32[3152>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[3152>>2] = $10;
  $11 = (_getPositionCode()|0);
  $12 = $temp;
  $13 = (($12) + 8|0);
  HEAP32[$13>>2] = $11;
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$14>>2] = $16;
  while(1) {
   _parseexpression(7);
   $17 = $varcount;
   $18 = (($17) + 1)|0;
   $varcount = $18;
   $19 = HEAP32[9112>>2]|0;
   $20 = ($19|0)!=(9);
   if ($20) {
    break;
   }
   _gettoken();
  }
  $21 = HEAP32[9112>>2]|0;
  $22 = ($21|0)==(17);
  if ($22) {
   label = 13;
  } else {
   $23 = HEAP32[9112>>2]|0;
   $24 = ($23|0)==(18);
   if ($24) {
    label = 13;
   } else {
    $74 = $varcount;
    $75 = ($74|0)>(1);
    if ($75) {
     _parseerror(31);
    } else {
     $76 = HEAP32[3152>>2]|0;
     $77 = (($76) + -1)|0;
     HEAP32[3152>>2] = $77;
     $78 = HEAP32[3144>>2]|0;
     $79 = (($78) + ($77<<2)|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $temp;
     HEAP32[$81>>2] = $80;
    }
   }
  }
  if ((label|0) == 13) {
   label = 0;
   $25 = HEAP32[9112>>2]|0;
   $26 = ($25|0)==(18);
   $27 = $26&1;
   $assignment = $27;
   while(1) {
    _gettoken();
    _parseexpression(7);
    $28 = $exprcount;
    $29 = (($28) + 1)|0;
    $exprcount = $29;
    $30 = $assignment;
    $31 = ($30|0)!=(0);
    if ($31) {
     $32 = HEAP32[2576>>2]|0;
     $33 = HEAP32[3152>>2]|0;
     $34 = HEAP32[3144>>2]|0;
     $35 = (($34) + ($33<<2)|0);
     HEAP32[$35>>2] = $32;
     $36 = HEAP32[3152>>2]|0;
     $37 = (($36) + 1)|0;
     HEAP32[3152>>2] = $37;
     _makeinverse(39);
    }
    $38 = HEAP32[9112>>2]|0;
    $39 = ($38|0)==(9);
    if (!($39)) {
     break;
    }
   }
   $40 = $exprcount;
   $41 = $varcount;
   $42 = ($40|0)!=($41|0);
   if ($42) {
    _parseerror(32);
   }
   $43 = HEAP32[2576>>2]|0;
   $44 = HEAP32[3152>>2]|0;
   $45 = HEAP32[3144>>2]|0;
   $46 = (($45) + ($44<<2)|0);
   HEAP32[$46>>2] = $43;
   $47 = HEAP32[3152>>2]|0;
   $48 = (($47) + 1)|0;
   HEAP32[3152>>2] = $48;
   while(1) {
    $49 = $exprcount;
    $50 = (($49) + -1)|0;
    $exprcount = $50;
    $51 = ($49|0)>(0);
    if (!($51)) {
     break;
    }
    _makeinverse(39);
   }
   $52 = HEAP32[3152>>2]|0;
   $53 = (($52) + -1)|0;
   HEAP32[3152>>2] = $53;
   $54 = HEAP32[3144>>2]|0;
   $55 = (($54) + ($53<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $temp;
   $58 = (($57) + 4|0);
   HEAP32[$58>>2] = $56;
   $59 = HEAP32[2576>>2]|0;
   $60 = HEAP32[3152>>2]|0;
   $61 = HEAP32[3144>>2]|0;
   $62 = (($61) + ($60<<2)|0);
   HEAP32[$62>>2] = $59;
   $63 = HEAP32[3152>>2]|0;
   $64 = (($63) + 1)|0;
   HEAP32[3152>>2] = $64;
   while(1) {
    $65 = $varcount;
    $66 = (($65) + -1)|0;
    $varcount = $66;
    $67 = ($65|0)>(0);
    if (!($67)) {
     break;
    }
    _makeinverse(39);
   }
   $68 = HEAP32[3152>>2]|0;
   $69 = (($68) + -1)|0;
   HEAP32[3152>>2] = $69;
   $70 = HEAP32[3144>>2]|0;
   $71 = (($70) + ($69<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $temp;
   HEAP32[$73>>2] = $72;
   _checkpattern($72);
  }
 }
 STACKTOP = sp;return;
}
function _gettemplate($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 $2 = (_getfunctionnr($1)|0);
 $3 = HEAP32[2568>>2]|0;
 $4 = (($3) + (($2*52)|0)|0);
 $5 = (($4) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _insert($name,$argcount,$tag,$def,$code) {
 $name = $name|0;
 $argcount = $argcount|0;
 $tag = $tag|0;
 $def = $def|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $fun = 0, $list = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $argcount;
 $3 = $tag;
 $4 = $def;
 $5 = $code;
 $6 = $1;
 $7 = (_getdef($6)|0);
 $fun = $7;
 $8 = $fun;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $0 = 0;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 $11 = $fun;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   $15 = $2;
   $16 = $fun;
   $17 = (($16) + 12|0);
   HEAP32[$17>>2] = $15;
  } else {
   $18 = $2;
   $19 = $fun;
   $20 = (($19) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($18|0)!=($21|0);
   if (!($22)) {
    break;
   }
   $0 = 0;
   $65 = $0;
   STACKTOP = sp;return ($65|0);
  }
 } while(0);
 $23 = $3;
 $24 = $fun;
 $25 = (($24) + 48|0);
 HEAP8[$25>>0] = $23;
 $26 = $fun;
 $27 = (($26) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 12|0);
 HEAP8[$29>>0] = $23;
 $30 = $5;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = $5;
  $33 = $fun;
  HEAP32[$33>>2] = $32;
 } else {
  $34 = $4;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = (_newcell(39)|0);
   $temp = $36;
   $37 = $4;
   $38 = $temp;
   HEAP32[$38>>2] = $37;
   $39 = HEAP32[2576>>2]|0;
   $40 = $temp;
   $41 = (($40) + 4|0);
   HEAP32[$41>>2] = $39;
   $42 = $fun;
   $43 = (($42) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if ($45) {
    $46 = $temp;
    $47 = $fun;
    $48 = (($47) + 4|0);
    HEAP32[$48>>2] = $46;
   } else {
    $49 = $fun;
    $50 = (($49) + 4|0);
    $51 = HEAP32[$50>>2]|0;
    $list = $51;
    while(1) {
     $52 = $list;
     $53 = (($52) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($54) + 12|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = ($57|0)==(39);
     if (!($58)) {
      break;
     }
     $59 = $list;
     $60 = (($59) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $list = $61;
    }
    $62 = $temp;
    $63 = $list;
    $64 = (($63) + 4|0);
    HEAP32[$64>>2] = $62;
   }
  }
 }
 $0 = 1;
 $65 = $0;
 STACKTOP = sp;return ($65|0);
}
function _storefunctionname($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 (_strcpy((2584|0),($1|0))|0);
 $2 = (_newcell(13)|0);
 HEAP32[2840>>2] = $2;
 $3 = (_getfunctionnr(2584)|0);
 $4 = HEAP32[2840>>2]|0;
 $5 = (($4) + 8|0);
 HEAP32[$5>>2] = $3;
 STACKTOP = sp;return;
}
function _makeerror() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2840>>2]|0;
 return ($0|0);
}
function _printhashtable() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $fun = 0, $index = 0, $indexsize = 0, $k = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12032|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $index = sp + 12|0;
 $indexsize = 0;
 $k = 0;
 while(1) {
  $0 = $k;
  $1 = ($0|0)<(2999);
  if (!($1)) {
   break;
  }
  $2 = $k;
  $3 = HEAP32[2568>>2]|0;
  $4 = (($3) + (($2*52)|0)|0);
  $fun = $4;
  $5 = $fun;
  $6 = (($5) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  do {
   if ($8) {
    $9 = $fun;
    $10 = (($9) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($13|0)!=(95);
    if ($14) {
     $15 = $fun;
     $16 = (($15) + 28|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)!=(0|0);
     if (!($18)) {
      $19 = $fun;
      $20 = (($19) + 32|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ($21|0)!=(0|0);
      if (!($22)) {
       break;
      }
     }
     $23 = $k;
     $24 = $indexsize;
     $25 = (($24) + 1)|0;
     $indexsize = $25;
     $26 = (($index) + ($24<<2)|0);
     HEAP32[$26>>2] = $23;
    }
   }
  } while(0);
  $27 = $k;
  $28 = (($27) + 1)|0;
  $k = $28;
 }
 $29 = $indexsize;
 _qsort($index,$29,4,7);
 _Write(2848,$vararg_buffer);
 $k = 0;
 while(1) {
  $30 = $k;
  $31 = $indexsize;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $k;
  $34 = (($index) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[2568>>2]|0;
  $37 = (($36) + (($35*52)|0)|0);
  $38 = (($37) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $39;
  _Write(2864,$vararg_buffer1);
  $40 = $k;
  $41 = (($40) + 1)|0;
  $k = $41;
 }
 STACKTOP = sp;return;
}
function _printusertypes() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $fun = 0, $index = 0, $indexsize = 0, $k = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0;
 var $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12064|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer11 = sp;
 $vararg_buffer8 = sp + 40|0;
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $index = sp + 44|0;
 $indexsize = 0;
 $k = 0;
 while(1) {
  $0 = $k;
  $1 = ($0|0)<(2999);
  if (!($1)) {
   break;
  }
  $2 = $k;
  $3 = HEAP32[2568>>2]|0;
  $4 = (($3) + (($2*52)|0)|0);
  $5 = (($4) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $k;
   $9 = $indexsize;
   $10 = (($9) + 1)|0;
   $indexsize = $10;
   $11 = (($index) + ($9<<2)|0);
   HEAP32[$11>>2] = $8;
  }
  $12 = $k;
  $13 = (($12) + 1)|0;
  $k = $13;
 }
 $14 = $indexsize;
 _qsort($index,$14,4,7);
 _Write(2872,$vararg_buffer);
 $k = 0;
 while(1) {
  $15 = $k;
  $16 = $indexsize;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $k;
  $19 = (($index) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[2568>>2]|0;
  $22 = (($21) + (($20*52)|0)|0);
  $fun = $22;
  $23 = $fun;
  $24 = (($23) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  if ($26) {
   $27 = $fun;
   $28 = (($27) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   $32 = ($31|0)!=(95);
   if ($32) {
    $33 = $fun;
    $34 = (($33) + 32|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)!=(0|0);
    if ($36) {
     $37 = $fun;
     $38 = (($37) + 8|0);
     $39 = HEAP32[$38>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $39;
     _Write(2904,$vararg_buffer1);
     $40 = $fun;
     $41 = (($40) + 28|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (($42) + 12|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44&255;
     $46 = ($45|0)==(33);
     if ($46) {
      $47 = $fun;
      $48 = (($47) + 32|0);
      $49 = HEAP32[$48>>2]|0;
      _WriteType($49);
     } else {
      $50 = HEAP32[2568>>2]|0;
      $51 = $fun;
      $52 = (($51) + 32|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (($53) + 8|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = (($50) + (($55*52)|0)|0);
      $57 = (($56) + 8|0);
      $58 = HEAP32[$57>>2]|0;
      HEAP32[$vararg_buffer3>>2] = $58;
      _Write(5608,$vararg_buffer3);
     }
     _Write(8392,$vararg_buffer6);
    }
    $59 = $fun;
    $60 = (($59) + 28|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)!=(0|0);
    if ($62) {
     $63 = $fun;
     $64 = (($63) + 8|0);
     $65 = HEAP32[$64>>2]|0;
     HEAP32[$vararg_buffer8>>2] = $65;
     _Write(2920,$vararg_buffer8);
     $66 = $fun;
     $67 = (($66) + 28|0);
     $68 = HEAP32[$67>>2]|0;
     _WriteType($68);
     _Write(8392,$vararg_buffer11);
    }
   }
  }
  $69 = $k;
  $70 = (($69) + 1)|0;
  $k = $70;
 }
 STACKTOP = sp;return;
}
function _forallhashtable($function) {
 $function = $function|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $function;
 $k = 0;
 while(1) {
  $1 = $k;
  $2 = ($1|0)<(2999);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = $k;
  $5 = HEAP32[2568>>2]|0;
  $6 = (($5) + (($4*52)|0)|0);
  FUNCTION_TABLE_vi[$3 & 127]($6);
  $7 = $k;
  $8 = (($7) + 1)|0;
  $k = $8;
 }
 STACKTOP = sp;return;
}
function _constantfunction($funnr) {
 $funnr = $funnr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $fun = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $funnr;
 $1 = $0;
 $2 = HEAP32[2568>>2]|0;
 $3 = (($2) + (($1*52)|0)|0);
 $fun = $3;
 $4 = $fun;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $fun;
  $9 = (($8) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $fun;
   $13 = (($12) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 12|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = ($17|0)<(8);
   $20 = $18;
  } else {
   $20 = 0;
  }
 } else {
  $20 = 0;
 }
 $19 = $20&1;
 STACKTOP = sp;return ($19|0);
}
function _restoretemplates() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fun = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = 0;
 while(1) {
  $0 = $k;
  $1 = ($0|0)<(2999);
  if (!($1)) {
   break;
  }
  $2 = $k;
  $3 = HEAP32[2568>>2]|0;
  $4 = (($3) + (($2*52)|0)|0);
  $fun = $4;
  $5 = $fun;
  $6 = (($5) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $fun;
   $10 = (($9) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_strncmp($11,2936,4)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = $fun;
    $15 = (($14) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    _free($16);
    $17 = $fun;
    $18 = (($17) + 48|0);
    HEAP8[$18>>0] = 12;
    $19 = $fun;
    $20 = (($19) + 4|0);
    HEAP32[$20>>2] = 0;
    $21 = $fun;
    $22 = (($21) + 12|0);
    HEAP32[$22>>2] = 0;
    $23 = $fun;
    $24 = (($23) + 8|0);
    HEAP32[$24>>2] = 0;
    $25 = $fun;
    $26 = (($25) + 28|0);
    HEAP32[$26>>2] = 0;
    $27 = $fun;
    $28 = (($27) + 32|0);
    HEAP32[$28>>2] = 0;
    $29 = $fun;
    HEAP32[$29>>2] = 0;
    $30 = $fun;
    $31 = (($30) + 36|0);
    HEAP32[$31>>2] = 1;
    $32 = $fun;
    $33 = (($32) + 40|0);
    HEAP32[$33>>2] = 0;
    $34 = $fun;
    $35 = (($34) + 16|0);
    HEAP32[$35>>2] = 0;
    $36 = $fun;
    $37 = (($36) + 24|0);
    HEAP32[$37>>2] = 0;
    $38 = $fun;
    $39 = (($38) + 44|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 12|0);
    HEAP8[$41>>0] = 12;
    $42 = $k;
    $43 = $fun;
    $44 = (($43) + 44|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 8|0);
    HEAP32[$46>>2] = $42;
    $47 = $fun;
    $48 = (($47) + 44|0);
    $49 = HEAP32[$48>>2]|0;
    HEAP32[$49>>2] = 0;
    $50 = $fun;
    $51 = (($50) + 44|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + 4|0);
    HEAP32[$53>>2] = 0;
   }
  }
  $54 = $fun;
  $55 = (($54) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)!=(0|0);
  if ($57) {
   $58 = $fun;
   $59 = (($58) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==(0);
   if ($61) {
    $62 = $fun;
    $63 = (($62) + 4|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + 12|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = ($67|0)<(8);
    if ($68) {
     $69 = $fun;
     $70 = (($69) + 44|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $fun;
     $73 = (($72) + 4|0);
     $74 = HEAP32[$73>>2]|0;
     ;HEAP32[$71+0>>2]=HEAP32[$74+0>>2]|0;HEAP32[$71+4>>2]=HEAP32[$74+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$74+8>>2]|0;HEAP32[$71+12>>2]=HEAP32[$74+12>>2]|0;
    }
    $75 = $fun;
    $76 = (($75) + 32|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)!=(0|0);
    if ($78) {
     $79 = $fun;
     $80 = (($79) + 44|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($81) + 12|0);
     HEAP8[$82>>0] = 14;
     $83 = $k;
     $84 = $fun;
     $85 = (($84) + 44|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($86) + 8|0);
     HEAP32[$87>>2] = $83;
     $88 = $fun;
     $89 = (($88) + 44|0);
     $90 = HEAP32[$89>>2]|0;
     HEAP32[$90>>2] = 0;
     $91 = $fun;
     $92 = (($91) + 44|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (($93) + 4|0);
     HEAP32[$94>>2] = 0;
    }
   }
  }
  $95 = $k;
  $96 = (($95) + 1)|0;
  $k = $96;
 }
 $97 = (_gettemplate(9448)|0);
 HEAP32[2944>>2] = $97;
 $98 = (($97) + 8|0);
 HEAP32[$98>>2] = 1;
 $99 = (_gettemplate(9456)|0);
 HEAP32[2952>>2] = $99;
 $100 = (($99) + 8|0);
 HEAP32[$100>>2] = 0;
 $101 = (_gettemplate(9464)|0);
 HEAP32[2576>>2] = $101;
 $102 = (_gettemplate(2960)|0);
 HEAP32[2968>>2] = $102;
 $103 = (_gettemplate(6816)|0);
 $104 = (($103) + 8|0);
 $105 = HEAP32[$104>>2]|0;
 HEAP32[2976>>2] = $105;
 $106 = (_gettemplate(4400)|0);
 HEAPF64[$106>>3] = 3.1415899999999999;
 STACKTOP = sp;return;
}
function _insertsys($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $fun = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 $2 = (_getdef($1)|0);
 $fun = $2;
 $3 = $fun;
 $4 = (($3) + 16|0);
 HEAP32[$4>>2] = 1;
 STACKTOP = sp;return;
}
function _insertoperator($name,$prio,$assoc) {
 $name = $name|0;
 $prio = $prio|0;
 $assoc = $assoc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fun = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $prio;
 $2 = $assoc;
 $3 = $0;
 $4 = (_getdef($3)|0);
 $fun = $4;
 $5 = $1;
 $6 = ($5|0)<(1);
 if ($6) {
  $1 = 1;
 }
 $7 = $1;
 $8 = ($7|0)>(7);
 if ($8) {
  $1 = 7;
 }
 $9 = $1;
 $10 = $fun;
 $11 = (($10) + 36|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = $fun;
 $14 = (($13) + 40|0);
 HEAP32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _createhashtable() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2568>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_malloc(155948)|0);
  HEAP32[2568>>2] = $2;
 }
 $3 = HEAP32[2568>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  return;
 }
 _systemerror(4);
 return;
}
function _inithashtable() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fun = 0, $k = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = 0;
 while(1) {
  $0 = $k;
  $1 = ($0|0)<(2999);
  if (!($1)) {
   break;
  }
  $2 = $k;
  $3 = HEAP32[2568>>2]|0;
  $4 = (($3) + (($2*52)|0)|0);
  $fun = $4;
  $5 = HEAP32[2984>>2]|0;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $fun;
   $8 = (($7) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)!=(0|0);
   if ($10) {
    $11 = $fun;
    $12 = (($11) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    _free($13);
   }
  }
  $14 = $fun;
  $15 = (($14) + 8|0);
  HEAP32[$15>>2] = 0;
  $16 = $fun;
  $17 = (($16) + 12|0);
  HEAP32[$17>>2] = 0;
  $18 = $fun;
  $19 = (($18) + 48|0);
  HEAP8[$19>>0] = 12;
  $20 = $fun;
  $21 = (($20) + 4|0);
  HEAP32[$21>>2] = 0;
  $22 = HEAP32[2984>>2]|0;
  $23 = ($22|0)!=(0);
  if (!($23)) {
   $24 = (_newcell(12)|0);
   $25 = $fun;
   $26 = (($25) + 44|0);
   HEAP32[$26>>2] = $24;
  }
  $27 = $fun;
  $28 = (($27) + 28|0);
  HEAP32[$28>>2] = 0;
  $29 = $fun;
  $30 = (($29) + 32|0);
  HEAP32[$30>>2] = 0;
  $31 = $fun;
  HEAP32[$31>>2] = 0;
  $32 = $fun;
  $33 = (($32) + 36|0);
  HEAP32[$33>>2] = 1;
  $34 = $fun;
  $35 = (($34) + 40|0);
  HEAP32[$35>>2] = 0;
  $36 = $fun;
  $37 = (($36) + 16|0);
  HEAP32[$37>>2] = 0;
  $38 = $fun;
  $39 = (($38) + 24|0);
  HEAP32[$39>>2] = 0;
  $40 = $fun;
  $41 = (($40) + 44|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 12|0);
  HEAP8[$43>>0] = 12;
  $44 = $k;
  $45 = $fun;
  $46 = (($45) + 44|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 8|0);
  HEAP32[$48>>2] = $44;
  $49 = $fun;
  $50 = (($49) + 44|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$51>>2] = 0;
  $52 = $fun;
  $53 = (($52) + 44|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 4|0);
  HEAP32[$55>>2] = 0;
  $56 = $k;
  $57 = (($56) + 1)|0;
  $k = $57;
 }
 _restoretemplates();
 HEAP32[2984>>2] = 1;
 STACKTOP = sp;return;
}
function _anonymousfunction($argcount,$def) {
 $argcount = $argcount|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fun = 0, $funname = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $funname = sp + 24|0;
 $0 = $argcount;
 $1 = $def;
 while(1) {
  $2 = HEAP32[2992>>2]|0;
  $3 = (($2) + 1)|0;
  HEAP32[2992>>2] = $3;
  HEAP32[$vararg_buffer>>2] = 2584;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 2936;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  (_sprintf($funname,3000,$vararg_buffer)|0);
  $4 = (_getdef($funname)|0);
  $fun = $4;
  $5 = $fun;
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $27 = 1;
  } else {
   $8 = $fun;
   $9 = (($8) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(0|0);
   $27 = $11;
  }
  if (!($27)) {
   break;
  }
 }
 $12 = $0;
 $13 = $fun;
 $14 = (($13) + 12|0);
 HEAP32[$14>>2] = $12;
 $15 = $1;
 $16 = $fun;
 $17 = (($16) + 4|0);
 HEAP32[$17>>2] = $15;
 $18 = $fun;
 $19 = (($18) + 48|0);
 HEAP8[$19>>0] = 14;
 $20 = $fun;
 $21 = (($20) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 12|0);
 HEAP8[$23>>0] = 14;
 $24 = $fun;
 $25 = (($24) + 44|0);
 $26 = HEAP32[$25>>2]|0;
 STACKTOP = sp;return ($26|0);
}
function _inserttypeexpr($name,$typeexpr) {
 $name = $name|0;
 $typeexpr = $typeexpr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fun = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $typeexpr;
 $3 = $1;
 $4 = (_getdef($3)|0);
 $fun = $4;
 $5 = $fun;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $2;
  $10 = $fun;
  $11 = (($10) + 28|0);
  HEAP32[$11>>2] = $9;
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _inserttypestring($name,$typestring) {
 $name = $name|0;
 $typestring = $typestring|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $typestring;
 $2 = $1;
 _parsetypeexpr($2);
 $3 = $0;
 $4 = HEAP32[3152>>2]|0;
 $5 = (($4) + -1)|0;
 HEAP32[3152>>2] = $5;
 $6 = HEAP32[3144>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_inserttypeexpr($3,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _insertabstype($name,$abstype) {
 $name = $name|0;
 $abstype = $abstype|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fun = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = $abstype;
 $3 = $1;
 $4 = (_getdef($3)|0);
 $fun = $4;
 $5 = $fun;
 $6 = (($5) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $2;
  $10 = $fun;
  $11 = (($10) + 32|0);
  HEAP32[$11>>2] = $9;
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _getfunctionnr($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $pos = 0;
 var $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 $2 = (_hash($1)|0);
 $pos = $2;
 $count = 0;
 while(1) {
  $3 = $pos;
  $4 = HEAP32[2568>>2]|0;
  $5 = (($4) + (($3*52)|0)|0);
  $6 = (($5) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = $pos;
   $10 = HEAP32[2568>>2]|0;
   $11 = (($10) + (($9*52)|0)|0);
   $12 = (($11) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $0;
   $15 = (_strcmp($13,$14)|0);
   $16 = ($15|0)!=(0);
   $57 = $16;
  } else {
   $57 = 0;
  }
  if (!($57)) {
   break;
  }
  $17 = $count;
  $18 = (($17) + 1)|0;
  $count = $18;
  $19 = ($17|0)>(2999);
  if ($19) {
   _systemerror(3);
  }
  $20 = $pos;
  $21 = (($20) + 1)|0;
  $pos = $21;
  $22 = ($21|0)>=(2999);
  if ($22) {
   $23 = $pos;
   $24 = (($23) - 2999)|0;
   $pos = $24;
  }
 }
 $25 = $pos;
 $26 = HEAP32[2568>>2]|0;
 $27 = (($26) + (($25*52)|0)|0);
 $28 = (($27) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  $56 = $pos;
  STACKTOP = sp;return ($56|0);
 }
 $31 = $pos;
 $32 = HEAP32[2568>>2]|0;
 $33 = (($32) + (($31*52)|0)|0);
 $temp = $33;
 $34 = $0;
 $35 = (___strdup($34)|0);
 $36 = $temp;
 $37 = (($36) + 8|0);
 HEAP32[$37>>2] = $35;
 $38 = $temp;
 $39 = (($38) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 if ($41) {
  _systemerror(4);
 }
 $42 = $0;
 $43 = HEAP8[$42>>0]|0;
 $44 = $43 << 24 >> 24;
 $45 = (65)<=($44|0);
 if ($45) {
  $46 = $0;
  $47 = HEAP8[$46>>0]|0;
  $48 = $47 << 24 >> 24;
  $49 = ($48|0)<=(90);
  if ($49) {
   $50 = $temp;
   $51 = (($50) + 48|0);
   HEAP8[$51>>0] = 1;
   $52 = $temp;
   $53 = (($52) + 44|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + 12|0);
   HEAP8[$55>>0] = 1;
  }
 }
 $56 = $pos;
 STACKTOP = sp;return ($56|0);
}
function _getdef($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = HEAP32[2568>>2]|0;
 $2 = $0;
 $3 = (_getfunctionnr($2)|0);
 $4 = (($1) + (($3*52)|0)|0);
 STACKTOP = sp;return ($4|0);
}
function _comparefuncdef($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[2568>>2]|0;
 $5 = (($4) + (($3*52)|0)|0);
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[2568>>2]|0;
 $11 = (($10) + (($9*52)|0)|0);
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_strcmp($7,$13)|0);
 STACKTOP = sp;return ($14|0);
}
function _hash($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $factor = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $val = 0;
 $factor = 1;
 while(1) {
  $1 = $0;
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)!=(0);
  if (!($3)) {
   break;
  }
  $4 = $factor;
  $5 = ($4|0)>(4);
  if ($5) {
   $factor = 1;
  }
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = $factor;
  $10 = (($9) + 1)|0;
  $factor = $10;
  $11 = Math_imul($8, $9)|0;
  $12 = $val;
  $13 = (($12) + ($11))|0;
  $val = $13;
  while(1) {
   $14 = $val;
   $15 = ($14|0)>=(2999);
   if (!($15)) {
    break;
   }
   $16 = $val;
   $17 = (($16) - 2999)|0;
   $val = $17;
  }
  $18 = $0;
  $19 = (($18) + 1|0);
  $0 = $19;
 }
 $20 = $val;
 STACKTOP = sp;return ($20|0);
}
function _eval() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $argcount = 0, $c = 0, $fun = 0, $k = 0, $temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $temp = $4;
 $argcount = 0;
 $5 = HEAP32[352>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[352>>2] = $6;
 $7 = ($5|0)==(0);
 if ($7) {
  label = 3;
 } else {
  $8 = HEAP32[344>>2]|0;
  $9 = ($8|0)!=(0);
  if ($9) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _checkinterrupt();
 }
 $10 = HEAP32[3152>>2]|0;
 $11 = ($10|0)>(19750);
 if ($11) {
  _systemerror(18);
 }
 L9: while(1) {
  $12 = $temp;
  $13 = (($12) + 12|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)<(8);
  if ($16) {
   break;
  }
  $17 = $temp;
  $18 = (($17) + 12|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)>(38);
  if ($21) {
   break;
  }
  $27 = $temp;
  $28 = (($27) + 12|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  do {
   switch ($30|0) {
   case 22:  {
    while(1) {
     $153 = $temp;
     $154 = (($153) + 4|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = HEAP32[3152>>2]|0;
     $157 = HEAP32[3144>>2]|0;
     $158 = (($157) + ($156<<2)|0);
     HEAP32[$158>>2] = $155;
     $159 = HEAP32[3152>>2]|0;
     $160 = (($159) + 1)|0;
     HEAP32[3152>>2] = $160;
     $161 = $argcount;
     $162 = (($161) + 1)|0;
     $argcount = $162;
     $163 = $temp;
     $164 = HEAP32[$163>>2]|0;
     $temp = $164;
     $165 = $temp;
     $166 = (($165) + 12|0);
     $167 = HEAP8[$166>>0]|0;
     $168 = $167&255;
     $169 = ($168|0)==(22);
     if (!($169)) {
      break;
     }
    }
    break;
   }
   case 24:  {
    $81 = $temp;
    $c = $81;
    $82 = HEAP32[2568>>2]|0;
    $83 = $c;
    $84 = (($83) + 8|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($82) + (($85*52)|0)|0);
    $fun = $86;
    $87 = $fun;
    $88 = (($87) + 12|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0);
    if ($90) {
    } else {
     $91 = $fun;
     $92 = (($91) + 12|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ($93|0)==(1);
     if ($94) {
      $95 = $c;
      $96 = (($95) + 4|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = HEAP32[3152>>2]|0;
      $99 = HEAP32[3144>>2]|0;
      $100 = (($99) + ($98<<2)|0);
      HEAP32[$100>>2] = $97;
      $101 = HEAP32[3152>>2]|0;
      $102 = (($101) + 1)|0;
      HEAP32[3152>>2] = $102;
     } else {
      $103 = $fun;
      $104 = (($103) + 12|0);
      $105 = HEAP32[$104>>2]|0;
      $k = $105;
      while(1) {
       $106 = $k;
       $107 = ($106|0)>(1);
       if (!($107)) {
        break;
       }
       $108 = $c;
       $109 = HEAP32[$108>>2]|0;
       $110 = HEAP32[3152>>2]|0;
       $111 = HEAP32[3144>>2]|0;
       $112 = (($111) + ($110<<2)|0);
       HEAP32[$112>>2] = $109;
       $113 = HEAP32[3152>>2]|0;
       $114 = (($113) + 1)|0;
       HEAP32[3152>>2] = $114;
       $115 = $c;
       $116 = (($115) + 4|0);
       $117 = HEAP32[$116>>2]|0;
       $c = $117;
       $118 = $k;
       $119 = (($118) + -1)|0;
       $k = $119;
      }
      $120 = $c;
      $121 = HEAP32[3152>>2]|0;
      $122 = HEAP32[3144>>2]|0;
      $123 = (($122) + ($121<<2)|0);
      HEAP32[$123>>2] = $120;
      $124 = HEAP32[3152>>2]|0;
      $125 = (($124) + 1)|0;
      HEAP32[3152>>2] = $125;
     }
    }
    $126 = $temp;
    $127 = (($126) + 12|0);
    HEAP8[$127>>0] = 12;
    $128 = $fun;
    $129 = HEAP32[$128>>2]|0;
    $130 = ($129|0)!=(0|0);
    if ($130) {
     $131 = $fun;
     $132 = HEAP32[$131>>2]|0;
     FUNCTION_TABLE_v[$132 & 255]();
     $133 = $temp;
     $134 = HEAP32[3152>>2]|0;
     $135 = (($134) + -1)|0;
     HEAP32[3152>>2] = $135;
     $136 = HEAP32[3144>>2]|0;
     $137 = (($136) + ($135<<2)|0);
     $138 = HEAP32[$137>>2]|0;
     ;HEAP32[$133+0>>2]=HEAP32[$138+0>>2]|0;HEAP32[$133+4>>2]=HEAP32[$138+4>>2]|0;HEAP32[$133+8>>2]=HEAP32[$138+8>>2]|0;HEAP32[$133+12>>2]=HEAP32[$138+12>>2]|0;
     $139 = $fun;
     $140 = (($139) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = HEAP32[3152>>2]|0;
     $143 = (($142) - ($141))|0;
     HEAP32[3152>>2] = $143;
    } else {
     $144 = $temp;
     $145 = $fun;
     $146 = (($145) + 4|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = $fun;
     $149 = (($148) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = HEAP32[3152>>2]|0;
     $152 = (_copyreduce($147,$150,$151)|0);
     ;HEAP32[$144+0>>2]=HEAP32[$152+0>>2]|0;HEAP32[$144+4>>2]=HEAP32[$152+4>>2]|0;HEAP32[$144+8>>2]=HEAP32[$152+8>>2]|0;HEAP32[$144+12>>2]=HEAP32[$152+12>>2]|0;
    }
    break;
   }
   case 26:  {
    $52 = $temp;
    $53 = (($52) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = HEAP32[3152>>2]|0;
    $56 = HEAP32[3144>>2]|0;
    $57 = (($56) + ($55<<2)|0);
    HEAP32[$57>>2] = $54;
    $58 = HEAP32[3152>>2]|0;
    $59 = (($58) + 1)|0;
    HEAP32[3152>>2] = $59;
    $60 = $temp;
    $61 = HEAP32[$60>>2]|0;
    $62 = HEAP32[3152>>2]|0;
    $63 = HEAP32[3144>>2]|0;
    $64 = (($63) + ($62<<2)|0);
    HEAP32[$64>>2] = $61;
    $65 = HEAP32[3152>>2]|0;
    $66 = (($65) + 1)|0;
    HEAP32[3152>>2] = $66;
    $67 = HEAP32[2568>>2]|0;
    $68 = $temp;
    $69 = (($68) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($67) + (($70*52)|0)|0);
    $72 = HEAP32[$71>>2]|0;
    FUNCTION_TABLE_v[$72 & 255]();
    $73 = $temp;
    $74 = HEAP32[3152>>2]|0;
    $75 = (($74) + -1)|0;
    HEAP32[3152>>2] = $75;
    $76 = HEAP32[3144>>2]|0;
    $77 = (($76) + ($75<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    ;HEAP32[$73+0>>2]=HEAP32[$78+0>>2]|0;HEAP32[$73+4>>2]=HEAP32[$78+4>>2]|0;HEAP32[$73+8>>2]=HEAP32[$78+8>>2]|0;HEAP32[$73+12>>2]=HEAP32[$78+12>>2]|0;
    $79 = HEAP32[3152>>2]|0;
    $80 = (($79) - 2)|0;
    HEAP32[3152>>2] = $80;
    break;
   }
   case 25:  {
    $31 = $temp;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[3152>>2]|0;
    $34 = HEAP32[3144>>2]|0;
    $35 = (($34) + ($33<<2)|0);
    HEAP32[$35>>2] = $32;
    $36 = HEAP32[3152>>2]|0;
    $37 = (($36) + 1)|0;
    HEAP32[3152>>2] = $37;
    $38 = HEAP32[2568>>2]|0;
    $39 = $temp;
    $40 = (($39) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + (($41*52)|0)|0);
    $43 = HEAP32[$42>>2]|0;
    FUNCTION_TABLE_v[$43 & 255]();
    $44 = $temp;
    $45 = HEAP32[3152>>2]|0;
    $46 = (($45) + -1)|0;
    HEAP32[3152>>2] = $46;
    $47 = HEAP32[3144>>2]|0;
    $48 = (($47) + ($46<<2)|0);
    $49 = HEAP32[$48>>2]|0;
    ;HEAP32[$44+0>>2]=HEAP32[$49+0>>2]|0;HEAP32[$44+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$44+8>>2]=HEAP32[$49+8>>2]|0;HEAP32[$44+12>>2]=HEAP32[$49+12>>2]|0;
    $50 = HEAP32[3152>>2]|0;
    $51 = (($50) - 1)|0;
    HEAP32[3152>>2] = $51;
    break;
   }
   case 23:  {
    $297 = $temp;
    $298 = (($297) + 4|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = (($299) + 4|0);
    $301 = HEAP32[$300>>2]|0;
    $302 = HEAP32[3152>>2]|0;
    $303 = HEAP32[3144>>2]|0;
    $304 = (($303) + ($302<<2)|0);
    HEAP32[$304>>2] = $301;
    $305 = HEAP32[3152>>2]|0;
    $306 = (($305) + 1)|0;
    HEAP32[3152>>2] = $306;
    $307 = $temp;
    $308 = (($307) + 4|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = HEAP32[$309>>2]|0;
    $311 = HEAP32[3152>>2]|0;
    $312 = HEAP32[3144>>2]|0;
    $313 = (($312) + ($311<<2)|0);
    HEAP32[$313>>2] = $310;
    $314 = HEAP32[3152>>2]|0;
    $315 = (($314) + 1)|0;
    HEAP32[3152>>2] = $315;
    $316 = $temp;
    $317 = HEAP32[$316>>2]|0;
    $318 = HEAP32[3152>>2]|0;
    $319 = HEAP32[3144>>2]|0;
    $320 = (($319) + ($318<<2)|0);
    HEAP32[$320>>2] = $317;
    $321 = HEAP32[3152>>2]|0;
    $322 = (($321) + 1)|0;
    HEAP32[3152>>2] = $322;
    _applyIF();
    $323 = $temp;
    $324 = HEAP32[3152>>2]|0;
    $325 = (($324) + -1)|0;
    HEAP32[3152>>2] = $325;
    $326 = HEAP32[3144>>2]|0;
    $327 = (($326) + ($325<<2)|0);
    $328 = HEAP32[$327>>2]|0;
    ;HEAP32[$323+0>>2]=HEAP32[$328+0>>2]|0;HEAP32[$323+4>>2]=HEAP32[$328+4>>2]|0;HEAP32[$323+8>>2]=HEAP32[$328+8>>2]|0;HEAP32[$323+12>>2]=HEAP32[$328+12>>2]|0;
    $329 = HEAP32[3152>>2]|0;
    $330 = (($329) - 3)|0;
    HEAP32[3152>>2] = $330;
    break;
   }
   case 30: case 29:  {
    $227 = $temp;
    _evalset($227);
    break;
   }
   case 13:  {
    label = 57;
    break;
   }
   case 14:  {
    $170 = HEAP32[2568>>2]|0;
    $171 = $temp;
    $172 = (($171) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = (($170) + (($173*52)|0)|0);
    $fun = $174;
    $175 = $argcount;
    $176 = $fun;
    $177 = (($176) + 12|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($175|0)<($178|0);
    if ($179) {
     label = 34;
     break L9;
    }
    $183 = HEAP32[3152>>2]|0;
    $184 = $argcount;
    $185 = (($184) + 1)|0;
    $186 = (($183) - ($185))|0;
    $187 = HEAP32[3144>>2]|0;
    $188 = (($187) + ($186<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $temp = $189;
    $190 = $fun;
    $191 = (($190) + 12|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $argcount;
    $194 = (($193) - ($192))|0;
    $argcount = $194;
    $k = $194;
    while(1) {
     $195 = $k;
     $196 = (($195) + -1)|0;
     $k = $196;
     $197 = ($195|0)>(0);
     if (!($197)) {
      break;
     }
     $198 = $temp;
     $199 = HEAP32[$198>>2]|0;
     $temp = $199;
    }
    $200 = $temp;
    $201 = (($200) + 12|0);
    HEAP8[$201>>0] = 12;
    $202 = $fun;
    $203 = HEAP32[$202>>2]|0;
    $204 = ($203|0)!=(0|0);
    if ($204) {
     $205 = $fun;
     $206 = HEAP32[$205>>2]|0;
     FUNCTION_TABLE_v[$206 & 255]();
     $207 = $temp;
     $208 = HEAP32[3152>>2]|0;
     $209 = (($208) + -1)|0;
     HEAP32[3152>>2] = $209;
     $210 = HEAP32[3144>>2]|0;
     $211 = (($210) + ($209<<2)|0);
     $212 = HEAP32[$211>>2]|0;
     ;HEAP32[$207+0>>2]=HEAP32[$212+0>>2]|0;HEAP32[$207+4>>2]=HEAP32[$212+4>>2]|0;HEAP32[$207+8>>2]=HEAP32[$212+8>>2]|0;HEAP32[$207+12>>2]=HEAP32[$212+12>>2]|0;
     $213 = $fun;
     $214 = (($213) + 12|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = HEAP32[3152>>2]|0;
     $217 = (($216) - ($215))|0;
     HEAP32[3152>>2] = $217;
    } else {
     $218 = $temp;
     $219 = $fun;
     $220 = (($219) + 4|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = $fun;
     $223 = (($222) + 12|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = HEAP32[3152>>2]|0;
     $226 = (_copyreduce($221,$224,$225)|0);
     ;HEAP32[$218+0>>2]=HEAP32[$226+0>>2]|0;HEAP32[$218+4>>2]=HEAP32[$226+4>>2]|0;HEAP32[$218+8>>2]=HEAP32[$226+8>>2]|0;HEAP32[$218+12>>2]=HEAP32[$226+12>>2]|0;
    }
    break;
   }
   case 28:  {
    $232 = $temp;
    $233 = HEAP32[$232>>2]|0;
    $234 = (($233) + 12|0);
    $235 = HEAP8[$234>>0]|0;
    $236 = $235&255;
    $237 = ($236|0)>(8);
    if ($237) {
     $238 = $temp;
     $239 = HEAP32[$238>>2]|0;
     $240 = (($239) + 12|0);
     $241 = HEAP8[$240>>0]|0;
     $242 = $241&255;
     $243 = ($242|0)<(38);
     if ($243) {
      $244 = $temp;
      $245 = HEAP32[$244>>2]|0;
      $246 = HEAP32[3152>>2]|0;
      $247 = HEAP32[3144>>2]|0;
      $248 = (($247) + ($246<<2)|0);
      HEAP32[$248>>2] = $245;
      $249 = HEAP32[3152>>2]|0;
      $250 = (($249) + 1)|0;
      HEAP32[3152>>2] = $250;
      _eval();
      $251 = HEAP32[3152>>2]|0;
      $252 = (($251) - 1)|0;
      HEAP32[3152>>2] = $252;
     }
    }
    $253 = $temp;
    $254 = (($253) + 8|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = $temp;
    $257 = HEAP32[$256>>2]|0;
    $258 = (_copydirector($255,$257)|0);
    $259 = $temp;
    HEAP32[$259>>2] = $258;
    $260 = $temp;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($261) + 12|0);
    $263 = HEAP8[$262>>0]|0;
    $264 = $263&255;
    $265 = ($264|0)>(8);
    if ($265) {
     $266 = $temp;
     $267 = HEAP32[$266>>2]|0;
     $268 = (($267) + 12|0);
     $269 = HEAP8[$268>>0]|0;
     $270 = $269&255;
     $271 = ($270|0)<(38);
     if ($271) {
      $272 = $temp;
      $273 = HEAP32[$272>>2]|0;
      $274 = HEAP32[3152>>2]|0;
      $275 = HEAP32[3144>>2]|0;
      $276 = (($275) + ($274<<2)|0);
      HEAP32[$276>>2] = $273;
      $277 = HEAP32[3152>>2]|0;
      $278 = (($277) + 1)|0;
      HEAP32[3152>>2] = $278;
      _eval();
      $279 = HEAP32[3152>>2]|0;
      $280 = (($279) - 1)|0;
      HEAP32[3152>>2] = $280;
     }
    }
    $281 = $temp;
    $282 = $temp;
    $283 = HEAP32[$282>>2]|0;
    ;HEAP32[$281+0>>2]=HEAP32[$283+0>>2]|0;HEAP32[$281+4>>2]=HEAP32[$283+4>>2]|0;HEAP32[$281+8>>2]=HEAP32[$283+8>>2]|0;HEAP32[$281+12>>2]=HEAP32[$283+12>>2]|0;
    break;
   }
   case 32:  {
    $228 = $temp;
    $229 = $temp;
    $230 = HEAP32[3152>>2]|0;
    $231 = (_copyreduce($229,0,$230)|0);
    ;HEAP32[$228+0>>2]=HEAP32[$231+0>>2]|0;HEAP32[$228+4>>2]=HEAP32[$231+4>>2]|0;HEAP32[$228+8>>2]=HEAP32[$231+8>>2]|0;HEAP32[$228+12>>2]=HEAP32[$231+12>>2]|0;
    break;
   }
   case 18:  {
    $284 = $temp;
    $285 = HEAP32[$284>>2]|0;
    $286 = $temp;
    $287 = (($286) + 4|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = (_match($285,$288)|0);
    $290 = ($289|0)!=(0);
    if ($290) {
     $291 = $temp;
     $292 = $temp;
     $293 = (($292) + 4|0);
     $294 = HEAP32[$293>>2]|0;
     ;HEAP32[$291+0>>2]=HEAP32[$294+0>>2]|0;HEAP32[$291+4>>2]=HEAP32[$294+4>>2]|0;HEAP32[$291+8>>2]=HEAP32[$294+8>>2]|0;HEAP32[$291+12>>2]=HEAP32[$294+12>>2]|0;
    } else {
     $295 = $temp;
     $296 = (($295) + 12|0);
     HEAP8[$296>>0] = 13;
    }
    break;
   }
   case 12:  {
    _runtimeerror(12,-1);
    label = 57;
    break;
   }
   default: {
    label = 58;
   }
   }
  } while(0);
  if ((label|0) == 57) {
   label = 0;
   $331 = $temp;
   $332 = (($331) + 8|0);
   $333 = HEAP32[$332>>2]|0;
   _runtimeerror(13,$333);
   label = 58;
  }
  if ((label|0) == 58) {
   label = 0;
   _systemerror(11);
  }
 }
 if ((label|0) == 34) {
  $180 = $argcount;
  $181 = HEAP32[3152>>2]|0;
  $182 = (($181) - ($180))|0;
  HEAP32[3152>>2] = $182;
  STACKTOP = sp;return;
 }
 $22 = $argcount;
 $23 = ($22|0)>(0);
 if ($23) {
  $24 = $argcount;
  $25 = HEAP32[3152>>2]|0;
  $26 = (($25) - ($24))|0;
  HEAP32[3152>>2] = $26;
 }
 STACKTOP = sp;return;
}
function _copyreduce($c,$argcount,$bp) {
 $c = $c|0;
 $argcount = $argcount|0;
 $bp = $bp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fun = 0, $k = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $argcount;
 $3 = $bp;
 L1: while(1) {
  $4 = HEAP32[352>>2]|0;
  $5 = (($4) + -1)|0;
  HEAP32[352>>2] = $5;
  $6 = ($4|0)==(0);
  if ($6) {
   label = 4;
  } else {
   $7 = HEAP32[344>>2]|0;
   $8 = ($7|0)!=(0);
   if ($8) {
    label = 4;
   }
  }
  if ((label|0) == 4) {
   label = 0;
   _checkinterrupt();
  }
  $9 = $3;
  HEAP32[3160>>2] = $9;
  $10 = $1;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  switch ($13|0) {
  case 19:  {
   label = 16;
   break L1;
   break;
  }
  case 23:  {
   $14 = $1;
   $15 = HEAP32[$14>>2]|0;
   $16 = $3;
   $17 = (_copyreduce($15,0,$16)|0);
   $temp = $17;
   $18 = $temp;
   $19 = (($18) + 12|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = ($21|0)>(8);
   if ($22) {
    $23 = $temp;
    $24 = (($23) + 12|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = ($26|0)<(38);
    if ($27) {
     $28 = $temp;
     $29 = HEAP32[3152>>2]|0;
     $30 = HEAP32[3144>>2]|0;
     $31 = (($30) + ($29<<2)|0);
     HEAP32[$31>>2] = $28;
     $32 = HEAP32[3152>>2]|0;
     $33 = (($32) + 1)|0;
     HEAP32[3152>>2] = $33;
     _eval();
     $34 = HEAP32[3152>>2]|0;
     $35 = (($34) - 1)|0;
     HEAP32[3152>>2] = $35;
    }
   }
   $36 = $temp;
   $37 = (($36) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)!=(0);
   if ($39) {
    $40 = $1;
    $41 = (($40) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[$42>>2]|0;
    $1 = $43;
   } else {
    $44 = $1;
    $45 = (($44) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $1 = $48;
   }
   break;
  }
  case 18:  {
   label = 13;
   break L1;
   break;
  }
  case 26:  {
   label = 23;
   break L1;
   break;
  }
  case 16:  {
   label = 24;
   break L1;
   break;
  }
  case 25:  {
   label = 22;
   break L1;
   break;
  }
  case 28:  {
   label = 32;
   break L1;
   break;
  }
  case 27:  {
   label = 28;
   break L1;
   break;
  }
  case 32:  {
   $k = 0;
   while(1) {
    $272 = $k;
    $273 = $1;
    $274 = (($273) + 8|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = ($272|0)<($275|0);
    if (!($276)) {
     break;
    }
    $277 = (_newcell(12)|0);
    $278 = HEAP32[3152>>2]|0;
    $279 = HEAP32[3144>>2]|0;
    $280 = (($279) + ($278<<2)|0);
    HEAP32[$280>>2] = $277;
    $281 = HEAP32[3152>>2]|0;
    $282 = (($281) + 1)|0;
    HEAP32[3152>>2] = $282;
    $283 = $k;
    $284 = (($283) + 1)|0;
    $k = $284;
   }
   $285 = $1;
   $286 = (($285) + 8|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = $2;
   $289 = (($288) + ($287))|0;
   $2 = $289;
   $290 = $1;
   $291 = HEAP32[$290>>2]|0;
   $temp = $291;
   $k = 0;
   while(1) {
    $292 = $k;
    $293 = $1;
    $294 = (($293) + 8|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = ($292|0)<($295|0);
    if (!($296)) {
     break;
    }
    _checkmem();
    $297 = HEAP32[3160>>2]|0;
    $298 = $k;
    $299 = (0 - ($298))|0;
    $300 = (($297) - ($299))|0;
    $301 = HEAP32[3144>>2]|0;
    $302 = (($301) + ($300<<2)|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = $temp;
    $305 = HEAP32[$304>>2]|0;
    $306 = (_copystructure($305)|0);
    ;HEAP32[$303+0>>2]=HEAP32[$306+0>>2]|0;HEAP32[$303+4>>2]=HEAP32[$306+4>>2]|0;HEAP32[$303+8>>2]=HEAP32[$306+8>>2]|0;HEAP32[$303+12>>2]=HEAP32[$306+12>>2]|0;
    $307 = $temp;
    $308 = (($307) + 4|0);
    $309 = HEAP32[$308>>2]|0;
    $temp = $309;
    $310 = $k;
    $311 = (($310) + 1)|0;
    $k = $311;
   }
   $312 = $1;
   $313 = (($312) + 4|0);
   $314 = HEAP32[$313>>2]|0;
   $1 = $314;
   break;
  }
  case 24:  {
   $320 = HEAP32[3152>>2]|0;
   $321 = ($320|0)>(19750);
   if ($321) {
    _systemerror(18);
   }
   $322 = HEAP32[2568>>2]|0;
   $323 = $1;
   $324 = (($323) + 8|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (($322) + (($325*52)|0)|0);
   $fun = $326;
   $327 = $fun;
   $328 = (($327) + 12|0);
   $329 = HEAP32[$328>>2]|0;
   $330 = ($329|0)==(0);
   if ($330) {
   } else {
    $331 = $fun;
    $332 = (($331) + 12|0);
    $333 = HEAP32[$332>>2]|0;
    $334 = ($333|0)==(1);
    if ($334) {
     _checkmem();
     $335 = $1;
     $336 = (($335) + 4|0);
     $337 = HEAP32[$336>>2]|0;
     $338 = (_copystructure($337)|0);
     $339 = HEAP32[3152>>2]|0;
     $340 = HEAP32[3144>>2]|0;
     $341 = (($340) + ($339<<2)|0);
     HEAP32[$341>>2] = $338;
     $342 = HEAP32[3152>>2]|0;
     $343 = (($342) + 1)|0;
     HEAP32[3152>>2] = $343;
    } else {
     $344 = $fun;
     $345 = (($344) + 12|0);
     $346 = HEAP32[$345>>2]|0;
     $k = $346;
     while(1) {
      $347 = $k;
      $348 = ($347|0)>(1);
      if (!($348)) {
       break;
      }
      _checkmem();
      $349 = $1;
      $350 = HEAP32[$349>>2]|0;
      $351 = (_copystructure($350)|0);
      $352 = HEAP32[3152>>2]|0;
      $353 = HEAP32[3144>>2]|0;
      $354 = (($353) + ($352<<2)|0);
      HEAP32[$354>>2] = $351;
      $355 = HEAP32[3152>>2]|0;
      $356 = (($355) + 1)|0;
      HEAP32[3152>>2] = $356;
      $357 = $1;
      $358 = (($357) + 4|0);
      $359 = HEAP32[$358>>2]|0;
      $1 = $359;
      $360 = $k;
      $361 = (($360) + -1)|0;
      $k = $361;
     }
     _checkmem();
     $362 = $1;
     $363 = (_copystructure($362)|0);
     $364 = HEAP32[3152>>2]|0;
     $365 = HEAP32[3144>>2]|0;
     $366 = (($365) + ($364<<2)|0);
     HEAP32[$366>>2] = $363;
     $367 = HEAP32[3152>>2]|0;
     $368 = (($367) + 1)|0;
     HEAP32[3152>>2] = $368;
    }
   }
   $369 = $2;
   $370 = ($369|0)>(0);
   if ($370) {
    $371 = $2;
    $372 = $fun;
    $373 = (($372) + 12|0);
    $374 = HEAP32[$373>>2]|0;
    _squeeze($371,$374);
   }
   $375 = $fun;
   $376 = (($375) + 12|0);
   $377 = HEAP32[$376>>2]|0;
   $2 = $377;
   $378 = HEAP32[3152>>2]|0;
   $3 = $378;
   $379 = $fun;
   $380 = HEAP32[$379>>2]|0;
   $381 = ($380|0)!=(0|0);
   if ($381) {
    label = 64;
    break L1;
   }
   $393 = $fun;
   $394 = (($393) + 4|0);
   $395 = HEAP32[$394>>2]|0;
   $1 = $395;
   break;
  }
  case 31:  {
   label = 48;
   break L1;
   break;
  }
  default: {
   label = 66;
   break L1;
  }
  }
 }
 switch (label|0) {
  case 13: {
   $49 = $1;
   $50 = (($49) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $2;
   $53 = $3;
   $54 = (_copyreduce($51,$52,$53)|0);
   $temp = $54;
   $55 = HEAP32[3152>>2]|0;
   $56 = HEAP32[3144>>2]|0;
   $57 = (($56) + ($55<<2)|0);
   HEAP32[$57>>2] = $54;
   $58 = HEAP32[3152>>2]|0;
   $59 = (($58) + 1)|0;
   HEAP32[3152>>2] = $59;
   $60 = $1;
   $61 = HEAP32[$60>>2]|0;
   $62 = $temp;
   $63 = (_match($61,$62)|0);
   $64 = ($63|0)!=(0);
   if (!($64)) {
    $65 = (_newcell(13)|0);
    $temp = $65;
    $66 = $1;
    $67 = (($66) + 8|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $temp;
    $70 = (($69) + 8|0);
    HEAP32[$70>>2] = $68;
   }
   $71 = HEAP32[3152>>2]|0;
   $72 = (($71) - 1)|0;
   HEAP32[3152>>2] = $72;
   $73 = $temp;
   $0 = $73;
   $407 = $0;
   STACKTOP = sp;return ($407|0);
   break;
  }
  case 16: {
   while(1) {
    $74 = $1;
    $75 = HEAP32[$74>>2]|0;
    $76 = HEAP32[3160>>2]|0;
    $77 = $1;
    $78 = (($77) + 8|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (($76) - ($79))|0;
    $81 = HEAP32[3144>>2]|0;
    $82 = (($81) + ($80<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (_match($75,$83)|0);
    $85 = ($84|0)!=(0);
    if (!($85)) {
     label = 18;
     break;
    }
    $90 = $1;
    $91 = (($90) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $1 = $92;
    $93 = $3;
    HEAP32[3160>>2] = $93;
    $94 = $1;
    $95 = ($94|0)!=(0|0);
    if (!($95)) {
     label = 21;
     break;
    }
   }
   if ((label|0) == 18) {
    $86 = $2;
    $87 = HEAP32[3152>>2]|0;
    $88 = (($87) - ($86))|0;
    HEAP32[3152>>2] = $88;
    $89 = HEAP32[2952>>2]|0;
    $0 = $89;
    $407 = $0;
    STACKTOP = sp;return ($407|0);
   }
   else if ((label|0) == 21) {
    $96 = $2;
    $97 = HEAP32[3152>>2]|0;
    $98 = (($97) - ($96))|0;
    HEAP32[3152>>2] = $98;
    $99 = HEAP32[2944>>2]|0;
    $0 = $99;
    $407 = $0;
    STACKTOP = sp;return ($407|0);
   }
   break;
  }
  case 22: {
   $100 = $1;
   $101 = HEAP32[$100>>2]|0;
   $102 = $3;
   $103 = (_copyreduce($101,0,$102)|0);
   $104 = HEAP32[3152>>2]|0;
   $105 = HEAP32[3144>>2]|0;
   $106 = (($105) + ($104<<2)|0);
   HEAP32[$106>>2] = $103;
   $107 = HEAP32[3152>>2]|0;
   $108 = (($107) + 1)|0;
   HEAP32[3152>>2] = $108;
   $109 = HEAP32[2568>>2]|0;
   $110 = $1;
   $111 = (($110) + 8|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($109) + (($112*52)|0)|0);
   $114 = HEAP32[$113>>2]|0;
   FUNCTION_TABLE_v[$114 & 255]();
   $115 = HEAP32[3152>>2]|0;
   $116 = (($115) + -1)|0;
   HEAP32[3152>>2] = $116;
   $117 = HEAP32[3144>>2]|0;
   $118 = (($117) + ($116<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $temp = $119;
   $120 = $2;
   $121 = (1 + ($120))|0;
   $122 = HEAP32[3152>>2]|0;
   $123 = (($122) - ($121))|0;
   HEAP32[3152>>2] = $123;
   $124 = $temp;
   $0 = $124;
   $407 = $0;
   STACKTOP = sp;return ($407|0);
   break;
  }
  case 23: {
   $125 = $1;
   $126 = (($125) + 4|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $3;
   $129 = (_copyreduce($127,0,$128)|0);
   $130 = HEAP32[3152>>2]|0;
   $131 = HEAP32[3144>>2]|0;
   $132 = (($131) + ($130<<2)|0);
   HEAP32[$132>>2] = $129;
   $133 = HEAP32[3152>>2]|0;
   $134 = (($133) + 1)|0;
   HEAP32[3152>>2] = $134;
   $135 = $1;
   $136 = HEAP32[$135>>2]|0;
   $137 = $3;
   $138 = (_copyreduce($136,0,$137)|0);
   $139 = HEAP32[3152>>2]|0;
   $140 = HEAP32[3144>>2]|0;
   $141 = (($140) + ($139<<2)|0);
   HEAP32[$141>>2] = $138;
   $142 = HEAP32[3152>>2]|0;
   $143 = (($142) + 1)|0;
   HEAP32[3152>>2] = $143;
   $144 = HEAP32[2568>>2]|0;
   $145 = $1;
   $146 = (($145) + 8|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (($144) + (($147*52)|0)|0);
   $149 = HEAP32[$148>>2]|0;
   FUNCTION_TABLE_v[$149 & 255]();
   $150 = HEAP32[3152>>2]|0;
   $151 = (($150) + -1)|0;
   HEAP32[3152>>2] = $151;
   $152 = HEAP32[3144>>2]|0;
   $153 = (($152) + ($151<<2)|0);
   $154 = HEAP32[$153>>2]|0;
   $temp = $154;
   $155 = $2;
   $156 = (2 + ($155))|0;
   $157 = HEAP32[3152>>2]|0;
   $158 = (($157) - ($156))|0;
   HEAP32[3152>>2] = $158;
   $159 = $temp;
   $0 = $159;
   $407 = $0;
   STACKTOP = sp;return ($407|0);
   break;
  }
  case 24: {
   $160 = HEAP32[3160>>2]|0;
   $161 = $1;
   $162 = (($161) + 8|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($160) - ($163))|0;
   $165 = HEAP32[3144>>2]|0;
   $166 = (($165) + ($164<<2)|0);
   $167 = HEAP32[$166>>2]|0;
   $temp = $167;
   $168 = $temp;
   $169 = (($168) + 12|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = ($171|0)>(8);
   if ($172) {
    $173 = $temp;
    $174 = (($173) + 12|0);
    $175 = HEAP8[$174>>0]|0;
    $176 = $175&255;
    $177 = ($176|0)<(38);
    if ($177) {
     $178 = $temp;
     $179 = HEAP32[3152>>2]|0;
     $180 = HEAP32[3144>>2]|0;
     $181 = (($180) + ($179<<2)|0);
     HEAP32[$181>>2] = $178;
     $182 = HEAP32[3152>>2]|0;
     $183 = (($182) + 1)|0;
     HEAP32[3152>>2] = $183;
     _eval();
     $184 = HEAP32[3152>>2]|0;
     $185 = (($184) - 1)|0;
     HEAP32[3152>>2] = $185;
    }
   }
   $186 = $2;
   $187 = HEAP32[3152>>2]|0;
   $188 = (($187) - ($186))|0;
   HEAP32[3152>>2] = $188;
   $189 = $temp;
   $0 = $189;
   $407 = $0;
   STACKTOP = sp;return ($407|0);
   break;
  }
  case 28: {
   $190 = $1;
   $191 = (($190) + 8|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = HEAP32[3160>>2]|0;
   $194 = $1;
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + 8|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = (($193) - ($197))|0;
   $199 = HEAP32[3144>>2]|0;
   $200 = (($199) + ($198<<2)|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = (_copydirector($192,$201)|0);
   $temp = $202;
   $203 = $temp;
   $204 = (($203) + 12|0);
   $205 = HEAP8[$204>>0]|0;
   $206 = $205&255;
   $207 = ($206|0)>(8);
   if ($207) {
    $208 = $temp;
    $209 = (($208) + 12|0);
    $210 = HEAP8[$209>>0]|0;
    $211 = $210&255;
    $212 = ($211|0)<(38);
    if ($212) {
     $213 = $temp;
     $214 = HEAP32[3152>>2]|0;
     $215 = HEAP32[3144>>2]|0;
     $216 = (($215) + ($214<<2)|0);
     HEAP32[$216>>2] = $213;
     $217 = HEAP32[3152>>2]|0;
     $218 = (($217) + 1)|0;
     HEAP32[3152>>2] = $218;
     _eval();
     $219 = HEAP32[3152>>2]|0;
     $220 = (($219) - 1)|0;
     HEAP32[3152>>2] = $220;
    }
   }
   $221 = $2;
   $222 = HEAP32[3152>>2]|0;
   $223 = (($222) - ($221))|0;
   HEAP32[3152>>2] = $223;
   $224 = $temp;
   $0 = $224;
   $407 = $0;
   STACKTOP = sp;return ($407|0);
   break;
  }
  case 32: {
   $225 = $1;
   $226 = HEAP32[$225>>2]|0;
   $227 = $2;
   $228 = $3;
   $229 = (_copyreduce($226,$227,$228)|0);
   $temp = $229;
   $230 = $temp;
   $231 = (($230) + 12|0);
   $232 = HEAP8[$231>>0]|0;
   $233 = $232&255;
   $234 = ($233|0)>(8);
   if ($234) {
    $235 = $temp;
    $236 = (($235) + 12|0);
    $237 = HEAP8[$236>>0]|0;
    $238 = $237&255;
    $239 = ($238|0)<(38);
    if ($239) {
     $240 = $temp;
     $241 = HEAP32[3152>>2]|0;
     $242 = HEAP32[3144>>2]|0;
     $243 = (($242) + ($241<<2)|0);
     HEAP32[$243>>2] = $240;
     $244 = HEAP32[3152>>2]|0;
     $245 = (($244) + 1)|0;
     HEAP32[3152>>2] = $245;
     _eval();
     $246 = HEAP32[3152>>2]|0;
     $247 = (($246) - 1)|0;
     HEAP32[3152>>2] = $247;
    }
   }
   $248 = $1;
   $249 = (($248) + 8|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = $temp;
   $252 = (_copydirector($250,$251)|0);
   $temp = $252;
   $253 = $temp;
   $254 = (($253) + 12|0);
   $255 = HEAP8[$254>>0]|0;
   $256 = $255&255;
   $257 = ($256|0)>(8);
   if ($257) {
    $258 = $temp;
    $259 = (($258) + 12|0);
    $260 = HEAP8[$259>>0]|0;
    $261 = $260&255;
    $262 = ($261|0)<(38);
    if ($262) {
     $263 = $temp;
     $264 = HEAP32[3152>>2]|0;
     $265 = HEAP32[3144>>2]|0;
     $266 = (($265) + ($264<<2)|0);
     HEAP32[$266>>2] = $263;
     $267 = HEAP32[3152>>2]|0;
     $268 = (($267) + 1)|0;
     HEAP32[3152>>2] = $268;
     _eval();
     $269 = HEAP32[3152>>2]|0;
     $270 = (($269) - 1)|0;
     HEAP32[3152>>2] = $270;
    }
   }
   $271 = $temp;
   $0 = $271;
   $407 = $0;
   STACKTOP = sp;return ($407|0);
   break;
  }
  case 48: {
   $315 = $2;
   $316 = HEAP32[3152>>2]|0;
   $317 = (($316) - ($315))|0;
   HEAP32[3152>>2] = $317;
   $318 = $1;
   $319 = HEAP32[$318>>2]|0;
   $0 = $319;
   $407 = $0;
   STACKTOP = sp;return ($407|0);
   break;
  }
  case 64: {
   $382 = $fun;
   $383 = HEAP32[$382>>2]|0;
   FUNCTION_TABLE_v[$383 & 255]();
   $384 = HEAP32[3152>>2]|0;
   $385 = (($384) + -1)|0;
   HEAP32[3152>>2] = $385;
   $386 = HEAP32[3144>>2]|0;
   $387 = (($386) + ($385<<2)|0);
   $388 = HEAP32[$387>>2]|0;
   $temp = $388;
   $389 = $2;
   $390 = HEAP32[3152>>2]|0;
   $391 = (($390) - ($389))|0;
   HEAP32[3152>>2] = $391;
   $392 = $temp;
   $0 = $392;
   $407 = $0;
   STACKTOP = sp;return ($407|0);
   break;
  }
  case 66: {
   $396 = $1;
   $397 = (($396) + 12|0);
   $398 = HEAP8[$397>>0]|0;
   $399 = $398&255;
   $400 = ($399|0)>(17);
   if ($400) {
    _checkmem();
    $401 = $1;
    $402 = (_copystructure($401)|0);
    $1 = $402;
   }
   $403 = $2;
   $404 = HEAP32[3152>>2]|0;
   $405 = (($404) - ($403))|0;
   HEAP32[3152>>2] = $405;
   $406 = $1;
   $0 = $406;
   $407 = $0;
   STACKTOP = sp;return ($407|0);
   break;
  }
 }
 return (0)|0;
}
function _evalset($set) {
 $set = $set|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $argcount = 0, $cond = 0, $fun = 0, $function = 0, $generatorcount = 0, $generators = 0, $k = 0, $l = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $set;
 while(1) {
  $1 = $0;
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $fun = $3;
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $cond = $8;
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $generators = $14;
  $15 = $0;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $generatorcount = $17;
  $18 = $cond;
  $19 = ($18|0)!=(0|0);
  do {
   if ($19) {
    $k = 1;
    while(1) {
     $20 = $k;
     $21 = $generatorcount;
     $22 = ($20|0)<=($21|0);
     if (!($22)) {
      break;
     }
     $23 = HEAP32[3152>>2]|0;
     $24 = HEAP32[3144>>2]|0;
     $25 = (($24) + ($23<<2)|0);
     HEAP32[$25>>2] = 0;
     $26 = HEAP32[3152>>2]|0;
     $27 = (($26) + 1)|0;
     HEAP32[3152>>2] = $27;
     $28 = $k;
     $29 = (($28) + 1)|0;
     $k = $29;
    }
    $argcount = 0;
    $30 = $cond;
    $temp = $30;
    while(1) {
     $31 = $temp;
     $32 = (($31) + 12|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $35 = ($34|0)==(22);
     if (!($35)) {
      break;
     }
     $36 = $temp;
     $37 = (($36) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = HEAP32[3152>>2]|0;
     $40 = HEAP32[3144>>2]|0;
     $41 = (($40) + ($39<<2)|0);
     HEAP32[$41>>2] = $38;
     $42 = HEAP32[3152>>2]|0;
     $43 = (($42) + 1)|0;
     HEAP32[3152>>2] = $43;
     $44 = $argcount;
     $45 = (($44) + 1)|0;
     $argcount = $45;
     $46 = $temp;
     $47 = HEAP32[$46>>2]|0;
     $temp = $47;
    }
    $48 = HEAP32[2568>>2]|0;
    $49 = $temp;
    $50 = (($49) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($48) + (($51*52)|0)|0);
    $function = $52;
    L14: while(1) {
     $53 = $generators;
     $l = $53;
     $k = 1;
     while(1) {
      $54 = $k;
      $55 = $generatorcount;
      $56 = ($54|0)<=($55|0);
      if (!($56)) {
       break;
      }
      $57 = $l;
      $58 = HEAP32[$57>>2]|0;
      $59 = (($58) + 12|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = $60&255;
      $62 = ($61|0)>(8);
      if ($62) {
       $63 = $l;
       $64 = HEAP32[$63>>2]|0;
       $65 = (($64) + 12|0);
       $66 = HEAP8[$65>>0]|0;
       $67 = $66&255;
       $68 = ($67|0)<(38);
       if ($68) {
        $69 = $l;
        $70 = HEAP32[$69>>2]|0;
        $71 = HEAP32[3152>>2]|0;
        $72 = HEAP32[3144>>2]|0;
        $73 = (($72) + ($71<<2)|0);
        HEAP32[$73>>2] = $70;
        $74 = HEAP32[3152>>2]|0;
        $75 = (($74) + 1)|0;
        HEAP32[3152>>2] = $75;
        _eval();
        $76 = HEAP32[3152>>2]|0;
        $77 = (($76) - 1)|0;
        HEAP32[3152>>2] = $77;
       }
      }
      $78 = $l;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($79) + 12|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = $81&255;
      $83 = ($82|0)!=(39);
      if ($83) {
       label = 17;
       break L14;
      }
      $89 = $l;
      $90 = HEAP32[$89>>2]|0;
      $91 = HEAP32[$90>>2]|0;
      $92 = HEAP32[3152>>2]|0;
      $93 = $argcount;
      $94 = $k;
      $95 = (($93) + ($94))|0;
      $96 = (($92) - ($95))|0;
      $97 = HEAP32[3144>>2]|0;
      $98 = (($97) + ($96<<2)|0);
      HEAP32[$98>>2] = $91;
      $99 = $l;
      $100 = (($99) + 4|0);
      $101 = HEAP32[$100>>2]|0;
      $l = $101;
      $102 = $k;
      $103 = (($102) + 1)|0;
      $k = $103;
     }
     $104 = $function;
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105|0)!=(0|0);
     if ($106) {
      $107 = $function;
      $108 = HEAP32[$107>>2]|0;
      FUNCTION_TABLE_v[$108 & 255]();
      $109 = HEAP32[3152>>2]|0;
      $110 = (($109) + -1)|0;
      HEAP32[3152>>2] = $110;
      $111 = HEAP32[3144>>2]|0;
      $112 = (($111) + ($110<<2)|0);
      $113 = HEAP32[$112>>2]|0;
      $temp = $113;
     } else {
      $114 = $function;
      $115 = (($114) + 4|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = HEAP32[3152>>2]|0;
      $118 = (_copyreduce($116,0,$117)|0);
      $temp = $118;
     }
     $119 = $temp;
     $120 = (($119) + 12|0);
     $121 = HEAP8[$120>>0]|0;
     $122 = $121&255;
     $123 = ($122|0)>(8);
     if ($123) {
      $124 = $temp;
      $125 = (($124) + 12|0);
      $126 = HEAP8[$125>>0]|0;
      $127 = $126&255;
      $128 = ($127|0)<(38);
      if ($128) {
       $129 = $temp;
       $130 = HEAP32[3152>>2]|0;
       $131 = HEAP32[3144>>2]|0;
       $132 = (($131) + ($130<<2)|0);
       HEAP32[$132>>2] = $129;
       $133 = HEAP32[3152>>2]|0;
       $134 = (($133) + 1)|0;
       HEAP32[3152>>2] = $134;
       _eval();
       $135 = HEAP32[3152>>2]|0;
       $136 = (($135) - 1)|0;
       HEAP32[3152>>2] = $136;
      }
     }
     $137 = $temp;
     $138 = (($137) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = ($139|0)!=(0);
     if ($140) {
      label = 27;
      break;
     }
     $146 = $generators;
     $l = $146;
     $k = 1;
     while(1) {
      $147 = $k;
      $148 = $generatorcount;
      $149 = ($147|0)<=($148|0);
      if (!($149)) {
       break;
      }
      $150 = $l;
      $151 = HEAP32[$150>>2]|0;
      $152 = (($151) + 4|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = $l;
      HEAP32[$154>>2] = $153;
      $155 = $l;
      $156 = (($155) + 4|0);
      $157 = HEAP32[$156>>2]|0;
      $l = $157;
      $158 = $k;
      $159 = (($158) + 1)|0;
      $k = $159;
     }
    }
    if ((label|0) == 17) {
     label = 0;
     $84 = $argcount;
     $85 = $generatorcount;
     $86 = (($84) + ($85))|0;
     $87 = HEAP32[3152>>2]|0;
     $88 = (($87) - ($86))|0;
     HEAP32[3152>>2] = $88;
     label = 43;
     break;
    }
    else if ((label|0) == 27) {
     label = 0;
     $141 = $argcount;
     $142 = $generatorcount;
     $143 = (($141) + ($142))|0;
     $144 = HEAP32[3152>>2]|0;
     $145 = (($144) - ($143))|0;
     HEAP32[3152>>2] = $145;
     break;
    }
   } else {
    $160 = $generators;
    $l = $160;
    $k = 1;
    while(1) {
     $161 = $k;
     $162 = $generatorcount;
     $163 = ($161|0)<=($162|0);
     if (!($163)) {
      label = 42;
      break;
     }
     $164 = $l;
     $165 = HEAP32[$164>>2]|0;
     $166 = (($165) + 12|0);
     $167 = HEAP8[$166>>0]|0;
     $168 = $167&255;
     $169 = ($168|0)>(8);
     if ($169) {
      $170 = $l;
      $171 = HEAP32[$170>>2]|0;
      $172 = (($171) + 12|0);
      $173 = HEAP8[$172>>0]|0;
      $174 = $173&255;
      $175 = ($174|0)<(38);
      if ($175) {
       $176 = $l;
       $177 = HEAP32[$176>>2]|0;
       $178 = HEAP32[3152>>2]|0;
       $179 = HEAP32[3144>>2]|0;
       $180 = (($179) + ($178<<2)|0);
       HEAP32[$180>>2] = $177;
       $181 = HEAP32[3152>>2]|0;
       $182 = (($181) + 1)|0;
       HEAP32[3152>>2] = $182;
       _eval();
       $183 = HEAP32[3152>>2]|0;
       $184 = (($183) - 1)|0;
       HEAP32[3152>>2] = $184;
      }
     }
     $185 = $l;
     $186 = HEAP32[$185>>2]|0;
     $187 = (($186) + 12|0);
     $188 = HEAP8[$187>>0]|0;
     $189 = $188&255;
     $190 = ($189|0)!=(39);
     if ($190) {
      label = 39;
      break;
     }
     $191 = $l;
     $192 = (($191) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     $l = $193;
     $194 = $k;
     $195 = (($194) + 1)|0;
     $k = $195;
    }
    if ((label|0) == 39) {
     label = 0;
     label = 43;
     break;
    }
    else if ((label|0) == 42) {
     label = 0;
     break;
    }
   }
  } while(0);
  if ((label|0) == 43) {
   label = 0;
   $196 = $0;
   $197 = $0;
   $198 = (($197) + 4|0);
   $199 = HEAP32[$198>>2]|0;
   ;HEAP32[$196+0>>2]=HEAP32[$199+0>>2]|0;HEAP32[$196+4>>2]=HEAP32[$199+4>>2]|0;HEAP32[$196+8>>2]=HEAP32[$199+8>>2]|0;HEAP32[$196+12>>2]=HEAP32[$199+12>>2]|0;
   $200 = $0;
   $201 = (($200) + 12|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $202&255;
   $204 = ($203|0)==(6);
   if ($204) {
    label = 44;
    break;
   }
   continue;
  }
  $205 = $0;
  $206 = (($205) + 12|0);
  $207 = HEAP8[$206>>0]|0;
  $208 = $207&255;
  $209 = ($208|0)==(29);
  if ($209) {
   break;
  }
  $256 = (_newcell(30)|0);
  $temp = $256;
  $257 = $temp;
  $258 = $0;
  ;HEAP32[$257+0>>2]=HEAP32[$258+0>>2]|0;HEAP32[$257+4>>2]=HEAP32[$258+4>>2]|0;HEAP32[$257+8>>2]=HEAP32[$258+8>>2]|0;HEAP32[$257+12>>2]=HEAP32[$258+12>>2]|0;
  $259 = $temp;
  $260 = $0;
  $261 = (($260) + 4|0);
  HEAP32[$261>>2] = $259;
  $262 = HEAP32[3152>>2]|0;
  $263 = $generatorcount;
  $264 = (($262) + ($263))|0;
  HEAP32[3152>>2] = $264;
  $265 = $generators;
  $l = $265;
  $k = 1;
  while(1) {
   $266 = $k;
   $267 = $generatorcount;
   $268 = ($266|0)<=($267|0);
   if (!($268)) {
    break;
   }
   $269 = $l;
   $270 = HEAP32[$269>>2]|0;
   $271 = HEAP32[$270>>2]|0;
   $272 = HEAP32[3152>>2]|0;
   $273 = $k;
   $274 = (($272) - ($273))|0;
   $275 = HEAP32[3144>>2]|0;
   $276 = (($275) + ($274<<2)|0);
   HEAP32[$276>>2] = $271;
   $277 = $l;
   $278 = HEAP32[$277>>2]|0;
   $279 = (($278) + 4|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = $l;
   HEAP32[$281>>2] = $280;
   $282 = $l;
   $283 = (($282) + 4|0);
   $284 = HEAP32[$283>>2]|0;
   $l = $284;
   $285 = $k;
   $286 = (($285) + 1)|0;
   $k = $286;
  }
  $argcount = 0;
  $287 = $fun;
  $temp = $287;
  while(1) {
   $288 = $temp;
   $289 = (($288) + 12|0);
   $290 = HEAP8[$289>>0]|0;
   $291 = $290&255;
   $292 = ($291|0)==(22);
   if (!($292)) {
    break;
   }
   $293 = $temp;
   $294 = (($293) + 4|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = HEAP32[3152>>2]|0;
   $297 = HEAP32[3144>>2]|0;
   $298 = (($297) + ($296<<2)|0);
   HEAP32[$298>>2] = $295;
   $299 = HEAP32[3152>>2]|0;
   $300 = (($299) + 1)|0;
   HEAP32[3152>>2] = $300;
   $301 = $argcount;
   $302 = (($301) + 1)|0;
   $argcount = $302;
   $303 = $temp;
   $304 = HEAP32[$303>>2]|0;
   $temp = $304;
  }
  $305 = HEAP32[2568>>2]|0;
  $306 = $temp;
  $307 = (($306) + 8|0);
  $308 = HEAP32[$307>>2]|0;
  $309 = (($305) + (($308*52)|0)|0);
  $function = $309;
  $310 = $function;
  $311 = HEAP32[$310>>2]|0;
  $312 = ($311|0)!=(0|0);
  if ($312) {
   $313 = $function;
   $314 = HEAP32[$313>>2]|0;
   FUNCTION_TABLE_v[$314 & 255]();
   $315 = HEAP32[3152>>2]|0;
   $316 = (($315) + -1)|0;
   HEAP32[3152>>2] = $316;
   $317 = HEAP32[3144>>2]|0;
   $318 = (($317) + ($316<<2)|0);
   $319 = HEAP32[$318>>2]|0;
   $temp = $319;
  } else {
   $320 = HEAP32[3152>>2]|0;
   HEAP32[3160>>2] = $320;
   _checkmem();
   $321 = $function;
   $322 = (($321) + 4|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = (_copystructure($323)|0);
   $temp = $324;
  }
  $325 = $temp;
  $326 = (($325) + 12|0);
  $327 = HEAP8[$326>>0]|0;
  $328 = $0;
  $329 = (($328) + 12|0);
  HEAP8[$329>>0] = $327;
  $330 = $temp;
  $331 = (($330) + 8|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = $0;
  $334 = (($333) + 8|0);
  HEAP32[$334>>2] = $332;
  $335 = $temp;
  $336 = HEAP32[$335>>2]|0;
  $337 = $0;
  HEAP32[$337>>2] = $336;
  $338 = $argcount;
  $339 = $generatorcount;
  $340 = (($338) + ($339))|0;
  $341 = HEAP32[3152>>2]|0;
  $342 = (($341) - ($340))|0;
  HEAP32[3152>>2] = $342;
 }
 if ((label|0) == 44) {
  STACKTOP = sp;return;
 }
 $210 = (_newcell(29)|0);
 $temp = $210;
 $211 = $temp;
 $212 = $0;
 ;HEAP32[$211+0>>2]=HEAP32[$212+0>>2]|0;HEAP32[$211+4>>2]=HEAP32[$212+4>>2]|0;HEAP32[$211+8>>2]=HEAP32[$212+8>>2]|0;HEAP32[$211+12>>2]=HEAP32[$212+12>>2]|0;
 $213 = $temp;
 $214 = $0;
 $215 = (($214) + 4|0);
 HEAP32[$215>>2] = $213;
 $216 = $0;
 $217 = (($216) + 12|0);
 HEAP8[$217>>0] = 39;
 $218 = $fun;
 $219 = ($218|0)!=(0|0);
 if ($219) {
  $220 = $fun;
  $221 = $0;
  HEAP32[$221>>2] = $220;
  $222 = $generators;
  $l = $222;
  $k = 1;
  while(1) {
   $223 = $k;
   $224 = $generatorcount;
   $225 = ($223|0)<=($224|0);
   if (!($225)) {
    break;
   }
   $226 = (_newcell(22)|0);
   $temp = $226;
   $227 = $0;
   $228 = HEAP32[$227>>2]|0;
   $229 = $temp;
   HEAP32[$229>>2] = $228;
   $230 = $l;
   $231 = HEAP32[$230>>2]|0;
   $232 = HEAP32[$231>>2]|0;
   $233 = $temp;
   $234 = (($233) + 4|0);
   HEAP32[$234>>2] = $232;
   $235 = $temp;
   $236 = $0;
   HEAP32[$236>>2] = $235;
   $237 = $l;
   $238 = HEAP32[$237>>2]|0;
   $239 = (($238) + 4|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = $l;
   HEAP32[$241>>2] = $240;
   $242 = $l;
   $243 = (($242) + 4|0);
   $244 = HEAP32[$243>>2]|0;
   $l = $244;
   $245 = $k;
   $246 = (($245) + 1)|0;
   $k = $246;
  }
 } else {
  $247 = $generators;
  $248 = HEAP32[$247>>2]|0;
  $249 = HEAP32[$248>>2]|0;
  $250 = $0;
  HEAP32[$250>>2] = $249;
  $251 = $generators;
  $252 = HEAP32[$251>>2]|0;
  $253 = (($252) + 4|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $generators;
  HEAP32[$255>>2] = $254;
 }
 STACKTOP = sp;return;
}
function _copystructure($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $left = 0, $right = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $171 = $0;
  STACKTOP = sp;return ($171|0);
 }
 $4 = $1;
 $5 = (($4) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)<(15);
 if ($8) {
  $9 = $1;
  $0 = $9;
  $171 = $0;
  STACKTOP = sp;return ($171|0);
 }
 $10 = $1;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 switch ($13|0) {
 case 31:  {
  $22 = $1;
  $23 = HEAP32[$22>>2]|0;
  $0 = $23;
  $171 = $0;
  STACKTOP = sp;return ($171|0);
  break;
 }
 case 18:  {
  $37 = (_newcell(18)|0);
  $temp = $37;
  $38 = $1;
  $39 = (($38) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $temp;
  $42 = (($41) + 8|0);
  HEAP32[$42>>2] = $40;
  $43 = $1;
  $44 = HEAP32[$43>>2]|0;
  $45 = $temp;
  HEAP32[$45>>2] = $44;
  $46 = $1;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (_copystructure($48)|0);
  $50 = $temp;
  $51 = (($50) + 4|0);
  HEAP32[$51>>2] = $49;
  $52 = $temp;
  $0 = $52;
  $171 = $0;
  STACKTOP = sp;return ($171|0);
  break;
 }
 case 16:  {
  $14 = HEAP32[3160>>2]|0;
  $15 = $1;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($14) - ($17))|0;
  $19 = HEAP32[3144>>2]|0;
  $20 = (($19) + ($18<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $0 = $21;
  $171 = $0;
  STACKTOP = sp;return ($171|0);
  break;
 }
 case 27:  {
  $24 = $1;
  $25 = (($24) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[3160>>2]|0;
  $28 = $1;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($27) - ($31))|0;
  $33 = HEAP32[3144>>2]|0;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (_copydirector($26,$35)|0);
  $0 = $36;
  $171 = $0;
  STACKTOP = sp;return ($171|0);
  break;
 }
 case 26:  {
  $90 = $1;
  $91 = HEAP32[$90>>2]|0;
  $92 = (_copystructure($91)|0);
  $left = $92;
  $93 = $1;
  $94 = (($93) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (_copystructure($95)|0);
  $right = $96;
  $97 = $left;
  $98 = (($97) + 12|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = ($100|0)<(8);
  if ($101) {
   $102 = $right;
   $103 = (($102) + 12|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104&255;
   $106 = ($105|0)<(8);
   if ($106) {
    $107 = $right;
    $108 = HEAP32[3152>>2]|0;
    $109 = HEAP32[3144>>2]|0;
    $110 = (($109) + ($108<<2)|0);
    HEAP32[$110>>2] = $107;
    $111 = HEAP32[3152>>2]|0;
    $112 = (($111) + 1)|0;
    HEAP32[3152>>2] = $112;
    $113 = $left;
    $114 = HEAP32[3152>>2]|0;
    $115 = HEAP32[3144>>2]|0;
    $116 = (($115) + ($114<<2)|0);
    HEAP32[$116>>2] = $113;
    $117 = HEAP32[3152>>2]|0;
    $118 = (($117) + 1)|0;
    HEAP32[3152>>2] = $118;
    $119 = HEAP32[2568>>2]|0;
    $120 = $1;
    $121 = (($120) + 8|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($119) + (($122*52)|0)|0);
    $124 = HEAP32[$123>>2]|0;
    FUNCTION_TABLE_v[$124 & 255]();
    $125 = HEAP32[3152>>2]|0;
    $126 = (($125) + -1)|0;
    HEAP32[3152>>2] = $126;
    $127 = HEAP32[3144>>2]|0;
    $128 = (($127) + ($126<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $temp = $129;
    $130 = HEAP32[3152>>2]|0;
    $131 = (($130) - 2)|0;
    HEAP32[3152>>2] = $131;
    $132 = $temp;
    $0 = $132;
    $171 = $0;
    STACKTOP = sp;return ($171|0);
   }
  }
  $133 = (_newcell(26)|0);
  $temp = $133;
  $134 = $1;
  $135 = (($134) + 8|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $temp;
  $138 = (($137) + 8|0);
  HEAP32[$138>>2] = $136;
  $139 = $left;
  $140 = $temp;
  HEAP32[$140>>2] = $139;
  $141 = $right;
  $142 = $temp;
  $143 = (($142) + 4|0);
  HEAP32[$143>>2] = $141;
  $144 = $temp;
  $0 = $144;
  $171 = $0;
  STACKTOP = sp;return ($171|0);
  break;
 }
 case 25:  {
  $53 = $1;
  $54 = HEAP32[$53>>2]|0;
  $55 = (_copystructure($54)|0);
  $left = $55;
  $56 = $left;
  $57 = (($56) + 12|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = ($59|0)<(8);
  if ($60) {
   $61 = $left;
   $62 = HEAP32[3152>>2]|0;
   $63 = HEAP32[3144>>2]|0;
   $64 = (($63) + ($62<<2)|0);
   HEAP32[$64>>2] = $61;
   $65 = HEAP32[3152>>2]|0;
   $66 = (($65) + 1)|0;
   HEAP32[3152>>2] = $66;
   $67 = HEAP32[2568>>2]|0;
   $68 = $1;
   $69 = (($68) + 8|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($67) + (($70*52)|0)|0);
   $72 = HEAP32[$71>>2]|0;
   FUNCTION_TABLE_v[$72 & 255]();
   $73 = HEAP32[3152>>2]|0;
   $74 = (($73) + -1)|0;
   HEAP32[3152>>2] = $74;
   $75 = HEAP32[3144>>2]|0;
   $76 = (($75) + ($74<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $temp = $77;
   $78 = HEAP32[3152>>2]|0;
   $79 = (($78) - 1)|0;
   HEAP32[3152>>2] = $79;
   $80 = $temp;
   $0 = $80;
   $171 = $0;
   STACKTOP = sp;return ($171|0);
  } else {
   $81 = (_newcell(25)|0);
   $temp = $81;
   $82 = $1;
   $83 = (($82) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $temp;
   $86 = (($85) + 8|0);
   HEAP32[$86>>2] = $84;
   $87 = $left;
   $88 = $temp;
   HEAP32[$88>>2] = $87;
   $89 = $temp;
   $0 = $89;
   $171 = $0;
   STACKTOP = sp;return ($171|0);
  }
  break;
 }
 default: {
  $145 = $1;
  $146 = (($145) + 12|0);
  $147 = HEAP8[$146>>0]|0;
  $148 = $147&255;
  $149 = ($148|0)>(17);
  if ($149) {
   $150 = $1;
   $151 = (($150) + 12|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = (_newcell($152)|0);
   $temp = $153;
   $154 = $1;
   $155 = (($154) + 8|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = $temp;
   $158 = (($157) + 8|0);
   HEAP32[$158>>2] = $156;
   $159 = $1;
   $160 = HEAP32[$159>>2]|0;
   $161 = (_copystructure($160)|0);
   $162 = $temp;
   HEAP32[$162>>2] = $161;
   $163 = $1;
   $164 = (($163) + 4|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (_copystructure($165)|0);
   $167 = $temp;
   $168 = (($167) + 4|0);
   HEAP32[$168>>2] = $166;
   $169 = $temp;
   $0 = $169;
   $171 = $0;
   STACKTOP = sp;return ($171|0);
  } else {
   $170 = $1;
   $0 = $170;
   $171 = $0;
   STACKTOP = sp;return ($171|0);
  }
 }
 }
 return (0)|0;
}
function _WriteString($string) {
 $string = $string|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $1 = $0;
 $2 = HEAP32[_stdout>>2]|0;
 (_fputs(($1|0),($2|0))|0);
 $3 = HEAP32[_stdout>>2]|0;
 (_fflush(($3|0))|0);
 STACKTOP = sp;return;
}
function _CheckIO() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _GraphDisplay() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $multiLine = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 $multiLine = 0;
 $node = 0;
 _initgetstring();
 $3 = $1;
 $4 = ($3|0)>(1);
 if ($4) {
  $5 = $2;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_strcmp($7,3008)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = $2;
   $11 = HEAP32[$10>>2]|0;
   _amaproc($11);
   $0 = 0;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 }
 $12 = $1;
 $13 = ($12|0)>(2);
 if ($13) {
  $14 = $2;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_strcmp($16,3016)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = $2;
   $20 = HEAP32[$19>>2]|0;
   $21 = $2;
   $22 = (($21) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   _amaobj($20,$23);
   $0 = 0;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 }
 $24 = $1;
 $25 = ($24|0)>(2);
 if ($25) {
  $26 = $2;
  $27 = (($26) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_strcmp($28,3024)|0);
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = $2;
   $32 = HEAP32[$31>>2]|0;
   _InitOptions(1,$32);
   _CreateInterpreter();
   $33 = $2;
   $34 = (($33) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   (_Load($35)|0);
   $0 = 0;
   $41 = $0;
   STACKTOP = sp;return ($41|0);
  }
 }
 $36 = $2;
 $37 = HEAP32[$36>>2]|0;
 $38 = $2;
 $39 = (($38) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 _amaobj($37,$40);
 $0 = 0;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _initgetstring() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _amaproc($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $expr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $expr = sp + 8|0;
 $0 = $path;
 $1 = $0;
 _InitOptions(0,$1);
 _CreateInterpreter();
 while(1) {
  _memset(($expr|0),0,256)|0;
  _getstring(3032,$expr);
  _WriteString(3104);
  _Interpret($expr);
  _WriteString(3112);
 }
}
function _amaobj($path,$filename) {
 $path = $path|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $command = 0, $count = 0, $echo = 0, $handle = 0, $k = 0, $s = 0, $words = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1568|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $command = sp + 1048|0;
 $s = sp + 1304|0;
 $words = sp + 16|0;
 $0 = $path;
 $1 = $filename;
 $handle = -1;
 $echo = 0;
 $2 = $0;
 _InitOptions(0,$2);
 _CreateInterpreter();
 $3 = $1;
 $4 = (_Load($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = (_InitRemote()|0);
  $7 = ($6|0)!=(0);
  if ($7) {
   while(1) {
    _getstring(3032,$command);
    $8 = $echo;
    $9 = ($8|0)!=(0);
    if ($9) {
     _WriteString($command);
    }
    _WriteString(8392);
    $10 = (_FindWords($command,$words,256)|0);
    $count = $10;
    $11 = $count;
    $12 = ($11|0)==(2);
    if ($12) {
     $13 = HEAP32[$words>>2]|0;
     $14 = (_strcmp($13,4184)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      $16 = $handle;
      _DropRemote($16);
      $17 = (($words) + 4|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (_CreateRemote($18)|0);
      $handle = $19;
     } else {
      label = 10;
     }
    } else {
     label = 10;
    }
    if ((label|0) == 10) {
     label = 0;
     $20 = $count;
     $21 = ($20|0)>=(2);
     if ($21) {
      $22 = HEAP32[$words>>2]|0;
      $23 = (_strcmp($22,3040)|0);
      $24 = ($23|0)==(0);
      if ($24) {
       $25 = $handle;
       $26 = ($25|0)<(0);
       if ($26) {
        _WriteString(3048);
       } else {
        _starttiming();
        $k = 2;
        while(1) {
         $27 = $k;
         $28 = $count;
         $29 = ($27|0)<($28|0);
         if (!($29)) {
          break;
         }
         $30 = $handle;
         $31 = $k;
         $32 = (($words) + ($31<<2)|0);
         $33 = HEAP32[$32>>2]|0;
         _PutRemote($30,$33);
         $34 = $k;
         $35 = (($34) + 1)|0;
         $k = $35;
        }
        $36 = $handle;
        $37 = (($words) + 4|0);
        $38 = HEAP32[$37>>2]|0;
        (_CallRemote($36,$38)|0);
        _WriteString(3072);
        while(1) {
         $39 = $handle;
         $40 = (_GetRemote($39,$s,256)|0);
         $41 = ($40|0)!=(0);
         if (!($41)) {
          break;
         }
         _WriteString($s);
         _WriteString(8392);
        }
        _WriteString(3080);
        _stoptiming();
       }
      } else {
       label = 23;
      }
     } else {
      label = 23;
     }
     if ((label|0) == 23) {
      label = 0;
      $42 = $count;
      $43 = ($42|0)==(1);
      if ($43) {
       $44 = HEAP32[$words>>2]|0;
       $45 = (_strcmp($44,3088)|0);
       $46 = ($45|0)==(0);
       if ($46) {
        $47 = $echo;
        $48 = ($47|0)!=(0);
        $49 = $48 ^ 1;
        $50 = $49&1;
        $echo = $50;
       } else {
        label = 26;
       }
      } else {
       label = 26;
      }
      if ((label|0) == 26) {
       label = 0;
       $51 = $count;
       $52 = ($51|0)==(1);
       if ($52) {
        $53 = HEAP32[$words>>2]|0;
        $54 = (_strcmp($53,4608)|0);
        $55 = ($54|0)==(0);
        if ($55) {
         $56 = HEAP32[656>>2]|0;
         $57 = ($56|0)!=(0);
         $58 = $57 ^ 1;
         $59 = $58&1;
         HEAP32[656>>2] = $59;
        } else {
         label = 29;
        }
       } else {
        label = 29;
       }
       if ((label|0) == 29) {
        label = 0;
        $60 = $count;
        $61 = ($60|0)==(1);
        if ($61) {
         $62 = HEAP32[$words>>2]|0;
         $63 = (_strcmp($62,4592)|0);
         $64 = ($63|0)==(0);
         if ($64) {
          break;
         }
        }
        _WriteString(3096);
       }
      }
     }
    }
    _WriteString(8392);
   }
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _getstring($prompt,$string) {
 $prompt = $prompt|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $prompt;
 $1 = $string;
 $2 = $0;
 _WriteString($2);
 $3 = $1;
 $4 = HEAP32[_stdin>>2]|0;
 $5 = (_fgets(($3|0),256,($4|0))|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _exit(0);
  // unreachable;
 } else {
  $7 = $1;
  $8 = (_strlen(($7|0))|0);
  $9 = (($8) - 1)|0;
  $10 = $1;
  $11 = (($10) + ($9)|0);
  HEAP8[$11>>0] = 0;
  STACKTOP = sp;return;
 }
}
function _FindWords($line,$words,$maxwords) {
 $line = $line|0;
 $words = $words|0;
 $maxwords = $maxwords|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $count = 0, $k = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $line;
 $1 = $words;
 $2 = $maxwords;
 $state = 0;
 $count = 0;
 $k = 0;
 while(1) {
  $3 = $k;
  $4 = $0;
  $5 = (($4) + ($3)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = $count;
   $10 = $2;
   $11 = ($9|0)<=($10|0);
   $81 = $11;
  } else {
   $81 = 0;
  }
  if (!($81)) {
   break;
  }
  $12 = $k;
  $13 = $0;
  $14 = (($13) + ($12)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = (_isspace($16)|0);
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $state;
   $20 = ($19|0)!=(2);
   if ($20) {
    $21 = $k;
    $22 = $0;
    $23 = (($22) + ($21)|0);
    HEAP8[$23>>0] = 0;
    $state = 0;
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $24 = $k;
   $25 = $0;
   $26 = (($25) + ($24)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = (_isspace($28)|0);
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $state;
    $32 = ($31|0)==(2);
    if ($32) {
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
   if ((label|0) == 11) {
    label = 0;
    $33 = $k;
    $34 = $0;
    $35 = (($34) + ($33)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36 << 24 >> 24;
    $38 = ($37|0)==(34);
    if ($38) {
     $39 = $state;
     $40 = ($39|0)==(2);
     if ($40) {
      $41 = $k;
      $42 = $0;
      $43 = (($42) + ($41)|0);
      HEAP8[$43>>0] = 0;
      $state = 0;
     } else {
      label = 14;
     }
    } else {
     label = 14;
    }
    if ((label|0) == 14) {
     label = 0;
     $44 = $k;
     $45 = $0;
     $46 = (($45) + ($44)|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = $47 << 24 >> 24;
     $49 = ($48|0)==(34);
     if ($49) {
      $50 = $state;
      $51 = ($50|0)!=(2);
      if ($51) {
       $52 = $k;
       $53 = $0;
       $54 = (($53) + ($52)|0);
       HEAP8[$54>>0] = 0;
       $55 = $count;
       $56 = $2;
       $57 = ($55|0)<($56|0);
       if ($57) {
        $58 = $k;
        $59 = (($58) + 1)|0;
        $60 = $0;
        $61 = (($60) + ($59)|0);
        $62 = $count;
        $63 = (($62) + 1)|0;
        $count = $63;
        $64 = $1;
        $65 = (($64) + ($62<<2)|0);
        HEAP32[$65>>2] = $61;
       }
       $state = 2;
      } else {
       label = 19;
      }
     } else {
      label = 19;
     }
     if ((label|0) == 19) {
      label = 0;
      $66 = $state;
      $67 = ($66|0)==(0);
      if ($67) {
       $68 = $count;
       $69 = $2;
       $70 = ($68|0)<($69|0);
       if ($70) {
        $71 = $k;
        $72 = $0;
        $73 = (($72) + ($71)|0);
        $74 = $count;
        $75 = (($74) + 1)|0;
        $count = $75;
        $76 = $1;
        $77 = (($76) + ($74<<2)|0);
        HEAP32[$77>>2] = $73;
       }
       $state = 1;
      }
     }
    }
   }
  }
  $78 = $k;
  $79 = (($78) + 1)|0;
  $k = $79;
 }
 $80 = $count;
 STACKTOP = sp;return ($80|0);
}
function _SetIntSignal($enable) {
 $enable = $enable|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $enable;
 $1 = $0;
 $2 = ($1|0)!=(0);
 $3 = $2 ? 8 : 0;
 (_signal(2,($3|0))|0);
 STACKTOP = sp;return;
}
function _OpenIOFileRead($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $fd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = (_searchfd()|0);
 $fd = $2;
 $3 = $fd;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $5 = $1;
 $6 = (_fopen(($5|0),(9072|0))|0);
 $7 = $fd;
 HEAP32[$7>>2] = $6;
 $8 = $fd;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $11 = $fd;
  $12 = (($11) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = $fd;
  $14 = HEAP32[3120>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = (($17|0) / 12)&-1;
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _OpenIOFileWrite($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $fd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = (_searchfd()|0);
 $fd = $2;
 $3 = $fd;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $5 = $1;
 $6 = (_fopen(($5|0),(3128|0))|0);
 $7 = $fd;
 HEAP32[$7>>2] = $6;
 $8 = $fd;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $11 = $fd;
  $12 = (($11) + 4|0);
  HEAP32[$12>>2] = 1;
  $13 = $fd;
  $14 = HEAP32[3120>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = (($17|0) / 12)&-1;
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _OpenIOFileAppend($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $fd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = (_searchfd()|0);
 $fd = $2;
 $3 = $fd;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 $5 = $1;
 $6 = (_fopen(($5|0),(3136|0))|0);
 $7 = $fd;
 HEAP32[$7>>2] = $6;
 $8 = $fd;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $0 = -1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $11 = $fd;
  $12 = (($11) + 4|0);
  HEAP32[$12>>2] = 1;
  $13 = $fd;
  $14 = HEAP32[3120>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = (($17|0) / 12)&-1;
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _CloseIOFile($filenr) {
 $filenr = $filenr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fd = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $filenr;
 $1 = $0;
 $2 = ($1|0)<(0);
 if (!($2)) {
  $3 = $0;
  $4 = ($3|0)>=(10);
  if (!($4)) {
   $5 = $0;
   $6 = HEAP32[3120>>2]|0;
   $7 = (($6) + (($5*12)|0)|0);
   $fd = $7;
   $8 = $fd;
   $9 = (($8) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(2);
   if ($11) {
    STACKTOP = sp;return;
   }
   $12 = $fd;
   $13 = (($12) + 4|0);
   HEAP32[$13>>2] = 2;
   $14 = $fd;
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)!=(0|0);
   if (!($16)) {
    STACKTOP = sp;return;
   }
   $17 = $fd;
   $18 = HEAP32[$17>>2]|0;
   (_fclose(($18|0))|0);
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _CloseAllIOFiles() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = 0;
 while(1) {
  $0 = $k;
  $1 = ($0|0)<(10);
  if (!($1)) {
   break;
  }
  $2 = $k;
  _CloseIOFile($2);
  $3 = $k;
  $4 = (($3) + 1)|0;
  $k = $4;
 }
 STACKTOP = sp;return;
}
function _ReadIOFile($filenr) {
 $filenr = $filenr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ch = 0, $fd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $filenr;
 $2 = $1;
 $3 = ($2|0)<(0);
 if (!($3)) {
  $4 = $1;
  $5 = ($4|0)>=(10);
  if (!($5)) {
   $6 = $1;
   $7 = HEAP32[3120>>2]|0;
   $8 = (($7) + (($6*12)|0)|0);
   $fd = $8;
   $9 = $fd;
   $10 = (($9) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(0);
   if ($12) {
    $0 = -1;
    $20 = $0;
    STACKTOP = sp;return ($20|0);
   }
   $13 = $fd;
   $14 = HEAP32[$13>>2]|0;
   $15 = (_fgetc(($14|0))|0);
   $ch = $15;
   $16 = $ch;
   $17 = ($16|0)==(-1);
   if ($17) {
    $18 = $1;
    _CloseIOFile($18);
   }
   $19 = $ch;
   $0 = $19;
   $20 = $0;
   STACKTOP = sp;return ($20|0);
  }
 }
 $0 = -1;
 $20 = $0;
 STACKTOP = sp;return ($20|0);
}
function _WriteIOFile($filenr,$ch) {
 $filenr = $filenr|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $filenr;
 $1 = $ch;
 $2 = $0;
 $3 = ($2|0)<(0);
 if (!($3)) {
  $4 = $0;
  $5 = ($4|0)>=(10);
  if (!($5)) {
   $6 = $0;
   $7 = HEAP32[3120>>2]|0;
   $8 = (($7) + (($6*12)|0)|0);
   $fd = $8;
   $9 = $fd;
   $10 = (($9) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(1);
   if ($12) {
    STACKTOP = sp;return;
   } else {
    $13 = $1;
    $14 = $13 << 24 >> 24;
    $15 = $fd;
    $16 = HEAP32[$15>>2]|0;
    (_fputc(($14|0),($16|0))|0);
    STACKTOP = sp;return;
   }
  }
 }
 STACKTOP = sp;return;
}
function _MarkIOFile($filenr) {
 $filenr = $filenr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $filenr;
 $1 = $0;
 $2 = ($1|0)<(0);
 if (!($2)) {
  $3 = $0;
  $4 = ($3|0)>=(10);
  if (!($4)) {
   $5 = $0;
   $6 = HEAP32[3120>>2]|0;
   $7 = (($6) + (($5*12)|0)|0);
   $8 = (($7) + 8|0);
   HEAP32[$8>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _createIO() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3120>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_malloc(120)|0);
  HEAP32[3120>>2] = $2;
 }
 $3 = HEAP32[3120>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _systemerror(4);
 }
 $k = 0;
 while(1) {
  $5 = $k;
  $6 = ($5|0)<(10);
  if (!($6)) {
   break;
  }
  $7 = $k;
  $8 = HEAP32[3120>>2]|0;
  $9 = (($8) + (($7*12)|0)|0);
  $10 = (($9) + 4|0);
  HEAP32[$10>>2] = 2;
  $11 = $k;
  $12 = (($11) + 1)|0;
  $k = $12;
 }
 STACKTOP = sp;return;
}
function _TrapIntSignal() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[344>>2] = 1;
 (_signal(2,(8|0))|0);
 return;
}
function _searchfd() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $fd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[3120>>2]|0;
 $fd = $1;
 while(1) {
  $2 = $fd;
  $3 = HEAP32[3120>>2]|0;
  $4 = $2;
  $5 = $3;
  $6 = (($4) - ($5))|0;
  $7 = (($6|0) / 12)&-1;
  $8 = ($7|0)<(10);
  if (!($8)) {
   break;
  }
  $9 = $fd;
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(2);
  if ($12) {
   label = 4;
   break;
  }
  $14 = $fd;
  $15 = (($14) + 12|0);
  $fd = $15;
 }
 if ((label|0) == 4) {
  $13 = $fd;
  $0 = $13;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 $16 = HEAP32[3120>>2]|0;
 $fd = $16;
 while(1) {
  $17 = $fd;
  $18 = HEAP32[3120>>2]|0;
  $19 = $17;
  $20 = $18;
  $21 = (($19) - ($20))|0;
  $22 = (($21|0) / 12)&-1;
  $23 = ($22|0)<(10);
  if (!($23)) {
   break;
  }
  $24 = $fd;
  $25 = (($24) + 8|0);
  HEAP32[$25>>2] = 1;
  $26 = $fd;
  $27 = (($26) + 12|0);
  $fd = $27;
 }
 _reclaim();
 $28 = HEAP32[3120>>2]|0;
 $fd = $28;
 while(1) {
  $29 = $fd;
  $30 = HEAP32[3120>>2]|0;
  $31 = $29;
  $32 = $30;
  $33 = (($31) - ($32))|0;
  $34 = (($33|0) / 12)&-1;
  $35 = ($34|0)<(10);
  if (!($35)) {
   break;
  }
  $36 = $fd;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0);
  if ($39) {
   $40 = $fd;
   $41 = HEAP32[3120>>2]|0;
   $42 = $40;
   $43 = $41;
   $44 = (($42) - ($43))|0;
   $45 = (($44|0) / 12)&-1;
   _CloseIOFile($45);
  }
  $46 = $fd;
  $47 = (($46) + 12|0);
  $fd = $47;
 }
 $48 = HEAP32[3120>>2]|0;
 $fd = $48;
 while(1) {
  $49 = $fd;
  $50 = HEAP32[3120>>2]|0;
  $51 = $49;
  $52 = $50;
  $53 = (($51) - ($52))|0;
  $54 = (($53|0) / 12)&-1;
  $55 = ($54|0)<(10);
  if (!($55)) {
   label = 23;
   break;
  }
  $56 = $fd;
  $57 = (($56) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(2);
  if ($59) {
   label = 20;
   break;
  }
  $61 = $fd;
  $62 = (($61) + 12|0);
  $fd = $62;
 }
 if ((label|0) == 20) {
  $60 = $fd;
  $0 = $60;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 else if ((label|0) == 23) {
  $0 = 0;
  $63 = $0;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _createstack() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3144>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_malloc(80000)|0);
  HEAP32[3144>>2] = $2;
 }
 $3 = HEAP32[3144>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  HEAP32[3152>>2] = 0;
  return;
 }
 _systemerror(4);
 HEAP32[3152>>2] = 0;
 return;
}
function _forallstack($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fun;
 $1 = HEAP32[3152>>2]|0;
 $sp = $1;
 while(1) {
  $2 = $sp;
  $3 = (($2) + -1)|0;
  $sp = $3;
  $4 = ($2|0)>(0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $sp;
  $7 = HEAP32[3144>>2]|0;
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$5 & 127]($9);
 }
 STACKTOP = sp;return;
}
function _squeeze($between,$count) {
 $between = $between|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $k = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $between;
 $1 = $count;
 $2 = HEAP32[3152>>2]|0;
 $3 = $1;
 $4 = (($2) - ($3))|0;
 $k = $4;
 $5 = $k;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $l = $7;
 $8 = $0;
 $9 = HEAP32[3152>>2]|0;
 $10 = (($9) - ($8))|0;
 HEAP32[3152>>2] = $10;
 while(1) {
  $11 = $l;
  $12 = HEAP32[3152>>2]|0;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $k;
  $15 = (($14) + 1)|0;
  $k = $15;
  $16 = HEAP32[3144>>2]|0;
  $17 = (($16) + ($14<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $l;
  $20 = (($19) + 1)|0;
  $l = $20;
  $21 = HEAP32[3144>>2]|0;
  $22 = (($21) + ($19<<2)|0);
  HEAP32[$22>>2] = $18;
 }
 STACKTOP = sp;return;
}
function _make($tag) {
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tag;
 $1 = $0;
 $2 = (_newcell($1)|0);
 $temp = $2;
 $3 = HEAP32[3152>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[3152>>2] = $4;
 $5 = HEAP32[3144>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $temp;
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[3152>>2]|0;
 $10 = (($9) + -1)|0;
 HEAP32[3152>>2] = $10;
 $11 = HEAP32[3144>>2]|0;
 $12 = (($11) + ($10<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $temp;
 $15 = (($14) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = $temp;
 $17 = HEAP32[3152>>2]|0;
 $18 = HEAP32[3144>>2]|0;
 $19 = (($18) + ($17<<2)|0);
 HEAP32[$19>>2] = $16;
 $20 = HEAP32[3152>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[3152>>2] = $21;
 STACKTOP = sp;return;
}
function _makecompound($tag,$n) {
 $tag = $tag|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tag;
 $1 = $n;
 $2 = HEAP32[2968>>2]|0;
 $3 = HEAP32[3152>>2]|0;
 $4 = HEAP32[3144>>2]|0;
 $5 = (($4) + ($3<<2)|0);
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[3152>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[3152>>2] = $7;
 while(1) {
  $8 = $1;
  $9 = (($8) + -1)|0;
  $1 = $9;
  $10 = ($8|0)>(0);
  if (!($10)) {
   break;
  }
  $11 = $0;
  $12 = (_newcell($11)|0);
  $temp = $12;
  $13 = HEAP32[3152>>2]|0;
  $14 = (($13) + -1)|0;
  HEAP32[3152>>2] = $14;
  $15 = HEAP32[3144>>2]|0;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $temp;
  $19 = (($18) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = HEAP32[3152>>2]|0;
  $21 = (($20) + -1)|0;
  HEAP32[3152>>2] = $21;
  $22 = HEAP32[3144>>2]|0;
  $23 = (($22) + ($21<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $temp;
  HEAP32[$25>>2] = $24;
  $26 = $temp;
  $27 = HEAP32[3152>>2]|0;
  $28 = HEAP32[3144>>2]|0;
  $29 = (($28) + ($27<<2)|0);
  HEAP32[$29>>2] = $26;
  $30 = HEAP32[3152>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[3152>>2] = $31;
 }
 STACKTOP = sp;return;
}
function _makeset($tag,$n) {
 $tag = $tag|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tag;
 $1 = $n;
 $2 = $1;
 $3 = (($2) + 2)|0;
 _makecompound(41,$3);
 $4 = $0;
 $5 = (_newcell($4)|0);
 $temp = $5;
 $6 = $1;
 $7 = $temp;
 $8 = (($7) + 8|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[3152>>2]|0;
 $10 = (($9) + -1)|0;
 HEAP32[3152>>2] = $10;
 $11 = HEAP32[3144>>2]|0;
 $12 = (($11) + ($10<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $temp;
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[2576>>2]|0;
 $16 = $temp;
 $17 = (($16) + 4|0);
 HEAP32[$17>>2] = $15;
 $18 = $temp;
 $19 = HEAP32[3152>>2]|0;
 $20 = HEAP32[3144>>2]|0;
 $21 = (($20) + ($19<<2)|0);
 HEAP32[$21>>2] = $18;
 $22 = HEAP32[3152>>2]|0;
 $23 = (($22) + 1)|0;
 HEAP32[3152>>2] = $23;
 STACKTOP = sp;return;
}
function _makeAPPLICATION($value,$n) {
 $value = $value|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 $1 = $n;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (_newcell(24)|0);
  $5 = HEAP32[3152>>2]|0;
  $6 = HEAP32[3144>>2]|0;
  $7 = (($6) + ($5<<2)|0);
  HEAP32[$7>>2] = $4;
  $8 = HEAP32[3152>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[3152>>2] = $9;
  $49 = $0;
  $50 = HEAP32[3152>>2]|0;
  $51 = (($50) - 1)|0;
  $52 = HEAP32[3144>>2]|0;
  $53 = (($52) + ($51<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 8|0);
  HEAP32[$55>>2] = $49;
  STACKTOP = sp;return;
 }
 $10 = $1;
 $11 = ($10|0)==(1);
 if ($11) {
  $12 = (_newcell(24)|0);
  $temp = $12;
  $13 = HEAP32[3152>>2]|0;
  $14 = (($13) + -1)|0;
  HEAP32[3152>>2] = $14;
  $15 = HEAP32[3144>>2]|0;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $temp;
  $19 = (($18) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = $temp;
  $21 = HEAP32[3152>>2]|0;
  $22 = HEAP32[3144>>2]|0;
  $23 = (($22) + ($21<<2)|0);
  HEAP32[$23>>2] = $20;
  $24 = HEAP32[3152>>2]|0;
  $25 = (($24) + 1)|0;
  HEAP32[3152>>2] = $25;
 } else {
  while(1) {
   $26 = $1;
   $27 = (($26) + -1)|0;
   $1 = $27;
   $28 = ($26|0)>(1);
   if (!($28)) {
    break;
   }
   $29 = (_newcell(24)|0);
   $temp = $29;
   $30 = HEAP32[3152>>2]|0;
   $31 = (($30) + -1)|0;
   HEAP32[3152>>2] = $31;
   $32 = HEAP32[3144>>2]|0;
   $33 = (($32) + ($31<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $temp;
   $36 = (($35) + 4|0);
   HEAP32[$36>>2] = $34;
   $37 = HEAP32[3152>>2]|0;
   $38 = (($37) + -1)|0;
   HEAP32[3152>>2] = $38;
   $39 = HEAP32[3144>>2]|0;
   $40 = (($39) + ($38<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $temp;
   HEAP32[$42>>2] = $41;
   $43 = $temp;
   $44 = HEAP32[3152>>2]|0;
   $45 = HEAP32[3144>>2]|0;
   $46 = (($45) + ($44<<2)|0);
   HEAP32[$46>>2] = $43;
   $47 = HEAP32[3152>>2]|0;
   $48 = (($47) + 1)|0;
   HEAP32[3152>>2] = $48;
  }
 }
 $49 = $0;
 $50 = HEAP32[3152>>2]|0;
 $51 = (($50) - 1)|0;
 $52 = HEAP32[3144>>2]|0;
 $53 = (($52) + ($51<<2)|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + 8|0);
 HEAP32[$55>>2] = $49;
 STACKTOP = sp;return;
}
function _make_IF() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_newcell(23)|0);
 $temp = $0;
 $1 = (_newcell(23)|0);
 $2 = $temp;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[3152>>2]|0;
 $5 = (($4) + -1)|0;
 HEAP32[3152>>2] = $5;
 $6 = HEAP32[3144>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $temp;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = $8;
 $13 = HEAP32[3152>>2]|0;
 $14 = (($13) + -1)|0;
 HEAP32[3152>>2] = $14;
 $15 = HEAP32[3144>>2]|0;
 $16 = (($15) + ($14<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $temp;
 $19 = (($18) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$20>>2] = $17;
 $21 = HEAP32[3152>>2]|0;
 $22 = (($21) + -1)|0;
 HEAP32[3152>>2] = $22;
 $23 = HEAP32[3144>>2]|0;
 $24 = (($23) + ($22<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $temp;
 HEAP32[$26>>2] = $25;
 $27 = $temp;
 $28 = HEAP32[3152>>2]|0;
 $29 = HEAP32[3144>>2]|0;
 $30 = (($29) + ($28<<2)|0);
 HEAP32[$30>>2] = $27;
 $31 = HEAP32[3152>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[3152>>2] = $32;
 STACKTOP = sp;return;
}
function _makeinverse($tag) {
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tag;
 $1 = $0;
 $2 = (_newcell($1)|0);
 $temp = $2;
 $3 = HEAP32[3152>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[3152>>2] = $4;
 $5 = HEAP32[3144>>2]|0;
 $6 = (($5) + ($4<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $temp;
 $9 = (($8) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) + -1)|0;
 HEAP32[3152>>2] = $11;
 $12 = HEAP32[3144>>2]|0;
 $13 = (($12) + ($11<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $temp;
 HEAP32[$15>>2] = $14;
 $16 = $temp;
 $17 = HEAP32[3152>>2]|0;
 $18 = HEAP32[3144>>2]|0;
 $19 = (($18) + ($17<<2)|0);
 HEAP32[$19>>2] = $16;
 $20 = HEAP32[3152>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[3152>>2] = $21;
 STACKTOP = sp;return;
}
function _rotatestack() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $s0 = 0, $s1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) + -1)|0;
 HEAP32[3152>>2] = $1;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $s0 = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[3152>>2] = $6;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $s1 = $9;
 $10 = $s0;
 $11 = HEAP32[3152>>2]|0;
 $12 = HEAP32[3144>>2]|0;
 $13 = (($12) + ($11<<2)|0);
 HEAP32[$13>>2] = $10;
 $14 = HEAP32[3152>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[3152>>2] = $15;
 $16 = $s1;
 $17 = HEAP32[3152>>2]|0;
 $18 = HEAP32[3144>>2]|0;
 $19 = (($18) + ($17<<2)|0);
 HEAP32[$19>>2] = $16;
 $20 = HEAP32[3152>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[3152>>2] = $21;
 STACKTOP = sp;return;
}
function _GetOption($option) {
 $option = $option|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $option;
 $k = 0;
 while(1) {
  $1 = $k;
  $2 = ($1|0)<(5);
  if ($2) {
   $3 = $0;
   $4 = $k;
   $5 = (3168 + (($4*80)|0)|0);
   $6 = (_strcmp($3,$5)|0);
   $7 = ($6|0)!=(0);
   $16 = $7;
  } else {
   $16 = 0;
  }
  if (!($16)) {
   break;
  }
  $8 = $k;
  $9 = (($8) + 1)|0;
  $k = $9;
 }
 $10 = $k;
 $11 = ($10|0)<(5);
 if ($11) {
  $12 = $k;
  $13 = (3168 + (($12*80)|0)|0);
  $14 = (($13) + 40|0);
  $15 = $14;
  STACKTOP = sp;return ($15|0);
 } else {
  $15 = 8984;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _InitOptions($console,$path) {
 $console = $console|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, $k = 0, $line = 0, $words = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $line = sp + 40|0;
 $words = sp + 16|0;
 $0 = $console;
 $1 = $path;
 $2 = (_getAmaPath()|0);
 (_strcat((3568|0),($2|0))|0);
 (_strcat((3568|0),(6032|0))|0);
 $3 = (_fopen((3568|0),(9072|0))|0);
 $fp = $3;
 $4 = $fp;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $k = 0;
  HEAP8[3568>>0] = 0;
  $6 = $1;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $1;
   (_strcpy((3568|0),($8|0))|0);
   $9 = (_strlen((3568|0))|0);
   $k = $9;
   while(1) {
    $10 = $k;
    $11 = ($10|0)>(0);
    if ($11) {
     $12 = $k;
     $13 = (($12) - 1)|0;
     $14 = (3568 + ($13)|0);
     $15 = HEAP8[$14>>0]|0;
     $16 = $15 << 24 >> 24;
     $17 = ($16|0)!=(92);
     if ($17) {
      $18 = $k;
      $19 = (($18) - 1)|0;
      $20 = (3568 + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = $21 << 24 >> 24;
      $23 = ($22|0)!=(47);
      $50 = $23;
     } else {
      $50 = 0;
     }
    } else {
     $50 = 0;
    }
    if (!($50)) {
     break;
    }
    $24 = $k;
    $25 = (($24) + -1)|0;
    $k = $25;
   }
  }
  $26 = $k;
  $27 = (3568 + ($26)|0);
  (_strcpy(($27|0),(6032|0))|0);
  $28 = (_fopen((3568|0),(9072|0))|0);
  $fp = $28;
 }
 $29 = $fp;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  while(1) {
   $31 = $fp;
   $32 = (_fgets(($line|0),256,($31|0))|0);
   $33 = ($32|0)!=(0|0);
   if (!($33)) {
    break;
   }
   $34 = (_FindWords256($line,$words,4)|0);
   $35 = ($34|0)>=(4);
   if ($35) {
    $36 = HEAP32[$words>>2]|0;
    $37 = (_strcmp($36,3824)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     $39 = (($words) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (_strcmp($40,3832)|0);
     $42 = ($41|0)==(0);
     if ($42) {
      $43 = (($words) + 4|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = (($words) + 12|0);
      $46 = HEAP32[$45>>2]|0;
      _SetOption($44,$46);
     }
    }
   }
  }
  $47 = $fp;
  (_fclose(($47|0))|0);
 }
 $48 = $0;
 $49 = ($48|0)!=(0);
 if ($49) {
  STACKTOP = sp;return;
 }
 _SetOption(3840,3856);
 _SetOption(3864,3880);
 STACKTOP = sp;return;
}
function _CreateInterpreter() {
 var $$reg2mem44$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0, $cond14 = 0, $cond15 = 0, $cond16 = 0, $cond17 = 0, $cond18 = 0, $cond2 = 0, $cond3 = 0, $cond4 = 0, $cond5 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0;
 var $vararg_buffer = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 _setjmpTable = _saveSetjmp(712,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
 __THREW__ = 0;
 $0 = __THREW__; __THREW__ = 0;
 if ((($0|0) != 0) & ((threwValue|0) != 0)) { $1 = _testSetjmp(HEAP32[$0>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1|0) == 0) { _longjmp($0|0, threwValue|0); } tempRet0 = threwValue; } else { $1 = -1; };
 $2 = tempRet0;
 $cond = ($1|0)==(1);
 if ($cond) {
  $$reg2mem44$0 = $2;
 } else {
  $$reg2mem44$0 = 0;
 }
 while(1) {
  $3 = ($$reg2mem44$0|0)==(0);
  if (!($3)) {
   __THREW__ = 0;
   invoke_vi(25,1);
   $57 = __THREW__; __THREW__ = 0;
   if ((($57|0) != 0) & ((threwValue|0) != 0)) { $58 = _testSetjmp(HEAP32[$57>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($58|0) == 0) { _longjmp($57|0, threwValue|0); } tempRet0 = threwValue; } else { $58 = -1; };
   $59 = tempRet0;
   $cond1 = ($58|0)==(1);
   if ($cond1) {
    $$reg2mem44$0 = $59;
    continue;
   } else {
    label = 23;
    break;
   }
  }
  __THREW__ = 0;
  invoke_vii(9,(5776|0),($vararg_buffer|0));
  $4 = __THREW__; __THREW__ = 0;
  if ((($4|0) != 0) & ((threwValue|0) != 0)) { $5 = _testSetjmp(HEAP32[$4>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($5|0) == 0) { _longjmp($4|0, threwValue|0); } tempRet0 = threwValue; } else { $5 = -1; };
  $6 = tempRet0;
  $cond2 = ($5|0)==(1);
  if ($cond2) {
   $$reg2mem44$0 = $6;
   continue;
  }
  __THREW__ = 0;
  invoke_v(10);
  $7 = __THREW__; __THREW__ = 0;
  if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = threwValue; } else { $8 = -1; };
  $9 = tempRet0;
  $cond3 = ($8|0)==(1);
  if ($cond3) {
   $$reg2mem44$0 = $9;
   continue;
  }
  __THREW__ = 0;
  invoke_v(11);
  $10 = __THREW__; __THREW__ = 0;
  if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
  $12 = tempRet0;
  $cond4 = ($11|0)==(1);
  if ($cond4) {
   $$reg2mem44$0 = $12;
   continue;
  }
  __THREW__ = 0;
  invoke_v(12);
  $13 = __THREW__; __THREW__ = 0;
  if ((($13|0) != 0) & ((threwValue|0) != 0)) { $14 = _testSetjmp(HEAP32[$13>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($14|0) == 0) { _longjmp($13|0, threwValue|0); } tempRet0 = threwValue; } else { $14 = -1; };
  $15 = tempRet0;
  $cond5 = ($14|0)==(1);
  if ($cond5) {
   $$reg2mem44$0 = $15;
   continue;
  }
  __THREW__ = 0;
  $16 = (invoke_ii(13,(3888|0))|0);
  $17 = __THREW__; __THREW__ = 0;
  if ((($17|0) != 0) & ((threwValue|0) != 0)) { $18 = _testSetjmp(HEAP32[$17>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($18|0) == 0) { _longjmp($17|0, threwValue|0); } tempRet0 = threwValue; } else { $18 = -1; };
  $19 = tempRet0;
  $cond6 = ($18|0)==(1);
  if ($cond6) {
   $$reg2mem44$0 = $19;
   continue;
  }
  __THREW__ = 0;
  $20 = (invoke_ii(14,($16|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  if ((($21|0) != 0) & ((threwValue|0) != 0)) { $22 = _testSetjmp(HEAP32[$21>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($22|0) == 0) { _longjmp($21|0, threwValue|0); } tempRet0 = threwValue; } else { $22 = -1; };
  $23 = tempRet0;
  $cond7 = ($22|0)==(1);
  if ($cond7) {
   $$reg2mem44$0 = $23;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(15,($20|0));
  $24 = __THREW__; __THREW__ = 0;
  if ((($24|0) != 0) & ((threwValue|0) != 0)) { $25 = _testSetjmp(HEAP32[$24>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($25|0) == 0) { _longjmp($24|0, threwValue|0); } tempRet0 = threwValue; } else { $25 = -1; };
  $26 = tempRet0;
  $cond8 = ($25|0)==(1);
  if ($cond8) {
   $$reg2mem44$0 = $26;
   continue;
  }
  HEAP32[3152>>2] = 0;
  __THREW__ = 0;
  invoke_v(16);
  $27 = __THREW__; __THREW__ = 0;
  if ((($27|0) != 0) & ((threwValue|0) != 0)) { $28 = _testSetjmp(HEAP32[$27>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($28|0) == 0) { _longjmp($27|0, threwValue|0); } tempRet0 = threwValue; } else { $28 = -1; };
  $29 = tempRet0;
  $cond9 = ($28|0)==(1);
  if ($cond9) {
   $$reg2mem44$0 = $29;
   continue;
  }
  __THREW__ = 0;
  invoke_v(17);
  $30 = __THREW__; __THREW__ = 0;
  if ((($30|0) != 0) & ((threwValue|0) != 0)) { $31 = _testSetjmp(HEAP32[$30>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($31|0) == 0) { _longjmp($30|0, threwValue|0); } tempRet0 = threwValue; } else { $31 = -1; };
  $32 = tempRet0;
  $cond10 = ($31|0)==(1);
  if ($cond10) {
   $$reg2mem44$0 = $32;
   continue;
  }
  __THREW__ = 0;
  invoke_v(18);
  $33 = __THREW__; __THREW__ = 0;
  if ((($33|0) != 0) & ((threwValue|0) != 0)) { $34 = _testSetjmp(HEAP32[$33>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($34|0) == 0) { _longjmp($33|0, threwValue|0); } tempRet0 = threwValue; } else { $34 = -1; };
  $35 = tempRet0;
  $cond11 = ($34|0)==(1);
  if ($cond11) {
   $$reg2mem44$0 = $35;
   continue;
  }
  __THREW__ = 0;
  invoke_v(19);
  $36 = __THREW__; __THREW__ = 0;
  if ((($36|0) != 0) & ((threwValue|0) != 0)) { $37 = _testSetjmp(HEAP32[$36>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($37|0) == 0) { _longjmp($36|0, threwValue|0); } tempRet0 = threwValue; } else { $37 = -1; };
  $38 = tempRet0;
  $cond12 = ($37|0)==(1);
  if ($cond12) {
   $$reg2mem44$0 = $38;
   continue;
  }
  __THREW__ = 0;
  invoke_v(20);
  $39 = __THREW__; __THREW__ = 0;
  if ((($39|0) != 0) & ((threwValue|0) != 0)) { $40 = _testSetjmp(HEAP32[$39>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($40|0) == 0) { _longjmp($39|0, threwValue|0); } tempRet0 = threwValue; } else { $40 = -1; };
  $41 = tempRet0;
  $cond13 = ($40|0)==(1);
  if ($cond13) {
   $$reg2mem44$0 = $41;
   continue;
  }
  __THREW__ = 0;
  invoke_v(21);
  $42 = __THREW__; __THREW__ = 0;
  if ((($42|0) != 0) & ((threwValue|0) != 0)) { $43 = _testSetjmp(HEAP32[$42>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($43|0) == 0) { _longjmp($42|0, threwValue|0); } tempRet0 = threwValue; } else { $43 = -1; };
  $44 = tempRet0;
  $cond14 = ($43|0)==(1);
  if ($cond14) {
   $$reg2mem44$0 = $44;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(22,(3568|0));
  $45 = __THREW__; __THREW__ = 0;
  if ((($45|0) != 0) & ((threwValue|0) != 0)) { $46 = _testSetjmp(HEAP32[$45>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($46|0) == 0) { _longjmp($45|0, threwValue|0); } tempRet0 = threwValue; } else { $46 = -1; };
  $47 = tempRet0;
  $cond15 = ($46|0)==(1);
  if ($cond15) {
   $$reg2mem44$0 = $47;
   continue;
  }
  __THREW__ = 0;
  invoke_v(23);
  $48 = __THREW__; __THREW__ = 0;
  if ((($48|0) != 0) & ((threwValue|0) != 0)) { $49 = _testSetjmp(HEAP32[$48>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($49|0) == 0) { _longjmp($48|0, threwValue|0); } tempRet0 = threwValue; } else { $49 = -1; };
  $50 = tempRet0;
  $cond16 = ($49|0)==(1);
  if ($cond16) {
   $$reg2mem44$0 = $50;
   continue;
  }
  __THREW__ = 0;
  invoke_v(24);
  $51 = __THREW__; __THREW__ = 0;
  if ((($51|0) != 0) & ((threwValue|0) != 0)) { $52 = _testSetjmp(HEAP32[$51>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($52|0) == 0) { _longjmp($51|0, threwValue|0); } tempRet0 = threwValue; } else { $52 = -1; };
  $53 = tempRet0;
  $cond17 = ($52|0)==(1);
  if ($cond17) {
   $$reg2mem44$0 = $53;
   continue;
  }
  __THREW__ = 0;
  invoke_v(17);
  $54 = __THREW__; __THREW__ = 0;
  if ((($54|0) != 0) & ((threwValue|0) != 0)) { $55 = _testSetjmp(HEAP32[$54>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($55|0) == 0) { _longjmp($54|0, threwValue|0); } tempRet0 = threwValue; } else { $55 = -1; };
  $56 = tempRet0;
  $cond18 = ($55|0)==(1);
  if ($cond18) {
   $$reg2mem44$0 = $56;
  } else {
   break;
  }
 }
 if ((label|0) == 23) {
  // unreachable;
 }
 _free(_setjmpTable|0);
 STACKTOP = sp;return;
}
function _Load($filename) {
 $filename = $filename|0;
 var $$0 = 0, $$reg2mem69$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $cond = 0;
 var $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0, $cond14 = 0, $cond15 = 0, $cond16 = 0, $cond17 = 0, $cond18 = 0, $cond19 = 0, $cond2 = 0, $cond20 = 0, $cond21 = 0, $cond22 = 0, $cond23 = 0, $cond24 = 0, $cond25 = 0, $cond26 = 0, $cond27 = 0;
 var $cond28 = 0, $cond3 = 0, $cond4 = 0, $cond5 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $0 = ($filename|0)!=(0|0);
 if ($0) {
  __THREW__ = 0;
  $1 = (invoke_iii(26,(3904|0),(8984|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  if ((($2|0) != 0) & ((threwValue|0) != 0)) { $3 = _testSetjmp(HEAP32[$2>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3|0) == 0) { _longjmp($2|0, threwValue|0); } tempRet0 = threwValue; } else { $3 = -1; };
  $4 = tempRet0;
  $cond27 = ($3|0)==(1);
  if ($cond27) {
   $$reg2mem69$0 = $4;
  } else {
   __THREW__ = 0;
   (invoke_iiii(27,($1|0),($filename|0),255)|0);
   $5 = __THREW__; __THREW__ = 0;
   if ((($5|0) != 0) & ((threwValue|0) != 0)) { $6 = _testSetjmp(HEAP32[$5>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($6|0) == 0) { _longjmp($5|0, threwValue|0); } tempRet0 = threwValue; } else { $6 = -1; };
   $7 = tempRet0;
   $cond28 = ($6|0)==(1);
   if ($cond28) {
    $$reg2mem69$0 = $7;
   } else {
    label = 5;
   }
  }
 } else {
  label = 5;
 }
 do {
  if ((label|0) == 5) {
   __THREW__ = 0;
   $8 = (invoke_ii(28,(3904|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   if ((($9|0) != 0) & ((threwValue|0) != 0)) { $10 = _testSetjmp(HEAP32[$9>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($10|0) == 0) { _longjmp($9|0, threwValue|0); } tempRet0 = threwValue; } else { $10 = -1; };
   $11 = tempRet0;
   $cond = ($10|0)==(1);
   if ($cond) {
    $$reg2mem69$0 = $11;
   } else {
    $12 = ($8|0)==(0);
    if ($12) {
     $$0 = 0;
     _free(_setjmpTable|0);
     return ($$0|0);
    } else {
     _setjmpTable = _saveSetjmp(712,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
     __THREW__ = 0;
     $13 = __THREW__; __THREW__ = 0;
     if ((($13|0) != 0) & ((threwValue|0) != 0)) { $14 = _testSetjmp(HEAP32[$13>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($14|0) == 0) { _longjmp($13|0, threwValue|0); } tempRet0 = threwValue; } else { $14 = -1; };
     $15 = tempRet0;
     $cond1 = ($14|0)==(1);
     if ($cond1) {
      $$reg2mem69$0 = $15;
      break;
     }
     $$reg2mem69$0 = 0;
     break;
    }
   }
  }
 } while(0);
 while(1) {
  $16 = ($$reg2mem69$0|0)==(0);
  if (!($16)) {
   HEAP32[3152>>2] = 0;
   __THREW__ = 0;
   invoke_v(29);
   $64 = __THREW__; __THREW__ = 0;
   if ((($64|0) != 0) & ((threwValue|0) != 0)) { $65 = _testSetjmp(HEAP32[$64>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($65|0) == 0) { _longjmp($64|0, threwValue|0); } tempRet0 = threwValue; } else { $65 = -1; };
   $66 = tempRet0;
   $cond2 = ($65|0)==(1);
   if ($cond2) {
    $$reg2mem69$0 = $66;
    continue;
   }
   __THREW__ = 0;
   invoke_v(16);
   $67 = __THREW__; __THREW__ = 0;
   if ((($67|0) != 0) & ((threwValue|0) != 0)) { $68 = _testSetjmp(HEAP32[$67>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($68|0) == 0) { _longjmp($67|0, threwValue|0); } tempRet0 = threwValue; } else { $68 = -1; };
   $69 = tempRet0;
   $cond3 = ($68|0)==(1);
   if ($cond3) {
    $$reg2mem69$0 = $69;
    continue;
   }
   __THREW__ = 0;
   invoke_v(17);
   $70 = __THREW__; __THREW__ = 0;
   if ((($70|0) != 0) & ((threwValue|0) != 0)) { $71 = _testSetjmp(HEAP32[$70>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($71|0) == 0) { _longjmp($70|0, threwValue|0); } tempRet0 = threwValue; } else { $71 = -1; };
   $72 = tempRet0;
   $cond4 = ($71|0)==(1);
   if ($cond4) {
    $$reg2mem69$0 = $72;
    continue;
   }
   __THREW__ = 0;
   invoke_v(18);
   $73 = __THREW__; __THREW__ = 0;
   if ((($73|0) != 0) & ((threwValue|0) != 0)) { $74 = _testSetjmp(HEAP32[$73>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($74|0) == 0) { _longjmp($73|0, threwValue|0); } tempRet0 = threwValue; } else { $74 = -1; };
   $75 = tempRet0;
   $cond5 = ($74|0)==(1);
   if ($cond5) {
    $$reg2mem69$0 = $75;
    continue;
   }
   __THREW__ = 0;
   invoke_v(19);
   $76 = __THREW__; __THREW__ = 0;
   if ((($76|0) != 0) & ((threwValue|0) != 0)) { $77 = _testSetjmp(HEAP32[$76>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($77|0) == 0) { _longjmp($76|0, threwValue|0); } tempRet0 = threwValue; } else { $77 = -1; };
   $78 = tempRet0;
   $cond6 = ($77|0)==(1);
   if ($cond6) {
    $$reg2mem69$0 = $78;
    continue;
   }
   __THREW__ = 0;
   invoke_v(20);
   $79 = __THREW__; __THREW__ = 0;
   if ((($79|0) != 0) & ((threwValue|0) != 0)) { $80 = _testSetjmp(HEAP32[$79>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($80|0) == 0) { _longjmp($79|0, threwValue|0); } tempRet0 = threwValue; } else { $80 = -1; };
   $81 = tempRet0;
   $cond7 = ($80|0)==(1);
   if ($cond7) {
    $$reg2mem69$0 = $81;
    continue;
   }
   __THREW__ = 0;
   invoke_v(21);
   $82 = __THREW__; __THREW__ = 0;
   if ((($82|0) != 0) & ((threwValue|0) != 0)) { $83 = _testSetjmp(HEAP32[$82>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($83|0) == 0) { _longjmp($82|0, threwValue|0); } tempRet0 = threwValue; } else { $83 = -1; };
   $84 = tempRet0;
   $cond8 = ($83|0)==(1);
   if ($cond8) {
    $$reg2mem69$0 = $84;
    continue;
   }
   __THREW__ = 0;
   invoke_vi(22,(3568|0));
   $85 = __THREW__; __THREW__ = 0;
   if ((($85|0) != 0) & ((threwValue|0) != 0)) { $86 = _testSetjmp(HEAP32[$85>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($86|0) == 0) { _longjmp($85|0, threwValue|0); } tempRet0 = threwValue; } else { $86 = -1; };
   $87 = tempRet0;
   $cond9 = ($86|0)==(1);
   if ($cond9) {
    $$reg2mem69$0 = $87;
    continue;
   }
   __THREW__ = 0;
   invoke_v(23);
   $88 = __THREW__; __THREW__ = 0;
   if ((($88|0) != 0) & ((threwValue|0) != 0)) { $89 = _testSetjmp(HEAP32[$88>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($89|0) == 0) { _longjmp($88|0, threwValue|0); } tempRet0 = threwValue; } else { $89 = -1; };
   $90 = tempRet0;
   $cond10 = ($89|0)==(1);
   if ($cond10) {
    $$reg2mem69$0 = $90;
    continue;
   }
   __THREW__ = 0;
   invoke_v(24);
   $91 = __THREW__; __THREW__ = 0;
   if ((($91|0) != 0) & ((threwValue|0) != 0)) { $92 = _testSetjmp(HEAP32[$91>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($92|0) == 0) { _longjmp($91|0, threwValue|0); } tempRet0 = threwValue; } else { $92 = -1; };
   $93 = tempRet0;
   $cond11 = ($92|0)==(1);
   if ($cond11) {
    $$reg2mem69$0 = $93;
    continue;
   }
   __THREW__ = 0;
   invoke_v(17);
   $94 = __THREW__; __THREW__ = 0;
   if ((($94|0) != 0) & ((threwValue|0) != 0)) { $95 = _testSetjmp(HEAP32[$94>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($95|0) == 0) { _longjmp($94|0, threwValue|0); } tempRet0 = threwValue; } else { $95 = -1; };
   $96 = tempRet0;
   $cond12 = ($95|0)==(1);
   if ($cond12) {
    $$reg2mem69$0 = $96;
    continue;
   } else {
    label = 39;
    break;
   }
  }
  HEAP32[3152>>2] = 0;
  __THREW__ = 0;
  invoke_v(29);
  $17 = __THREW__; __THREW__ = 0;
  if ((($17|0) != 0) & ((threwValue|0) != 0)) { $18 = _testSetjmp(HEAP32[$17>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($18|0) == 0) { _longjmp($17|0, threwValue|0); } tempRet0 = threwValue; } else { $18 = -1; };
  $19 = tempRet0;
  $cond13 = ($18|0)==(1);
  if ($cond13) {
   $$reg2mem69$0 = $19;
   continue;
  }
  __THREW__ = 0;
  invoke_v(16);
  $20 = __THREW__; __THREW__ = 0;
  if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = threwValue; } else { $21 = -1; };
  $22 = tempRet0;
  $cond14 = ($21|0)==(1);
  if ($cond14) {
   $$reg2mem69$0 = $22;
   continue;
  }
  __THREW__ = 0;
  invoke_v(17);
  $23 = __THREW__; __THREW__ = 0;
  if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = threwValue; } else { $24 = -1; };
  $25 = tempRet0;
  $cond15 = ($24|0)==(1);
  if ($cond15) {
   $$reg2mem69$0 = $25;
   continue;
  }
  __THREW__ = 0;
  invoke_v(18);
  $26 = __THREW__; __THREW__ = 0;
  if ((($26|0) != 0) & ((threwValue|0) != 0)) { $27 = _testSetjmp(HEAP32[$26>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($27|0) == 0) { _longjmp($26|0, threwValue|0); } tempRet0 = threwValue; } else { $27 = -1; };
  $28 = tempRet0;
  $cond16 = ($27|0)==(1);
  if ($cond16) {
   $$reg2mem69$0 = $28;
   continue;
  }
  __THREW__ = 0;
  invoke_v(19);
  $29 = __THREW__; __THREW__ = 0;
  if ((($29|0) != 0) & ((threwValue|0) != 0)) { $30 = _testSetjmp(HEAP32[$29>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($30|0) == 0) { _longjmp($29|0, threwValue|0); } tempRet0 = threwValue; } else { $30 = -1; };
  $31 = tempRet0;
  $cond17 = ($30|0)==(1);
  if ($cond17) {
   $$reg2mem69$0 = $31;
   continue;
  }
  __THREW__ = 0;
  invoke_v(20);
  $32 = __THREW__; __THREW__ = 0;
  if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = threwValue; } else { $33 = -1; };
  $34 = tempRet0;
  $cond18 = ($33|0)==(1);
  if ($cond18) {
   $$reg2mem69$0 = $34;
   continue;
  }
  __THREW__ = 0;
  invoke_v(21);
  $35 = __THREW__; __THREW__ = 0;
  if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = threwValue; } else { $36 = -1; };
  $37 = tempRet0;
  $cond19 = ($36|0)==(1);
  if ($cond19) {
   $$reg2mem69$0 = $37;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(22,(3568|0));
  $38 = __THREW__; __THREW__ = 0;
  if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } tempRet0 = threwValue; } else { $39 = -1; };
  $40 = tempRet0;
  $cond20 = ($39|0)==(1);
  if ($cond20) {
   $$reg2mem69$0 = $40;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(22,(3904|0));
  $41 = __THREW__; __THREW__ = 0;
  if ((($41|0) != 0) & ((threwValue|0) != 0)) { $42 = _testSetjmp(HEAP32[$41>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($42|0) == 0) { _longjmp($41|0, threwValue|0); } tempRet0 = threwValue; } else { $42 = -1; };
  $43 = tempRet0;
  $cond21 = ($42|0)==(1);
  if ($cond21) {
   $$reg2mem69$0 = $43;
   continue;
  }
  __THREW__ = 0;
  invoke_v(23);
  $44 = __THREW__; __THREW__ = 0;
  if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = threwValue; } else { $45 = -1; };
  $46 = tempRet0;
  $cond22 = ($45|0)==(1);
  if ($cond22) {
   $$reg2mem69$0 = $46;
   continue;
  }
  __THREW__ = 0;
  invoke_v(24);
  $47 = __THREW__; __THREW__ = 0;
  if ((($47|0) != 0) & ((threwValue|0) != 0)) { $48 = _testSetjmp(HEAP32[$47>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($48|0) == 0) { _longjmp($47|0, threwValue|0); } tempRet0 = threwValue; } else { $48 = -1; };
  $49 = tempRet0;
  $cond23 = ($48|0)==(1);
  if ($cond23) {
   $$reg2mem69$0 = $49;
   continue;
  }
  __THREW__ = 0;
  invoke_v(17);
  $50 = __THREW__; __THREW__ = 0;
  if ((($50|0) != 0) & ((threwValue|0) != 0)) { $51 = _testSetjmp(HEAP32[$50>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($51|0) == 0) { _longjmp($50|0, threwValue|0); } tempRet0 = threwValue; } else { $51 = -1; };
  $52 = tempRet0;
  $cond24 = ($51|0)==(1);
  if ($cond24) {
   $$reg2mem69$0 = $52;
   continue;
  }
  __THREW__ = 0;
  $53 = (invoke_ii(30,(4160|0))|0);
  $54 = __THREW__; __THREW__ = 0;
  if ((($54|0) != 0) & ((threwValue|0) != 0)) { $55 = _testSetjmp(HEAP32[$54>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($55|0) == 0) { _longjmp($54|0, threwValue|0); } tempRet0 = threwValue; } else { $55 = -1; };
  $56 = tempRet0;
  $cond25 = ($55|0)==(1);
  if ($cond25) {
   $$reg2mem69$0 = $56;
   continue;
  }
  $57 = (($53) + 12|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = ($59|0)==(14);
  if (!($60)) {
   break;
  }
  __THREW__ = 0;
  invoke_vi(31,(4160|0));
  $61 = __THREW__; __THREW__ = 0;
  if ((($61|0) != 0) & ((threwValue|0) != 0)) { $62 = _testSetjmp(HEAP32[$61>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($62|0) == 0) { _longjmp($61|0, threwValue|0); } tempRet0 = threwValue; } else { $62 = -1; };
  $63 = tempRet0;
  $cond26 = ($62|0)==(1);
  if ($cond26) {
   $$reg2mem69$0 = $63;
  } else {
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
 }
 else if ((label|0) == 39) {
  $$0 = 0;
  _free(_setjmpTable|0);
  return ($$0|0);
 }
 $$0 = 1;
 _free(_setjmpTable|0);
 return ($$0|0);
}
function _Interpret($expr) {
 $expr = $expr|0;
 var $$reg2mem43$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, $cond10 = 0, $cond11 = 0, $cond12 = 0, $cond13 = 0;
 var $cond14 = 0, $cond15 = 0, $cond2 = 0, $cond3 = 0, $cond4 = 0, $cond5 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $cond9 = 0, $vararg_buffer = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 __THREW__ = 0;
 invoke_vi(32,1);
 $0 = __THREW__; __THREW__ = 0;
 if ((($0|0) != 0) & ((threwValue|0) != 0)) { $1 = _testSetjmp(HEAP32[$0>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1|0) == 0) { _longjmp($0|0, threwValue|0); } tempRet0 = threwValue; } else { $1 = -1; };
 $2 = tempRet0;
 $cond = ($1|0)==(1);
 do {
  if ($cond) {
   $$reg2mem43$0 = $2;
  } else {
   __THREW__ = 0;
   $3 = (invoke_ii(33,($expr|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   if ((($4|0) != 0) & ((threwValue|0) != 0)) { $5 = _testSetjmp(HEAP32[$4>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($5|0) == 0) { _longjmp($4|0, threwValue|0); } tempRet0 = threwValue; } else { $5 = -1; };
   $6 = tempRet0;
   $cond1 = ($5|0)==(1);
   if ($cond1) {
    $$reg2mem43$0 = $6;
   } else {
    $7 = ($3|0)!=(0);
    if ($7) {
     label = 22;
     break;
    }
    _setjmpTable = _saveSetjmp(712,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
    __THREW__ = 0;
    $8 = __THREW__; __THREW__ = 0;
    if ((($8|0) != 0) & ((threwValue|0) != 0)) { $9 = _testSetjmp(HEAP32[$8>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($9|0) == 0) { _longjmp($8|0, threwValue|0); } tempRet0 = threwValue; } else { $9 = -1; };
    $10 = tempRet0;
    $cond2 = ($9|0)==(1);
    if ($cond2) {
     $$reg2mem43$0 = $10;
    } else {
     $$reg2mem43$0 = 0;
    }
   }
  }
 } while(0);
 while(1) {
  if ((label|0) == 22) {
   label = 0;
   __THREW__ = 0;
   invoke_vi(32,0);
   $61 = __THREW__; __THREW__ = 0;
   if ((($61|0) != 0) & ((threwValue|0) != 0)) { $62 = _testSetjmp(HEAP32[$61>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($62|0) == 0) { _longjmp($61|0, threwValue|0); } tempRet0 = threwValue; } else { $62 = -1; };
   $63 = tempRet0;
   $cond3 = ($62|0)==(1);
   if ($cond3) {
    $$reg2mem43$0 = $63;
    continue;
   }
   HEAP32[3152>>2] = 0;
   __THREW__ = 0;
   invoke_v(34);
   $64 = __THREW__; __THREW__ = 0;
   if ((($64|0) != 0) & ((threwValue|0) != 0)) { $65 = _testSetjmp(HEAP32[$64>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($65|0) == 0) { _longjmp($64|0, threwValue|0); } tempRet0 = threwValue; } else { $65 = -1; };
   $66 = tempRet0;
   $cond4 = ($65|0)==(1);
   if ($cond4) {
    $$reg2mem43$0 = $66;
    continue;
   }
   __THREW__ = 0;
   invoke_v(35);
   $67 = __THREW__; __THREW__ = 0;
   if ((($67|0) != 0) & ((threwValue|0) != 0)) { $68 = _testSetjmp(HEAP32[$67>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($68|0) == 0) { _longjmp($67|0, threwValue|0); } tempRet0 = threwValue; } else { $68 = -1; };
   $69 = tempRet0;
   $cond5 = ($68|0)==(1);
   if ($cond5) {
    $$reg2mem43$0 = $69;
    continue;
   }
   HEAP32[344>>2] = 0;
   __THREW__ = 0;
   invoke_vii(9,(8392|0),($vararg_buffer|0));
   $70 = __THREW__; __THREW__ = 0;
   if ((($70|0) != 0) & ((threwValue|0) != 0)) { $71 = _testSetjmp(HEAP32[$70>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($71|0) == 0) { _longjmp($70|0, threwValue|0); } tempRet0 = threwValue; } else { $71 = -1; };
   $72 = tempRet0;
   $cond6 = ($71|0)==(1);
   if ($cond6) {
    $$reg2mem43$0 = $72;
   } else {
    break;
   }
  }
  $11 = ($$reg2mem43$0|0)==(0);
  if ($11) {
   HEAP32[3152>>2] = 0;
   __THREW__ = 0;
   invoke_v(34);
   $12 = __THREW__; __THREW__ = 0;
   if ((($12|0) != 0) & ((threwValue|0) != 0)) { $13 = _testSetjmp(HEAP32[$12>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($13|0) == 0) { _longjmp($12|0, threwValue|0); } tempRet0 = threwValue; } else { $13 = -1; };
   $14 = tempRet0;
   $cond7 = ($13|0)==(1);
   if ($cond7) {
    $$reg2mem43$0 = $14;
    continue;
   }
   __THREW__ = 0;
   invoke_v(35);
   $15 = __THREW__; __THREW__ = 0;
   if ((($15|0) != 0) & ((threwValue|0) != 0)) { $16 = _testSetjmp(HEAP32[$15>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($16|0) == 0) { _longjmp($15|0, threwValue|0); } tempRet0 = threwValue; } else { $16 = -1; };
   $17 = tempRet0;
   $cond8 = ($16|0)==(1);
   if ($cond8) {
    $$reg2mem43$0 = $17;
    continue;
   }
   HEAP32[344>>2] = 0;
   __THREW__ = 0;
   $18 = (invoke_ii(36,($expr|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   if ((($19|0) != 0) & ((threwValue|0) != 0)) { $20 = _testSetjmp(HEAP32[$19>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($20|0) == 0) { _longjmp($19|0, threwValue|0); } tempRet0 = threwValue; } else { $20 = -1; };
   $21 = tempRet0;
   $cond9 = ($20|0)==(1);
   if ($cond9) {
    $$reg2mem43$0 = $21;
    continue;
   }
   $22 = ($18|0)!=(0);
   if ($22) {
    $23 = HEAP32[3152>>2]|0;
    $24 = (($23) - 1)|0;
    $25 = HEAP32[3144>>2]|0;
    $26 = (($25) + ($24<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    __THREW__ = 0;
    invoke_vii(37,($27|0),1);
    $28 = __THREW__; __THREW__ = 0;
    if ((($28|0) != 0) & ((threwValue|0) != 0)) { $29 = _testSetjmp(HEAP32[$28>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($29|0) == 0) { _longjmp($28|0, threwValue|0); } tempRet0 = threwValue; } else { $29 = -1; };
    $30 = tempRet0;
    $cond15 = ($29|0)==(1);
    if ($cond15) {
     $$reg2mem43$0 = $30;
     continue;
    }
   } else {
    $31 = HEAP32[3152>>2]|0;
    $32 = (($31) - 1)|0;
    $33 = HEAP32[3144>>2]|0;
    $34 = (($33) + ($32<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    __THREW__ = 0;
    invoke_vii(37,($35|0),0);
    $36 = __THREW__; __THREW__ = 0;
    if ((($36|0) != 0) & ((threwValue|0) != 0)) { $37 = _testSetjmp(HEAP32[$36>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($37|0) == 0) { _longjmp($36|0, threwValue|0); } tempRet0 = threwValue; } else { $37 = -1; };
    $38 = tempRet0;
    $cond10 = ($37|0)==(1);
    if ($cond10) {
     $$reg2mem43$0 = $38;
     continue;
    }
    $39 = HEAP32[3152>>2]|0;
    $40 = (($39) - 1)|0;
    $41 = HEAP32[3144>>2]|0;
    $42 = (($41) + ($40<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    __THREW__ = 0;
    $44 = (invoke_ii(38,($43|0))|0);
    $45 = __THREW__; __THREW__ = 0;
    if ((($45|0) != 0) & ((threwValue|0) != 0)) { $46 = _testSetjmp(HEAP32[$45>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($46|0) == 0) { _longjmp($45|0, threwValue|0); } tempRet0 = threwValue; } else { $46 = -1; };
    $47 = tempRet0;
    $cond11 = ($46|0)==(1);
    if ($cond11) {
     $$reg2mem43$0 = $47;
     continue;
    }
    $48 = HEAP32[3152>>2]|0;
    $49 = (($48) - 1)|0;
    $50 = HEAP32[3144>>2]|0;
    $51 = (($50) + ($49<<2)|0);
    HEAP32[$51>>2] = $44;
    __THREW__ = 0;
    invoke_v(39);
    $52 = __THREW__; __THREW__ = 0;
    if ((($52|0) != 0) & ((threwValue|0) != 0)) { $53 = _testSetjmp(HEAP32[$52>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($53|0) == 0) { _longjmp($52|0, threwValue|0); } tempRet0 = threwValue; } else { $53 = -1; };
    $54 = tempRet0;
    $cond12 = ($53|0)==(1);
    if ($cond12) {
     $$reg2mem43$0 = $54;
     continue;
    }
    __THREW__ = 0;
    invoke_v(40);
    $55 = __THREW__; __THREW__ = 0;
    if ((($55|0) != 0) & ((threwValue|0) != 0)) { $56 = _testSetjmp(HEAP32[$55>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($56|0) == 0) { _longjmp($55|0, threwValue|0); } tempRet0 = threwValue; } else { $56 = -1; };
    $57 = tempRet0;
    $cond13 = ($56|0)==(1);
    if ($cond13) {
     $$reg2mem43$0 = $57;
     continue;
    }
    __THREW__ = 0;
    invoke_v(41);
    $58 = __THREW__; __THREW__ = 0;
    if ((($58|0) != 0) & ((threwValue|0) != 0)) { $59 = _testSetjmp(HEAP32[$58>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($59|0) == 0) { _longjmp($58|0, threwValue|0); } tempRet0 = threwValue; } else { $59 = -1; };
    $60 = tempRet0;
    $cond14 = ($59|0)==(1);
    if ($cond14) {
     $$reg2mem43$0 = $60;
     continue;
    }
   }
  }
  label = 22;
 }
 _free(_setjmpTable|0);
 STACKTOP = sp;return;
}
function _InitRemote() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[3152>>2] = 0;
 _restoretemplates();
 _CloseAllIOFiles();
 HEAP32[344>>2] = 0;
 _SetIntSignal(1);
 HEAP32[4168>>2] = 0;
 HEAP32[4176>>2] = 1;
 return 1;
}
function _CreateRemote($s) {
 $s = $s|0;
 var $$0 = 0, $$reg2mem21$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $cond = 0, $cond1 = 0, $cond2 = 0, $cond3 = 0, $cond4 = 0;
 var $cond5 = 0, $cond6 = 0, $cond7 = 0, $cond8 = 0, $k$0 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $0 = HEAP32[4176>>2]|0;
 $1 = ($0|0)!=(0);
 if (!($1)) {
  $$0 = -1;
  _free(_setjmpTable|0);
  return ($$0|0);
 }
 _setjmpTable = _saveSetjmp(712,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
 __THREW__ = 0;
 $2 = __THREW__; __THREW__ = 0;
 if ((($2|0) != 0) & ((threwValue|0) != 0)) { $3 = _testSetjmp(HEAP32[$2>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3|0) == 0) { _longjmp($2|0, threwValue|0); } tempRet0 = threwValue; } else { $3 = -1; };
 $4 = tempRet0;
 $cond = ($3|0)==(1);
 if ($cond) {
  $$reg2mem21$0 = $4;
 } else {
  $$reg2mem21$0 = 0;
 }
 while(1) {
  $5 = ($$reg2mem21$0|0)==(0);
  if (!($5)) {
   label = 21;
   break;
  }
  __THREW__ = 0;
  invoke_vi(42,($s|0));
  $6 = __THREW__; __THREW__ = 0;
  if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } tempRet0 = threwValue; } else { $7 = -1; };
  $8 = tempRet0;
  $cond1 = ($7|0)==(1);
  if ($cond1) {
   $$reg2mem21$0 = $8;
   continue;
  }
  __THREW__ = 0;
  $9 = (invoke_ii(30,(4184|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
  $12 = tempRet0;
  $cond2 = ($11|0)==(1);
  if ($cond2) {
   $$reg2mem21$0 = $12;
   continue;
  }
  $13 = HEAP32[3152>>2]|0;
  $14 = HEAP32[3144>>2]|0;
  $15 = (($14) + ($13<<2)|0);
  HEAP32[$15>>2] = $9;
  $16 = HEAP32[3152>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[3152>>2] = $17;
  __THREW__ = 0;
  invoke_vi(43,22);
  $18 = __THREW__; __THREW__ = 0;
  if ((($18|0) != 0) & ((threwValue|0) != 0)) { $19 = _testSetjmp(HEAP32[$18>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($19|0) == 0) { _longjmp($18|0, threwValue|0); } tempRet0 = threwValue; } else { $19 = -1; };
  $20 = tempRet0;
  $cond3 = ($19|0)==(1);
  if ($cond3) {
   $$reg2mem21$0 = $20;
   continue;
  }
  __THREW__ = 0;
  invoke_v(44);
  $21 = __THREW__; __THREW__ = 0;
  if ((($21|0) != 0) & ((threwValue|0) != 0)) { $22 = _testSetjmp(HEAP32[$21>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($22|0) == 0) { _longjmp($21|0, threwValue|0); } tempRet0 = threwValue; } else { $22 = -1; };
  $23 = tempRet0;
  $cond4 = ($22|0)==(1);
  if ($cond4) {
   $$reg2mem21$0 = $23;
   continue;
  }
  $24 = HEAP32[3152>>2]|0;
  $25 = (($24) + -1)|0;
  HEAP32[3152>>2] = $25;
  $26 = HEAP32[3144>>2]|0;
  $27 = (($26) + ($25<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[2576>>2]|0;
  $30 = HEAP32[3152>>2]|0;
  $31 = HEAP32[3144>>2]|0;
  $32 = (($31) + ($30<<2)|0);
  HEAP32[$32>>2] = $29;
  $33 = HEAP32[3152>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[3152>>2] = $34;
  $35 = HEAP32[2576>>2]|0;
  $36 = HEAP32[3152>>2]|0;
  $37 = HEAP32[3144>>2]|0;
  $38 = (($37) + ($36<<2)|0);
  HEAP32[$38>>2] = $35;
  $39 = HEAP32[3152>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[3152>>2] = $40;
  $41 = HEAP32[$28>>2]|0;
  $42 = HEAP32[3152>>2]|0;
  $43 = HEAP32[3144>>2]|0;
  $44 = (($43) + ($42<<2)|0);
  HEAP32[$44>>2] = $41;
  $45 = HEAP32[3152>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[3152>>2] = $46;
  $47 = (($28) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[3152>>2]|0;
  $51 = HEAP32[3144>>2]|0;
  $52 = (($51) + ($50<<2)|0);
  HEAP32[$52>>2] = $49;
  $53 = HEAP32[3152>>2]|0;
  $54 = (($53) + 1)|0;
  HEAP32[3152>>2] = $54;
  $55 = HEAP32[2576>>2]|0;
  $56 = HEAP32[3152>>2]|0;
  $57 = HEAP32[3144>>2]|0;
  $58 = (($57) + ($56<<2)|0);
  HEAP32[$58>>2] = $55;
  $59 = HEAP32[3152>>2]|0;
  $60 = (($59) + 1)|0;
  HEAP32[3152>>2] = $60;
  __THREW__ = 0;
  invoke_vi(45,39);
  $61 = __THREW__; __THREW__ = 0;
  if ((($61|0) != 0) & ((threwValue|0) != 0)) { $62 = _testSetjmp(HEAP32[$61>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($62|0) == 0) { _longjmp($61|0, threwValue|0); } tempRet0 = threwValue; } else { $62 = -1; };
  $63 = tempRet0;
  $cond5 = ($62|0)==(1);
  if ($cond5) {
   $$reg2mem21$0 = $63;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(45,39);
  $64 = __THREW__; __THREW__ = 0;
  if ((($64|0) != 0) & ((threwValue|0) != 0)) { $65 = _testSetjmp(HEAP32[$64>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($65|0) == 0) { _longjmp($64|0, threwValue|0); } tempRet0 = threwValue; } else { $65 = -1; };
  $66 = tempRet0;
  $cond6 = ($65|0)==(1);
  if ($cond6) {
   $$reg2mem21$0 = $66;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(45,39);
  $67 = __THREW__; __THREW__ = 0;
  if ((($67|0) != 0) & ((threwValue|0) != 0)) { $68 = _testSetjmp(HEAP32[$67>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($68|0) == 0) { _longjmp($67|0, threwValue|0); } tempRet0 = threwValue; } else { $68 = -1; };
  $69 = tempRet0;
  $cond7 = ($68|0)==(1);
  if ($cond7) {
   $$reg2mem21$0 = $69;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(45,39);
  $70 = __THREW__; __THREW__ = 0;
  if ((($70|0) != 0) & ((threwValue|0) != 0)) { $71 = _testSetjmp(HEAP32[$70>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($71|0) == 0) { _longjmp($70|0, threwValue|0); } tempRet0 = threwValue; } else { $71 = -1; };
  $72 = tempRet0;
  $cond8 = ($71|0)==(1);
  if ($cond8) {
   $$reg2mem21$0 = $72;
  } else {
   break;
  }
 }
 if ((label|0) == 21) {
  $92 = HEAP32[4168>>2]|0;
  HEAP32[3152>>2] = $92;
  HEAP32[344>>2] = 0;
  $$0 = -1;
  _free(_setjmpTable|0);
  return ($$0|0);
 }
 $k$0 = 0;
 while(1) {
  $73 = HEAP32[4168>>2]|0;
  $74 = ($k$0|0)<($73|0);
  if (!($74)) {
   label = 20;
   break;
  }
  $75 = HEAP32[3144>>2]|0;
  $76 = (($75) + ($k$0<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + 12|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = ($80|0)!=(39);
  if ($81) {
   label = 17;
   break;
  }
  $89 = (($k$0) + 1)|0;
  $k$0 = $89;
 }
 if ((label|0) == 17) {
  $82 = HEAP32[3152>>2]|0;
  $83 = (($82) + -1)|0;
  HEAP32[3152>>2] = $83;
  $84 = HEAP32[3144>>2]|0;
  $85 = (($84) + ($83<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = HEAP32[3144>>2]|0;
  $88 = (($87) + ($k$0<<2)|0);
  HEAP32[$88>>2] = $86;
  $$0 = $k$0;
  _free(_setjmpTable|0);
  return ($$0|0);
 }
 else if ((label|0) == 20) {
  $90 = HEAP32[4168>>2]|0;
  $91 = (($90) + 1)|0;
  HEAP32[4168>>2] = $91;
  $$0 = $90;
  _free(_setjmpTable|0);
  return ($$0|0);
 }
 return (0)|0;
}
function _DropRemote($handle) {
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $handle;
 $1 = $0;
 $2 = ($1|0)<(0);
 if (!($2)) {
  $3 = $0;
  $4 = HEAP32[4168>>2]|0;
  $5 = ($3|0)>=($4|0);
  if (!($5)) {
   $6 = HEAP32[2576>>2]|0;
   $7 = $0;
   $8 = HEAP32[3144>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   HEAP32[$9>>2] = $6;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function _PutRemote($handle,$s) {
 $handle = $handle|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $handle;
 $1 = $s;
 $2 = $0;
 $3 = ($2|0)<(0);
 if (!($3)) {
  $4 = $0;
  $5 = HEAP32[4168>>2]|0;
  $6 = ($4|0)>=($5|0);
  if (!($6)) {
   $7 = $0;
   $8 = HEAP32[3144>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 12|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = ($13|0)!=(39);
   if (!($14)) {
    $15 = $0;
    $16 = HEAP32[3144>>2]|0;
    $17 = (($16) + ($15<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $list = $20;
    $21 = $list;
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[3152>>2]|0;
    $24 = HEAP32[3144>>2]|0;
    $25 = (($24) + ($23<<2)|0);
    HEAP32[$25>>2] = $22;
    $26 = HEAP32[3152>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[3152>>2] = $27;
    $28 = $1;
    _buildstring257($28);
    _make(39);
    $29 = HEAP32[3152>>2]|0;
    $30 = (($29) + -1)|0;
    HEAP32[3152>>2] = $30;
    $31 = HEAP32[3144>>2]|0;
    $32 = (($31) + ($30<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $list;
    HEAP32[$34>>2] = $33;
    STACKTOP = sp;return;
   }
  }
 }
 STACKTOP = sp;return;
}
function _CallRemote($handle,$s) {
 $handle = $handle|0;
 $s = $s|0;
 var $$0 = 0, $$reg2mem16$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $cond = 0, $cond1 = 0, $cond2 = 0, $cond3 = 0, $cond4 = 0, $cond5 = 0, $cond6 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $0 = ($handle|0)<(0);
 if (!($0)) {
  $1 = HEAP32[4168>>2]|0;
  $2 = ($handle|0)>=($1|0);
  if (!($2)) {
   $3 = HEAP32[3144>>2]|0;
   $4 = (($3) + ($handle<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + 12|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = ($8|0)!=(39);
   if (!($9)) {
    _setjmpTable = _saveSetjmp(712,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
    __THREW__ = 0;
    $10 = __THREW__; __THREW__ = 0;
    if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
    $12 = tempRet0;
    $cond = ($11|0)==(1);
    if ($cond) {
     $$reg2mem16$0 = $12;
    } else {
     $$reg2mem16$0 = 0;
    }
    L7: while(1) {
     $13 = ($$reg2mem16$0|0)==(0);
     if (!($13)) {
      label = 19;
      break;
     }
     $14 = HEAP32[3144>>2]|0;
     $15 = (($14) + ($handle<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = HEAP32[2576>>2]|0;
     HEAP32[$16>>2] = $17;
     $18 = (($16) + 4|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($19) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = HEAP32[$21>>2]|0;
     $23 = HEAP32[3152>>2]|0;
     $24 = HEAP32[3144>>2]|0;
     $25 = (($24) + ($23<<2)|0);
     HEAP32[$25>>2] = $22;
     $26 = HEAP32[3152>>2]|0;
     $27 = (($26) + 1)|0;
     HEAP32[3152>>2] = $27;
     $28 = HEAP32[2576>>2]|0;
     $29 = HEAP32[3152>>2]|0;
     $30 = HEAP32[3144>>2]|0;
     $31 = (($30) + ($29<<2)|0);
     HEAP32[$31>>2] = $28;
     $32 = HEAP32[3152>>2]|0;
     $33 = (($32) + 1)|0;
     HEAP32[3152>>2] = $33;
     $34 = (($16) + 4|0);
     $35 = HEAP32[$34>>2]|0;
     while(1) {
      $36 = HEAP32[$35>>2]|0;
      $37 = (($36) + 12|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = $38&255;
      $40 = ($39|0)==(39);
      if (!($40)) {
       break;
      }
      $41 = HEAP32[$35>>2]|0;
      $42 = HEAP32[$41>>2]|0;
      $43 = HEAP32[3152>>2]|0;
      $44 = HEAP32[3144>>2]|0;
      $45 = (($44) + ($43<<2)|0);
      HEAP32[$45>>2] = $42;
      $46 = HEAP32[3152>>2]|0;
      $47 = (($46) + 1)|0;
      HEAP32[3152>>2] = $47;
      __THREW__ = 0;
      invoke_vi(43,39);
      $48 = __THREW__; __THREW__ = 0;
      if ((($48|0) != 0) & ((threwValue|0) != 0)) { $49 = _testSetjmp(HEAP32[$48>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($49|0) == 0) { _longjmp($48|0, threwValue|0); } tempRet0 = threwValue; } else { $49 = -1; };
      $50 = tempRet0;
      $cond6 = ($49|0)==(1);
      if ($cond6) {
       $$reg2mem16$0 = $50;
       continue L7;
      }
      $51 = HEAP32[$35>>2]|0;
      $52 = (($51) + 4|0);
      $53 = HEAP32[$52>>2]|0;
      HEAP32[$35>>2] = $53;
     }
     __THREW__ = 0;
     invoke_vi(42,($s|0));
     $54 = __THREW__; __THREW__ = 0;
     if ((($54|0) != 0) & ((threwValue|0) != 0)) { $55 = _testSetjmp(HEAP32[$54>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($55|0) == 0) { _longjmp($54|0, threwValue|0); } tempRet0 = threwValue; } else { $55 = -1; };
     $56 = tempRet0;
     $cond1 = ($55|0)==(1);
     if ($cond1) {
      $$reg2mem16$0 = $56;
      continue;
     }
     $57 = (($16) + 4|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (($58) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (($60) + 4|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = HEAP32[$62>>2]|0;
     $64 = HEAP32[3152>>2]|0;
     $65 = HEAP32[3144>>2]|0;
     $66 = (($65) + ($64<<2)|0);
     HEAP32[$66>>2] = $63;
     $67 = HEAP32[3152>>2]|0;
     $68 = (($67) + 1)|0;
     HEAP32[3152>>2] = $68;
     __THREW__ = 0;
     invoke_vi(43,22);
     $69 = __THREW__; __THREW__ = 0;
     if ((($69|0) != 0) & ((threwValue|0) != 0)) { $70 = _testSetjmp(HEAP32[$69>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($70|0) == 0) { _longjmp($69|0, threwValue|0); } tempRet0 = threwValue; } else { $70 = -1; };
     $71 = tempRet0;
     $cond2 = ($70|0)==(1);
     if ($cond2) {
      $$reg2mem16$0 = $71;
      continue;
     }
     __THREW__ = 0;
     invoke_vi(43,22);
     $72 = __THREW__; __THREW__ = 0;
     if ((($72|0) != 0) & ((threwValue|0) != 0)) { $73 = _testSetjmp(HEAP32[$72>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($73|0) == 0) { _longjmp($72|0, threwValue|0); } tempRet0 = threwValue; } else { $73 = -1; };
     $74 = tempRet0;
     $cond3 = ($73|0)==(1);
     if ($cond3) {
      $$reg2mem16$0 = $74;
      continue;
     }
     __THREW__ = 0;
     invoke_vi(43,22);
     $75 = __THREW__; __THREW__ = 0;
     if ((($75|0) != 0) & ((threwValue|0) != 0)) { $76 = _testSetjmp(HEAP32[$75>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($76|0) == 0) { _longjmp($75|0, threwValue|0); } tempRet0 = threwValue; } else { $76 = -1; };
     $77 = tempRet0;
     $cond4 = ($76|0)==(1);
     if ($cond4) {
      $$reg2mem16$0 = $77;
      continue;
     }
     __THREW__ = 0;
     invoke_v(44);
     $78 = __THREW__; __THREW__ = 0;
     if ((($78|0) != 0) & ((threwValue|0) != 0)) { $79 = _testSetjmp(HEAP32[$78>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($79|0) == 0) { _longjmp($78|0, threwValue|0); } tempRet0 = threwValue; } else { $79 = -1; };
     $80 = tempRet0;
     $cond5 = ($79|0)==(1);
     if ($cond5) {
      $$reg2mem16$0 = $80;
     } else {
      label = 18;
      break;
     }
    }
    if ((label|0) == 18) {
     $81 = HEAP32[3152>>2]|0;
     $82 = (($81) + -1)|0;
     HEAP32[3152>>2] = $82;
     $83 = HEAP32[3144>>2]|0;
     $84 = (($83) + ($82<<2)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = HEAP32[$85>>2]|0;
     $87 = (($16) + 4|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (($88) + 4|0);
     $90 = HEAP32[$89>>2]|0;
     HEAP32[$90>>2] = $86;
     $91 = (($85) + 4|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = HEAP32[$92>>2]|0;
     HEAP32[$16>>2] = $93;
     $$0 = 1;
     _free(_setjmpTable|0);
     return ($$0|0);
    }
    else if ((label|0) == 19) {
     $94 = HEAP32[4168>>2]|0;
     HEAP32[3152>>2] = $94;
     $95 = HEAP32[2576>>2]|0;
     $96 = HEAP32[3144>>2]|0;
     $97 = (($96) + ($handle<<2)|0);
     HEAP32[$97>>2] = $95;
     HEAP32[344>>2] = 0;
     $$0 = 0;
     _free(_setjmpTable|0);
     return ($$0|0);
    }
   }
  }
 }
 $$0 = 0;
 _free(_setjmpTable|0);
 return ($$0|0);
}
function _GetRemote($handle,$s,$size) {
 $handle = $handle|0;
 $s = $s|0;
 $size = $size|0;
 var $$0 = 0, $$reg2mem8$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, $cond2 = 0;
 var _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $0 = ($handle|0)<(0);
 if (!($0)) {
  $1 = HEAP32[4168>>2]|0;
  $2 = ($handle|0)>=($1|0);
  if (!($2)) {
   $3 = HEAP32[3144>>2]|0;
   $4 = (($3) + ($handle<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + 12|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = $7&255;
   $9 = ($8|0)!=(39);
   if (!($9)) {
    _setjmpTable = _saveSetjmp(712,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
    __THREW__ = 0;
    $10 = __THREW__; __THREW__ = 0;
    if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
    $12 = tempRet0;
    $cond = ($11|0)==(1);
    if ($cond) {
     $$reg2mem8$0 = $12;
    } else {
     $$reg2mem8$0 = 0;
    }
    while(1) {
     $13 = ($$reg2mem8$0|0)==(0);
     if (!($13)) {
      label = 16;
      break;
     }
     $14 = HEAP32[3144>>2]|0;
     $15 = (($14) + ($handle<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = HEAP32[$16>>2]|0;
     $18 = (($17) + 12|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = $19&255;
     $21 = ($20|0)>(8);
     if ($21) {
      $22 = HEAP32[$16>>2]|0;
      $23 = (($22) + 12|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = $24&255;
      $26 = ($25|0)<(38);
      if ($26) {
       $27 = HEAP32[$16>>2]|0;
       $28 = HEAP32[3152>>2]|0;
       $29 = HEAP32[3144>>2]|0;
       $30 = (($29) + ($28<<2)|0);
       HEAP32[$30>>2] = $27;
       $31 = HEAP32[3152>>2]|0;
       $32 = (($31) + 1)|0;
       HEAP32[3152>>2] = $32;
       __THREW__ = 0;
       invoke_v(44);
       $33 = __THREW__; __THREW__ = 0;
       if ((($33|0) != 0) & ((threwValue|0) != 0)) { $34 = _testSetjmp(HEAP32[$33>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($34|0) == 0) { _longjmp($33|0, threwValue|0); } tempRet0 = threwValue; } else { $34 = -1; };
       $35 = tempRet0;
       $cond2 = ($34|0)==(1);
       if ($cond2) {
        $$reg2mem8$0 = $35;
        continue;
       }
       $36 = HEAP32[3152>>2]|0;
       $37 = (($36) - 1)|0;
       HEAP32[3152>>2] = $37;
      }
     }
     $38 = HEAP32[$16>>2]|0;
     $39 = (($38) + 12|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     $42 = ($41|0)!=(39);
     if ($42) {
      label = 13;
      break;
     }
     $43 = HEAP32[$16>>2]|0;
     $44 = HEAP32[$43>>2]|0;
     __THREW__ = 0;
     invoke_viii(46,($44|0),($s|0),($size|0));
     $45 = __THREW__; __THREW__ = 0;
     if ((($45|0) != 0) & ((threwValue|0) != 0)) { $46 = _testSetjmp(HEAP32[$45>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($46|0) == 0) { _longjmp($45|0, threwValue|0); } tempRet0 = threwValue; } else { $46 = -1; };
     $47 = tempRet0;
     $cond1 = ($46|0)==(1);
     if ($cond1) {
      $$reg2mem8$0 = $47;
     } else {
      label = 15;
      break;
     }
    }
    if ((label|0) == 13) {
     $$0 = 0;
     _free(_setjmpTable|0);
     return ($$0|0);
    }
    else if ((label|0) == 15) {
     $48 = HEAP32[$16>>2]|0;
     $49 = (($48) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     HEAP32[$16>>2] = $50;
     $$0 = 1;
     _free(_setjmpTable|0);
     return ($$0|0);
    }
    else if ((label|0) == 16) {
     $51 = HEAP32[4168>>2]|0;
     HEAP32[3152>>2] = $51;
     $52 = HEAP32[2576>>2]|0;
     $53 = HEAP32[3144>>2]|0;
     $54 = (($53) + ($handle<<2)|0);
     HEAP32[$54>>2] = $52;
     HEAP32[344>>2] = 0;
     $$0 = 0;
     _free(_setjmpTable|0);
     return ($$0|0);
    }
   }
  }
 }
 $$0 = 0;
 _free(_setjmpTable|0);
 return ($$0|0);
}
function _evalint($c,$hashtablenr) {
 $c = $c|0;
 $hashtablenr = $hashtablenr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $hashtablenr;
 $3 = $1;
 $4 = (($3) + 12|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)>(8);
 if ($7) {
  $8 = $1;
  $9 = (($8) + 12|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)<(38);
  if ($12) {
   $13 = $1;
   $14 = HEAP32[3152>>2]|0;
   $15 = HEAP32[3144>>2]|0;
   $16 = (($15) + ($14<<2)|0);
   HEAP32[$16>>2] = $13;
   $17 = HEAP32[3152>>2]|0;
   $18 = (($17) + 1)|0;
   HEAP32[3152>>2] = $18;
   _eval();
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) - 1)|0;
   HEAP32[3152>>2] = $20;
  }
 }
 $21 = $1;
 $22 = (($21) + 12|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = ($24|0)==(4);
 if ($25) {
  $26 = $1;
  $27 = +HEAPF64[$26>>3];
  $r = $27;
  $28 = $r;
  $29 = $28 >= -2147483648.0;
  if ($29) {
   $30 = $r;
   $31 = $30 <= 2147483647.0;
   if ($31) {
    $32 = $r;
    $33 = $r;
    $34 = (~~(($33)));
    $i = $34;
    $35 = (+($34|0));
    $36 = $32 == $35;
    if ($36) {
     $37 = $i;
     $0 = $37;
     $41 = $0;
     STACKTOP = sp;return ($41|0);
    }
   }
  }
  $38 = $2;
  _runtimeerror(3,$38);
 }
 $39 = $1;
 $40 = HEAP32[$39>>2]|0;
 $0 = $40;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _evalreal($c) {
 $c = $c|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)>(8);
 if ($6) {
  $7 = $1;
  $8 = (($7) + 12|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)<(38);
  if ($11) {
   $12 = $1;
   $13 = HEAP32[3152>>2]|0;
   $14 = HEAP32[3144>>2]|0;
   $15 = (($14) + ($13<<2)|0);
   HEAP32[$15>>2] = $12;
   $16 = HEAP32[3152>>2]|0;
   $17 = (($16) + 1)|0;
   HEAP32[3152>>2] = $17;
   _eval();
   $18 = HEAP32[3152>>2]|0;
   $19 = (($18) - 1)|0;
   HEAP32[3152>>2] = $19;
  }
 }
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ($23|0)==(3);
 if ($24) {
  $25 = $1;
  $26 = HEAP32[$25>>2]|0;
  $27 = (+($26|0));
  $0 = $27;
  $30 = $0;
  STACKTOP = sp;return (+$30);
 } else {
  $28 = $1;
  $29 = +HEAPF64[$28>>3];
  $0 = $29;
  $30 = $0;
  STACKTOP = sp;return (+$30);
 }
 return +(0.0);
}
function _comparecell($c1,$c2) {
 $c1 = $c1|0;
 $c2 = $c2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cmp = 0, $int_x = 0, $real_x = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c1;
 $2 = $c2;
 $3 = $1;
 $4 = (($3) + 12|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)>(8);
 if ($7) {
  $8 = $1;
  $9 = (($8) + 12|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)<(38);
  if ($12) {
   $13 = $1;
   $14 = HEAP32[3152>>2]|0;
   $15 = HEAP32[3144>>2]|0;
   $16 = (($15) + ($14<<2)|0);
   HEAP32[$16>>2] = $13;
   $17 = HEAP32[3152>>2]|0;
   $18 = (($17) + 1)|0;
   HEAP32[3152>>2] = $18;
   _eval();
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) - 1)|0;
   HEAP32[3152>>2] = $20;
  }
 }
 $21 = $2;
 $22 = (($21) + 12|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = ($24|0)>(8);
 if ($25) {
  $26 = $2;
  $27 = (($26) + 12|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = ($29|0)<(38);
  if ($30) {
   $31 = $2;
   $32 = HEAP32[3152>>2]|0;
   $33 = HEAP32[3144>>2]|0;
   $34 = (($33) + ($32<<2)|0);
   HEAP32[$34>>2] = $31;
   $35 = HEAP32[3152>>2]|0;
   $36 = (($35) + 1)|0;
   HEAP32[3152>>2] = $36;
   _eval();
   $37 = HEAP32[3152>>2]|0;
   $38 = (($37) - 1)|0;
   HEAP32[3152>>2] = $38;
  }
 }
 $39 = $1;
 $40 = (($39) + 12|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 switch ($42|0) {
 case 40:  {
  while(1) {
   $157 = $1;
   $158 = HEAP32[$157>>2]|0;
   $159 = $2;
   $160 = HEAP32[$159>>2]|0;
   $161 = (_comparecell($158,$160)|0);
   $cmp = $161;
   $162 = $cmp;
   $163 = ($162|0)!=(0);
   if ($163) {
    label = 47;
    break;
   }
   $165 = $1;
   $166 = (($165) + 4|0);
   $167 = HEAP32[$166>>2]|0;
   $1 = $167;
   $168 = $2;
   $169 = (($168) + 4|0);
   $170 = HEAP32[$169>>2]|0;
   $2 = $170;
   $171 = $1;
   $172 = (($171) + 12|0);
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $175 = ($174|0)==(40);
   if (!($175)) {
    label = 50;
    break;
   }
  }
  if ((label|0) == 47) {
   $164 = $cmp;
   $0 = $164;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  }
  else if ((label|0) == 50) {
   $0 = 0;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  }
  break;
 }
 case 41:  {
  while(1) {
   $176 = $1;
   $177 = HEAP32[$176>>2]|0;
   $178 = $2;
   $179 = HEAP32[$178>>2]|0;
   $180 = (_comparecell($177,$179)|0);
   $cmp = $180;
   $181 = $cmp;
   $182 = ($181|0)!=(0);
   if ($182) {
    label = 53;
    break;
   }
   $184 = $1;
   $185 = (($184) + 4|0);
   $186 = HEAP32[$185>>2]|0;
   $1 = $186;
   $187 = $2;
   $188 = (($187) + 4|0);
   $189 = HEAP32[$188>>2]|0;
   $2 = $189;
   $190 = $1;
   $191 = (($190) + 12|0);
   $192 = HEAP8[$191>>0]|0;
   $193 = $192&255;
   $194 = ($193|0)==(41);
   if (!($194)) {
    label = 56;
    break;
   }
  }
  if ((label|0) == 53) {
   $183 = $cmp;
   $0 = $183;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  }
  else if ((label|0) == 56) {
   $0 = 0;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  }
  break;
 }
 case 4:  {
  $67 = $2;
  $68 = (($67) + 12|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = ($70|0)==(3);
  if ($71) {
   $72 = $1;
   $73 = +HEAPF64[$72>>3];
   $74 = $2;
   $75 = HEAP32[$74>>2]|0;
   $76 = (+($75|0));
   $77 = $73 - $76;
   $real_x = $77;
  } else {
   $78 = $1;
   $79 = +HEAPF64[$78>>3];
   $80 = $2;
   $81 = +HEAPF64[$80>>3];
   $82 = $79 - $81;
   $real_x = $82;
  }
  $83 = $real_x;
  $84 = $83 < 0.0;
  if ($84) {
   $0 = -1;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  }
  $85 = $real_x;
  $86 = $85 > 0.0;
  if ($86) {
   $0 = 1;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  } else {
   $0 = 0;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  }
  break;
 }
 case 6: case 39:  {
  while(1) {
   $87 = $1;
   $88 = (($87) + 12|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = ($90|0)==(39);
   if ($91) {
    $92 = $2;
    $93 = (($92) + 12|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $94&255;
    $96 = ($95|0)==(39);
    $203 = $96;
   } else {
    $203 = 0;
   }
   if (!($203)) {
    break;
   }
   $97 = $1;
   $98 = HEAP32[$97>>2]|0;
   $99 = $2;
   $100 = HEAP32[$99>>2]|0;
   $101 = (_comparecell($98,$100)|0);
   $cmp = $101;
   $102 = $cmp;
   $103 = ($102|0)!=(0);
   if ($103) {
    label = 32;
    break;
   }
   $105 = $1;
   $106 = (($105) + 4|0);
   $107 = HEAP32[$106>>2]|0;
   $1 = $107;
   $108 = $2;
   $109 = (($108) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $2 = $110;
   $111 = $1;
   $112 = (($111) + 12|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = $113&255;
   $115 = ($114|0)>(8);
   if ($115) {
    $116 = $1;
    $117 = (($116) + 12|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = ($119|0)<(38);
    if ($120) {
     $121 = $1;
     $122 = HEAP32[3152>>2]|0;
     $123 = HEAP32[3144>>2]|0;
     $124 = (($123) + ($122<<2)|0);
     HEAP32[$124>>2] = $121;
     $125 = HEAP32[3152>>2]|0;
     $126 = (($125) + 1)|0;
     HEAP32[3152>>2] = $126;
     _eval();
     $127 = HEAP32[3152>>2]|0;
     $128 = (($127) - 1)|0;
     HEAP32[3152>>2] = $128;
    }
   }
   $129 = $2;
   $130 = (($129) + 12|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = $131&255;
   $133 = ($132|0)>(8);
   if ($133) {
    $134 = $2;
    $135 = (($134) + 12|0);
    $136 = HEAP8[$135>>0]|0;
    $137 = $136&255;
    $138 = ($137|0)<(38);
    if ($138) {
     $139 = $2;
     $140 = HEAP32[3152>>2]|0;
     $141 = HEAP32[3144>>2]|0;
     $142 = (($141) + ($140<<2)|0);
     HEAP32[$142>>2] = $139;
     $143 = HEAP32[3152>>2]|0;
     $144 = (($143) + 1)|0;
     HEAP32[3152>>2] = $144;
     _eval();
     $145 = HEAP32[3152>>2]|0;
     $146 = (($145) - 1)|0;
     HEAP32[3152>>2] = $146;
    }
   }
  }
  if ((label|0) == 32) {
   $104 = $cmp;
   $0 = $104;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  }
  $147 = $2;
  $148 = (($147) + 12|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $149&255;
  $151 = ($150|0)==(39);
  if ($151) {
   $0 = -1;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  }
  $152 = $1;
  $153 = (($152) + 12|0);
  $154 = HEAP8[$153>>0]|0;
  $155 = $154&255;
  $156 = ($155|0)==(39);
  if ($156) {
   $0 = 1;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  } else {
   $0 = 0;
   $202 = $0;
   STACKTOP = sp;return ($202|0);
  }
  break;
 }
 case 3:  {
  $43 = $2;
  $44 = (($43) + 12|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = ($46|0)==(3);
  if ($47) {
   $48 = $1;
   $49 = HEAP32[$48>>2]|0;
   $50 = $2;
   $51 = HEAP32[$50>>2]|0;
   $52 = (($49) - ($51))|0;
   $int_x = $52;
   $53 = $int_x;
   $54 = ($53|0)<(0);
   if ($54) {
    $0 = -1;
    $202 = $0;
    STACKTOP = sp;return ($202|0);
   }
   $55 = $int_x;
   $56 = ($55|0)>(0);
   if ($56) {
    $0 = 1;
    $202 = $0;
    STACKTOP = sp;return ($202|0);
   } else {
    $0 = 0;
    $202 = $0;
    STACKTOP = sp;return ($202|0);
   }
  } else {
   $57 = $1;
   $58 = HEAP32[$57>>2]|0;
   $59 = (+($58|0));
   $60 = $2;
   $61 = +HEAPF64[$60>>3];
   $62 = $59 - $61;
   $real_x = $62;
   $63 = $real_x;
   $64 = $63 < 0.0;
   if ($64) {
    $0 = -1;
    $202 = $0;
    STACKTOP = sp;return ($202|0);
   }
   $65 = $real_x;
   $66 = $65 > 0.0;
   if ($66) {
    $0 = 1;
    $202 = $0;
    STACKTOP = sp;return ($202|0);
   } else {
    $0 = 0;
    $202 = $0;
    STACKTOP = sp;return ($202|0);
   }
  }
  break;
 }
 default: {
  $195 = $1;
  $196 = (($195) + 8|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = $2;
  $199 = (($198) + 8|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = (($197) - ($200))|0;
  $0 = $201;
  $202 = $0;
  STACKTOP = sp;return ($202|0);
 }
 }
 return (0)|0;
}
function _applyIF() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)>(8);
 if ($8) {
  $9 = HEAP32[3152>>2]|0;
  $10 = (($9) - 1)|0;
  $11 = HEAP32[3144>>2]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 12|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)<(38);
  if ($17) {
   _eval();
  }
 }
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) - 1)|0;
 $20 = HEAP32[3144>>2]|0;
 $21 = (($20) + ($19<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = HEAP32[3152>>2]|0;
  $27 = (($26) - 2)|0;
  $28 = HEAP32[3144>>2]|0;
  $29 = (($28) + ($27<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $39 = $30;
 } else {
  $31 = HEAP32[3152>>2]|0;
  $32 = (($31) - 3)|0;
  $33 = HEAP32[3144>>2]|0;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $39 = $35;
 }
 $36 = HEAP32[3152>>2]|0;
 $37 = HEAP32[3144>>2]|0;
 $38 = (($37) + ($36<<2)|0);
 HEAP32[$38>>2] = $39;
 $40 = HEAP32[3152>>2]|0;
 $41 = (($40) + 1)|0;
 HEAP32[3152>>2] = $41;
 $42 = HEAP32[3152>>2]|0;
 $43 = (($42) - 1)|0;
 $44 = HEAP32[3144>>2]|0;
 $45 = (($44) + ($43<<2)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 12|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = ($49|0)>(8);
 if (!($50)) {
  return;
 }
 $51 = HEAP32[3152>>2]|0;
 $52 = (($51) - 1)|0;
 $53 = HEAP32[3144>>2]|0;
 $54 = (($53) + ($52<<2)|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + 12|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = ($58|0)<(38);
 if (!($59)) {
  return;
 }
 _eval();
 return;
}
function _FindWords256($line,$words,$maxwords) {
 $line = $line|0;
 $words = $words|0;
 $maxwords = $maxwords|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $count = 0, $k = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $line;
 $1 = $words;
 $2 = $maxwords;
 $state = 0;
 $count = 0;
 $k = 0;
 while(1) {
  $3 = $k;
  $4 = $0;
  $5 = (($4) + ($3)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = $count;
   $10 = $2;
   $11 = ($9|0)<=($10|0);
   $81 = $11;
  } else {
   $81 = 0;
  }
  if (!($81)) {
   break;
  }
  $12 = $k;
  $13 = $0;
  $14 = (($13) + ($12)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = (_isspace($16)|0);
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $state;
   $20 = ($19|0)!=(2);
   if ($20) {
    $21 = $k;
    $22 = $0;
    $23 = (($22) + ($21)|0);
    HEAP8[$23>>0] = 0;
    $state = 0;
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $24 = $k;
   $25 = $0;
   $26 = (($25) + ($24)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27 << 24 >> 24;
   $29 = (_isspace($28)|0);
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $state;
    $32 = ($31|0)==(2);
    if ($32) {
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
   if ((label|0) == 11) {
    label = 0;
    $33 = $k;
    $34 = $0;
    $35 = (($34) + ($33)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36 << 24 >> 24;
    $38 = ($37|0)==(34);
    if ($38) {
     $39 = $state;
     $40 = ($39|0)==(2);
     if ($40) {
      $41 = $k;
      $42 = $0;
      $43 = (($42) + ($41)|0);
      HEAP8[$43>>0] = 0;
      $state = 0;
     } else {
      label = 14;
     }
    } else {
     label = 14;
    }
    if ((label|0) == 14) {
     label = 0;
     $44 = $k;
     $45 = $0;
     $46 = (($45) + ($44)|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = $47 << 24 >> 24;
     $49 = ($48|0)==(34);
     if ($49) {
      $50 = $state;
      $51 = ($50|0)!=(2);
      if ($51) {
       $52 = $k;
       $53 = $0;
       $54 = (($53) + ($52)|0);
       HEAP8[$54>>0] = 0;
       $55 = $count;
       $56 = $2;
       $57 = ($55|0)<($56|0);
       if ($57) {
        $58 = $k;
        $59 = (($58) + 1)|0;
        $60 = $0;
        $61 = (($60) + ($59)|0);
        $62 = $count;
        $63 = (($62) + 1)|0;
        $count = $63;
        $64 = $1;
        $65 = (($64) + ($62<<2)|0);
        HEAP32[$65>>2] = $61;
       }
       $state = 2;
      } else {
       label = 19;
      }
     } else {
      label = 19;
     }
     if ((label|0) == 19) {
      label = 0;
      $66 = $state;
      $67 = ($66|0)==(0);
      if ($67) {
       $68 = $count;
       $69 = $2;
       $70 = ($68|0)<($69|0);
       if ($70) {
        $71 = $k;
        $72 = $0;
        $73 = (($72) + ($71)|0);
        $74 = $count;
        $75 = (($74) + 1)|0;
        $count = $75;
        $76 = $1;
        $77 = (($76) + ($74<<2)|0);
        HEAP32[$77>>2] = $73;
       }
       $state = 1;
      }
     }
    }
   }
  }
  $78 = $k;
  $79 = (($78) + 1)|0;
  $k = $79;
 }
 $80 = $count;
 STACKTOP = sp;return ($80|0);
}
function _SetOption($option,$value) {
 $option = $option|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $option;
 $1 = $value;
 $k = 0;
 while(1) {
  $2 = $k;
  $3 = ($2|0)<(5);
  if ($3) {
   $4 = $0;
   $5 = $k;
   $6 = (3168 + (($5*80)|0)|0);
   $7 = (_strcmp($4,$6)|0);
   $8 = ($7|0)!=(0);
   $18 = $8;
  } else {
   $18 = 0;
  }
  if (!($18)) {
   break;
  }
  $9 = $k;
  $10 = (($9) + 1)|0;
  $k = $10;
 }
 $11 = $k;
 $12 = ($11|0)<(5);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $k;
 $14 = (3168 + (($13*80)|0)|0);
 $15 = (($14) + 40|0);
 $16 = (_strcpy(($15|0),(8984|0))|0);
 $17 = $1;
 (_strncat($16,$17,39)|0);
 STACKTOP = sp;return;
}
function _initsyslib() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $obj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_gettemplate(4192)|0);
 $obj = $0;
 (_inserttypestring(4184,4208)|0);
 $1 = $obj;
 (_insertabstype(4184,$1)|0);
 _parsetypeexpr(4232);
 $2 = (_newcell(14)|0);
 $3 = HEAP32[3152>>2]|0;
 $4 = HEAP32[3144>>2]|0;
 $5 = (($4) + ($3<<2)|0);
 HEAP32[$5>>2] = $2;
 $6 = HEAP32[3152>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[3152>>2] = $7;
 $8 = $obj;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[3152>>2]|0;
 $12 = (($11) - 1)|0;
 $13 = HEAP32[3144>>2]|0;
 $14 = (($13) + ($12<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 8|0);
 HEAP32[$16>>2] = $10;
 _makecompound(40,1);
 _make(33);
 $17 = HEAP32[3152>>2]|0;
 $18 = (($17) + -1)|0;
 HEAP32[3152>>2] = $18;
 $19 = HEAP32[3144>>2]|0;
 $20 = (($19) + ($18<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 (_inserttypeexpr(4192,$21)|0);
 $22 = $obj;
 (_insertabstype(4192,$22)|0);
 (_insert(4280,3,14,0,47)|0);
 (_insert(4296,3,14,0,48)|0);
 (_insert(9016,2,14,0,49)|0);
 (_insert(4304,1,14,0,50)|0);
 (_insert(4744,2,14,0,51)|0);
 (_insert(4312,2,14,0,52)|0);
 (_insert(4320,2,14,0,53)|0);
 (_insert(4328,2,14,0,54)|0);
 (_insert(4336,2,14,0,55)|0);
 (_insert(4344,2,14,0,56)|0);
 (_insert(3832,2,14,0,57)|0);
 (_insert(4352,2,14,0,58)|0);
 (_insert(4360,2,14,0,59)|0);
 (_insert(4368,2,14,0,60)|0);
 (_insert(4376,2,14,0,61)|0);
 (_insert(4384,2,14,0,62)|0);
 (_insert(4392,2,14,0,63)|0);
 (_insert(9448,0,2,0,0)|0);
 (_insert(9456,0,2,0,0)|0);
 (_insert(4400,0,4,0,0)|0);
 (_insert(9464,0,6,0,0)|0);
 (_insert(8984,1,14,0,0)|0);
 (_insert(4408,2,14,0,64)|0);
 (_inserttypestring(4280,4416)|0);
 (_inserttypestring(4296,4456)|0);
 (_inserttypestring(9016,4480)|0);
 (_inserttypestring(4304,8064)|0);
 (_inserttypestring(4744,4480)|0);
 (_inserttypestring(4312,4480)|0);
 (_inserttypestring(4320,4480)|0);
 (_inserttypestring(4328,4480)|0);
 (_inserttypestring(4336,4480)|0);
 (_inserttypestring(4344,4480)|0);
 (_inserttypestring(3832,4504)|0);
 (_inserttypestring(4352,4504)|0);
 (_inserttypestring(4360,4504)|0);
 (_inserttypestring(4368,4504)|0);
 (_inserttypestring(4376,4504)|0);
 (_inserttypestring(4384,4504)|0);
 (_inserttypestring(4392,7952)|0);
 (_inserttypestring(9448,4712)|0);
 (_inserttypestring(9456,4712)|0);
 (_inserttypestring(4400,4696)|0);
 (_inserttypestring(9464,4520)|0);
 (_inserttypestring(4408,4528)|0);
 _insertsys(4408);
 _insertsys(9016);
 _insertsys(4304);
 _insertsys(4744);
 _insertsys(4312);
 _insertsys(4320);
 _insertsys(4328);
 _insertsys(4336);
 _insertsys(4344);
 _insertsys(3832);
 _insertsys(4352);
 _insertsys(4360);
 _insertsys(4368);
 _insertsys(4376);
 _insertsys(4384);
 _insertoperator(10808,1,1);
 _insertoperator(6744,1,1);
 _insertoperator(4392,1,0);
 _insertoperator(6752,2,0);
 _insertoperator(9016,2,1);
 _insertoperator(4744,3,0);
 _insertoperator(4312,3,0);
 _insertoperator(4320,3,0);
 _insertoperator(4328,3,0);
 _insertoperator(6760,4,1);
 _insertoperator(6768,4,0);
 _insertoperator(4336,4,0);
 _insertoperator(4344,4,0);
 _insertoperator(3832,5,1);
 _insertoperator(4352,5,0);
 _insertoperator(4360,5,0);
 _insertoperator(4368,5,0);
 _insertoperator(4376,5,0);
 _insertoperator(4384,5,0);
 _insertoperator(6776,6,1);
 _insertoperator(6784,7,1);
 $23 = (_gettemplate(4320)|0);
 HEAP32[4552>>2] = $23;
 $24 = (_gettemplate(4312)|0);
 HEAP32[4560>>2] = $24;
 $25 = (_gettemplate(4328)|0);
 HEAP32[4568>>2] = $25;
 $26 = (_gettemplate(9016)|0);
 HEAP32[4576>>2] = $26;
 $27 = (_gettemplate(4392)|0);
 HEAP32[4584>>2] = $27;
 STACKTOP = sp;return;
}
function _commandline($expr) {
 $expr = $expr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $line = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $wc = 0, $words = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $line = sp + 56|0;
 $words = sp + 40|0;
 $1 = $expr;
 $2 = (_strcpy(($line|0),(8984|0))|0);
 $3 = $1;
 (_strncat($2,$3,255)|0);
 $4 = (_FindWords256($line,$words,2)|0);
 $wc = $4;
 $5 = $wc;
 $6 = ($5|0)==(1);
 if ($6) {
  $7 = HEAP32[$words>>2]|0;
  $8 = (_strcmp($7,4592)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   _exit(0);
   // unreachable;
  }
 }
 $10 = $wc;
 $11 = ($10|0)==(1);
 if ($11) {
  $12 = HEAP32[$words>>2]|0;
  $13 = (_strcmp($12,4600)|0);
  $14 = ($13|0)==(0);
  if ($14) {
   _Write(5776,$vararg_buffer);
   _printmeminfo();
   _printhashtable();
   $0 = 1;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  }
 }
 $15 = $wc;
 $16 = ($15|0)==(1);
 if ($16) {
  $17 = HEAP32[$words>>2]|0;
  $18 = (_strcmp($17,4608)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = HEAP32[656>>2]|0;
   $21 = ($20|0)!=(0);
   $22 = $21 ^ 1;
   $23 = $22&1;
   HEAP32[656>>2] = $23;
   $24 = HEAP32[656>>2]|0;
   $25 = ($24|0)!=(0);
   $26 = $25 ? 9448 : 9456;
   _Write($26,$vararg_buffer1);
   $0 = 1;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  }
 }
 $27 = $wc;
 $28 = ($27|0)==(1);
 if ($28) {
  $29 = HEAP32[$words>>2]|0;
  $30 = (_strcmp($29,4616)|0);
  $31 = ($30|0)==(0);
  if ($31) {
   $32 = (_Load(0)|0);
   $33 = ($32|0)!=(0);
   $34 = $33 ? 9448 : 8984;
   _Write($34,$vararg_buffer3);
   $0 = 1;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  }
 }
 $35 = $wc;
 $36 = ($35|0)==(2);
 if ($36) {
  $37 = HEAP32[$words>>2]|0;
  $38 = (_strcmp($37,4624)|0);
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = (($words) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (_Load($41)|0);
   $43 = ($42|0)!=(0);
   $44 = $43 ? 9448 : 8984;
   _Write($44,$vararg_buffer5);
   $0 = 1;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  }
 }
 $0 = 0;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _buildstring257($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[2576>>2]|0;
  $6 = HEAP32[3152>>2]|0;
  $7 = HEAP32[3144>>2]|0;
  $8 = (($7) + ($6<<2)|0);
  HEAP32[$8>>2] = $5;
  $9 = HEAP32[3152>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[3152>>2] = $10;
  STACKTOP = sp;return;
 }
 $11 = (_newcell(39)|0);
 $temp = $11;
 $12 = HEAP32[3152>>2]|0;
 $13 = HEAP32[3144>>2]|0;
 $14 = (($13) + ($12<<2)|0);
 HEAP32[$14>>2] = $11;
 $15 = HEAP32[3152>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[3152>>2] = $16;
 while(1) {
  $17 = (_newcell(5)|0);
  $18 = $temp;
  HEAP32[$18>>2] = $17;
  $19 = $0;
  $20 = (($19) + 1|0);
  $0 = $20;
  $21 = HEAP8[$19>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = $temp;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 8|0);
  HEAP32[$25>>2] = $22;
  $26 = $0;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)==(0);
  if ($29) {
   break;
  }
  $33 = (_newcell(39)|0);
  $34 = $temp;
  $35 = (($34) + 4|0);
  HEAP32[$35>>2] = $33;
  $temp = $33;
 }
 $30 = HEAP32[2576>>2]|0;
 $31 = $temp;
 $32 = (($31) + 4|0);
 HEAP32[$32>>2] = $30;
 STACKTOP = sp;return;
}
function _fillstring($c,$s,$size) {
 $c = $c|0;
 $s = $s|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $s;
 $2 = $size;
 $3 = $1;
 $t = $3;
 $4 = $2;
 $5 = (($4) + -1)|0;
 $2 = $5;
 $6 = $0;
 $7 = (($6) + 12|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(8);
 if ($10) {
  $11 = $0;
  $12 = (($11) + 12|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)<(38);
  if ($15) {
   $16 = $0;
   $17 = HEAP32[3152>>2]|0;
   $18 = HEAP32[3144>>2]|0;
   $19 = (($18) + ($17<<2)|0);
   HEAP32[$19>>2] = $16;
   $20 = HEAP32[3152>>2]|0;
   $21 = (($20) + 1)|0;
   HEAP32[3152>>2] = $21;
   _eval();
   $22 = HEAP32[3152>>2]|0;
   $23 = (($22) - 1)|0;
   HEAP32[3152>>2] = $23;
  }
 }
 while(1) {
  $24 = $0;
  $25 = (($24) + 12|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = ($27|0)==(39);
  if (!($28)) {
   label = 15;
   break;
  }
  $29 = $0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 12|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($33|0)>(8);
  if ($34) {
   $35 = $0;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + 12|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)<(38);
   if ($40) {
    $41 = $0;
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[3152>>2]|0;
    $44 = HEAP32[3144>>2]|0;
    $45 = (($44) + ($43<<2)|0);
    HEAP32[$45>>2] = $42;
    $46 = HEAP32[3152>>2]|0;
    $47 = (($46) + 1)|0;
    HEAP32[3152>>2] = $47;
    _eval();
    $48 = HEAP32[3152>>2]|0;
    $49 = (($48) - 1)|0;
    HEAP32[3152>>2] = $49;
   }
  }
  $50 = $0;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $53&255;
  $55 = $t;
  $56 = (($55) + 1|0);
  $t = $56;
  HEAP8[$55>>0] = $54;
  $57 = $t;
  $58 = $1;
  $59 = $57;
  $60 = $58;
  $61 = (($59) - ($60))|0;
  $62 = $2;
  $63 = ($61|0)>=($62|0);
  if ($63) {
   break;
  }
  $64 = $0;
  $65 = (($64) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $0 = $66;
  $67 = $0;
  $68 = (($67) + 12|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = ($70|0)>(8);
  if ($71) {
   $72 = $0;
   $73 = (($72) + 12|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = ($75|0)<(38);
   if ($76) {
    $77 = $0;
    $78 = HEAP32[3152>>2]|0;
    $79 = HEAP32[3144>>2]|0;
    $80 = (($79) + ($78<<2)|0);
    HEAP32[$80>>2] = $77;
    $81 = HEAP32[3152>>2]|0;
    $82 = (($81) + 1)|0;
    HEAP32[3152>>2] = $82;
    _eval();
    $83 = HEAP32[3152>>2]|0;
    $84 = (($83) - 1)|0;
    HEAP32[3152>>2] = $84;
   }
  }
 }
 if ((label|0) == 15) {
  $85 = $t;
  HEAP8[$85>>0] = 0;
  STACKTOP = sp;return;
 }
 $85 = $t;
 HEAP8[$85>>0] = 0;
 STACKTOP = sp;return;
}
function _apply_SECTION() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_newcell(22)|0);
 $temp = $0;
 $1 = HEAP32[3152>>2]|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 HEAP32[$3>>2] = $0;
 $4 = HEAP32[3152>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[3152>>2] = $5;
 $6 = HEAP32[3152>>2]|0;
 $7 = (($6) - 3)|0;
 $8 = HEAP32[3144>>2]|0;
 $9 = (($8) + ($7<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $temp;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = (_newcell(22)|0);
 $14 = $temp;
 HEAP32[$14>>2] = $13;
 $temp = $13;
 $15 = HEAP32[3152>>2]|0;
 $16 = (($15) - 4)|0;
 $17 = HEAP32[3144>>2]|0;
 $18 = (($17) + ($16<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $temp;
 $21 = (($20) + 4|0);
 HEAP32[$21>>2] = $19;
 $22 = HEAP32[3152>>2]|0;
 $23 = (($22) - 2)|0;
 $24 = HEAP32[3144>>2]|0;
 $25 = (($24) + ($23<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $temp;
 HEAP32[$27>>2] = $26;
 STACKTOP = sp;return;
}
function _applyPOWER() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $i = 0, $r = 0.0, $x = 0.0;
 var $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+_evalreal($4));
 $x = $5;
 $6 = HEAP32[3152>>2]|0;
 $7 = (($6) - 2)|0;
 $8 = HEAP32[3144>>2]|0;
 $9 = (($8) + ($7<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (+_evalreal($10));
 $y = $11;
 $12 = $y;
 $13 = (~~(($12)));
 $i = $13;
 $14 = $x;
 $15 = $14 < 0.0;
 if ($15) {
  $16 = $y;
  $17 = $i;
  $18 = (+($17|0));
  $19 = $16 != $18;
  if ($19) {
   $20 = HEAP32[4576>>2]|0;
   $21 = (($20) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   _runtimeerror(13,$22);
  }
 }
 $23 = $x;
 $24 = $23 == 0.0;
 if ($24) {
  $25 = $y;
  $26 = $25 < 0.0;
  if ($26) {
   $27 = HEAP32[4576>>2]|0;
   $28 = (($27) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   _runtimeerror(13,$29);
  } else {
   $30 = $y;
   $31 = $30 == 0.0;
   if ($31) {
    $32 = (_newcell(3)|0);
    $33 = HEAP32[3152>>2]|0;
    $34 = HEAP32[3144>>2]|0;
    $35 = (($34) + ($33<<2)|0);
    HEAP32[$35>>2] = $32;
    $36 = HEAP32[3152>>2]|0;
    $37 = (($36) + 1)|0;
    HEAP32[3152>>2] = $37;
    $38 = HEAP32[3152>>2]|0;
    $39 = (($38) - 1)|0;
    $40 = HEAP32[3144>>2]|0;
    $41 = (($40) + ($39<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    HEAP32[$42>>2] = 1;
   } else {
    $43 = (_newcell(3)|0);
    $44 = HEAP32[3152>>2]|0;
    $45 = HEAP32[3144>>2]|0;
    $46 = (($45) + ($44<<2)|0);
    HEAP32[$46>>2] = $43;
    $47 = HEAP32[3152>>2]|0;
    $48 = (($47) + 1)|0;
    HEAP32[3152>>2] = $48;
    $49 = HEAP32[3152>>2]|0;
    $50 = (($49) - 1)|0;
    $51 = HEAP32[3144>>2]|0;
    $52 = (($51) + ($50<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP32[$53>>2] = 0;
   }
  }
  STACKTOP = sp;return;
 }
 $54 = (___errno_location()|0);
 HEAP32[$54>>2] = 0;
 $55 = $x;
 $56 = $y;
 $57 = (+Math_pow((+$55),(+$56)));
 $r = $57;
 $58 = (___errno_location()|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)!=(0);
 if ($60) {
  $61 = HEAP32[4576>>2]|0;
  $62 = (($61) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  _runtimeerror(13,$63);
 }
 $64 = $r;
 $65 = $64 >= -2147483648.0;
 if ($65) {
  $66 = $r;
  $67 = $66 <= 2147483647.0;
  if ($67) {
   $68 = $r;
   $69 = $r;
   $70 = (~~(($69)));
   $i = $70;
   $71 = (+($70|0));
   $72 = $68 == $71;
   if ($72) {
    $73 = (_newcell(3)|0);
    $74 = HEAP32[3152>>2]|0;
    $75 = HEAP32[3144>>2]|0;
    $76 = (($75) + ($74<<2)|0);
    HEAP32[$76>>2] = $73;
    $77 = HEAP32[3152>>2]|0;
    $78 = (($77) + 1)|0;
    HEAP32[3152>>2] = $78;
    $79 = $i;
    $80 = HEAP32[3152>>2]|0;
    $81 = (($80) - 1)|0;
    $82 = HEAP32[3144>>2]|0;
    $83 = (($82) + ($81<<2)|0);
    $84 = HEAP32[$83>>2]|0;
    HEAP32[$84>>2] = $79;
   } else {
    label = 18;
   }
  } else {
   label = 18;
  }
 } else {
  label = 18;
 }
 if ((label|0) == 18) {
  $85 = (_newcell(4)|0);
  $86 = HEAP32[3152>>2]|0;
  $87 = HEAP32[3144>>2]|0;
  $88 = (($87) + ($86<<2)|0);
  HEAP32[$88>>2] = $85;
  $89 = HEAP32[3152>>2]|0;
  $90 = (($89) + 1)|0;
  HEAP32[3152>>2] = $90;
  $91 = $r;
  $92 = HEAP32[3152>>2]|0;
  $93 = (($92) - 1)|0;
  $94 = HEAP32[3144>>2]|0;
  $95 = (($94) + ($93<<2)|0);
  $96 = HEAP32[$95>>2]|0;
  HEAPF64[$96>>3] = $91;
 }
 STACKTOP = sp;return;
}
function _applyNEG() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $c = $4;
 $5 = $c;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(8);
 if ($9) {
  $10 = $c;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)<(38);
  if ($14) {
   $15 = $c;
   $16 = HEAP32[3152>>2]|0;
   $17 = HEAP32[3144>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $15;
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[3152>>2] = $20;
   _eval();
   $21 = HEAP32[3152>>2]|0;
   $22 = (($21) - 1)|0;
   HEAP32[3152>>2] = $22;
  }
 }
 $23 = $c;
 $24 = (($23) + 12|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)==(3);
 if ($27) {
  $28 = (_newcell(3)|0);
  $29 = HEAP32[3152>>2]|0;
  $30 = HEAP32[3144>>2]|0;
  $31 = (($30) + ($29<<2)|0);
  HEAP32[$31>>2] = $28;
  $32 = HEAP32[3152>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[3152>>2] = $33;
  $34 = $c;
  $35 = HEAP32[$34>>2]|0;
  $36 = (0 - ($35))|0;
  $37 = HEAP32[3152>>2]|0;
  $38 = (($37) - 1)|0;
  $39 = HEAP32[3144>>2]|0;
  $40 = (($39) + ($38<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  HEAP32[$41>>2] = $36;
  STACKTOP = sp;return;
 } else {
  $42 = (_newcell(4)|0);
  $43 = HEAP32[3152>>2]|0;
  $44 = HEAP32[3144>>2]|0;
  $45 = (($44) + ($43<<2)|0);
  HEAP32[$45>>2] = $42;
  $46 = HEAP32[3152>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[3152>>2] = $47;
  $48 = $c;
  $49 = +HEAPF64[$48>>3];
  $50 = -$49;
  $51 = HEAP32[3152>>2]|0;
  $52 = (($51) - 1)|0;
  $53 = HEAP32[3144>>2]|0;
  $54 = (($53) + ($52<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  HEAPF64[$55>>3] = $50;
  STACKTOP = sp;return;
 }
}
function _applyTIMES() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $c1 = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $c2 = $9;
 $10 = $c1;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>(8);
 if ($14) {
  $15 = $c1;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)<(38);
  if ($19) {
   $20 = $c1;
   $21 = HEAP32[3152>>2]|0;
   $22 = HEAP32[3144>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[3152>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[3152>>2] = $25;
   _eval();
   $26 = HEAP32[3152>>2]|0;
   $27 = (($26) - 1)|0;
   HEAP32[3152>>2] = $27;
  }
 }
 $28 = $c2;
 $29 = (($28) + 12|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)>(8);
 if ($32) {
  $33 = $c2;
  $34 = (($33) + 12|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($36|0)<(38);
  if ($37) {
   $38 = $c2;
   $39 = HEAP32[3152>>2]|0;
   $40 = HEAP32[3144>>2]|0;
   $41 = (($40) + ($39<<2)|0);
   HEAP32[$41>>2] = $38;
   $42 = HEAP32[3152>>2]|0;
   $43 = (($42) + 1)|0;
   HEAP32[3152>>2] = $43;
   _eval();
   $44 = HEAP32[3152>>2]|0;
   $45 = (($44) - 1)|0;
   HEAP32[3152>>2] = $45;
  }
 }
 $46 = $c1;
 $47 = (($46) + 12|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = ($49|0)==(3);
 if ($50) {
  $51 = $c2;
  $52 = (($51) + 12|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)==(3);
  if ($55) {
   $56 = (_newcell(3)|0);
   $57 = HEAP32[3152>>2]|0;
   $58 = HEAP32[3144>>2]|0;
   $59 = (($58) + ($57<<2)|0);
   HEAP32[$59>>2] = $56;
   $60 = HEAP32[3152>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[3152>>2] = $61;
   $62 = $c1;
   $63 = HEAP32[$62>>2]|0;
   $64 = $c2;
   $65 = HEAP32[$64>>2]|0;
   $66 = Math_imul($63, $65)|0;
   $67 = HEAP32[3152>>2]|0;
   $68 = (($67) - 1)|0;
   $69 = HEAP32[3144>>2]|0;
   $70 = (($69) + ($68<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   HEAP32[$71>>2] = $66;
  } else {
   $72 = (_newcell(4)|0);
   $73 = HEAP32[3152>>2]|0;
   $74 = HEAP32[3144>>2]|0;
   $75 = (($74) + ($73<<2)|0);
   HEAP32[$75>>2] = $72;
   $76 = HEAP32[3152>>2]|0;
   $77 = (($76) + 1)|0;
   HEAP32[3152>>2] = $77;
   $78 = $c1;
   $79 = HEAP32[$78>>2]|0;
   $80 = (+($79|0));
   $81 = $c2;
   $82 = +HEAPF64[$81>>3];
   $83 = $80 * $82;
   $84 = HEAP32[3152>>2]|0;
   $85 = (($84) - 1)|0;
   $86 = HEAP32[3144>>2]|0;
   $87 = (($86) + ($85<<2)|0);
   $88 = HEAP32[$87>>2]|0;
   HEAPF64[$88>>3] = $83;
  }
  STACKTOP = sp;return;
 } else {
  $89 = $c2;
  $90 = (($89) + 12|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = ($92|0)==(3);
  if ($93) {
   $94 = (_newcell(4)|0);
   $95 = HEAP32[3152>>2]|0;
   $96 = HEAP32[3144>>2]|0;
   $97 = (($96) + ($95<<2)|0);
   HEAP32[$97>>2] = $94;
   $98 = HEAP32[3152>>2]|0;
   $99 = (($98) + 1)|0;
   HEAP32[3152>>2] = $99;
   $100 = $c1;
   $101 = +HEAPF64[$100>>3];
   $102 = $c2;
   $103 = HEAP32[$102>>2]|0;
   $104 = (+($103|0));
   $105 = $101 * $104;
   $106 = HEAP32[3152>>2]|0;
   $107 = (($106) - 1)|0;
   $108 = HEAP32[3144>>2]|0;
   $109 = (($108) + ($107<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   HEAPF64[$110>>3] = $105;
  } else {
   $111 = (_newcell(4)|0);
   $112 = HEAP32[3152>>2]|0;
   $113 = HEAP32[3144>>2]|0;
   $114 = (($113) + ($112<<2)|0);
   HEAP32[$114>>2] = $111;
   $115 = HEAP32[3152>>2]|0;
   $116 = (($115) + 1)|0;
   HEAP32[3152>>2] = $116;
   $117 = $c1;
   $118 = +HEAPF64[$117>>3];
   $119 = $c2;
   $120 = +HEAPF64[$119>>3];
   $121 = $118 * $120;
   $122 = HEAP32[3152>>2]|0;
   $123 = (($122) - 1)|0;
   $124 = HEAP32[3144>>2]|0;
   $125 = (($124) + ($123<<2)|0);
   $126 = HEAP32[$125>>2]|0;
   HEAPF64[$126>>3] = $121;
  }
  STACKTOP = sp;return;
 }
}
function _applyDIV() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[4560>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_evalint($4,$7)|0);
 $x = $8;
 $9 = HEAP32[3152>>2]|0;
 $10 = (($9) - 2)|0;
 $11 = HEAP32[3144>>2]|0;
 $12 = (($11) + ($10<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[4560>>2]|0;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_evalint($13,$16)|0);
 $y = $17;
 $18 = $y;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = (_newcell(13)|0);
  $21 = HEAP32[3152>>2]|0;
  $22 = HEAP32[3144>>2]|0;
  $23 = (($22) + ($21<<2)|0);
  HEAP32[$23>>2] = $20;
  $24 = HEAP32[3152>>2]|0;
  $25 = (($24) + 1)|0;
  HEAP32[3152>>2] = $25;
  $26 = HEAP32[4560>>2]|0;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[3152>>2]|0;
  $30 = (($29) - 1)|0;
  $31 = HEAP32[3144>>2]|0;
  $32 = (($31) + ($30<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 8|0);
  HEAP32[$34>>2] = $28;
  STACKTOP = sp;return;
 } else {
  $35 = (_newcell(3)|0);
  $36 = HEAP32[3152>>2]|0;
  $37 = HEAP32[3144>>2]|0;
  $38 = (($37) + ($36<<2)|0);
  HEAP32[$38>>2] = $35;
  $39 = HEAP32[3152>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[3152>>2] = $40;
  $41 = $x;
  $42 = $y;
  $43 = (($41|0) / ($42|0))&-1;
  $44 = HEAP32[3152>>2]|0;
  $45 = (($44) - 1)|0;
  $46 = HEAP32[3144>>2]|0;
  $47 = (($46) + ($45<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  HEAP32[$48>>2] = $43;
  STACKTOP = sp;return;
 }
}
function _applyDIVIDE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $x = 0.0, $y = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+_evalreal($4));
 $x = $5;
 $6 = HEAP32[3152>>2]|0;
 $7 = (($6) - 2)|0;
 $8 = HEAP32[3144>>2]|0;
 $9 = (($8) + ($7<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (+_evalreal($10));
 $y = $11;
 $12 = $y;
 $13 = $12 == 0.0;
 if ($13) {
  $14 = (_newcell(13)|0);
  $15 = HEAP32[3152>>2]|0;
  $16 = HEAP32[3144>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  HEAP32[$17>>2] = $14;
  $18 = HEAP32[3152>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[3152>>2] = $19;
  $20 = HEAP32[4552>>2]|0;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[3152>>2]|0;
  $24 = (($23) - 1)|0;
  $25 = HEAP32[3144>>2]|0;
  $26 = (($25) + ($24<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 8|0);
  HEAP32[$28>>2] = $22;
  STACKTOP = sp;return;
 } else {
  $29 = (_newcell(4)|0);
  $30 = HEAP32[3152>>2]|0;
  $31 = HEAP32[3144>>2]|0;
  $32 = (($31) + ($30<<2)|0);
  HEAP32[$32>>2] = $29;
  $33 = HEAP32[3152>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[3152>>2] = $34;
  $35 = $x;
  $36 = $y;
  $37 = $35 / $36;
  $38 = HEAP32[3152>>2]|0;
  $39 = (($38) - 1)|0;
  $40 = HEAP32[3144>>2]|0;
  $41 = (($40) + ($39<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  HEAPF64[$42>>3] = $37;
  STACKTOP = sp;return;
 }
}
function _applyMOD() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[4568>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_evalint($4,$7)|0);
 $x = $8;
 $9 = HEAP32[3152>>2]|0;
 $10 = (($9) - 2)|0;
 $11 = HEAP32[3144>>2]|0;
 $12 = (($11) + ($10<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[4568>>2]|0;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_evalint($13,$16)|0);
 $y = $17;
 $18 = $y;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = (_newcell(13)|0);
  $21 = HEAP32[3152>>2]|0;
  $22 = HEAP32[3144>>2]|0;
  $23 = (($22) + ($21<<2)|0);
  HEAP32[$23>>2] = $20;
  $24 = HEAP32[3152>>2]|0;
  $25 = (($24) + 1)|0;
  HEAP32[3152>>2] = $25;
  $26 = HEAP32[4568>>2]|0;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[3152>>2]|0;
  $30 = (($29) - 1)|0;
  $31 = HEAP32[3144>>2]|0;
  $32 = (($31) + ($30<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 8|0);
  HEAP32[$34>>2] = $28;
  STACKTOP = sp;return;
 } else {
  $35 = (_newcell(3)|0);
  $36 = HEAP32[3152>>2]|0;
  $37 = HEAP32[3144>>2]|0;
  $38 = (($37) + ($36<<2)|0);
  HEAP32[$38>>2] = $35;
  $39 = HEAP32[3152>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[3152>>2] = $40;
  $41 = $x;
  $42 = $y;
  $43 = (($41|0) % ($42|0))&-1;
  $44 = HEAP32[3152>>2]|0;
  $45 = (($44) - 1)|0;
  $46 = HEAP32[3144>>2]|0;
  $47 = (($46) + ($45<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  HEAP32[$48>>2] = $43;
  STACKTOP = sp;return;
 }
}
function _applyPLUS() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $c1 = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $c2 = $9;
 $10 = $c1;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>(8);
 if ($14) {
  $15 = $c1;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)<(38);
  if ($19) {
   $20 = $c1;
   $21 = HEAP32[3152>>2]|0;
   $22 = HEAP32[3144>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[3152>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[3152>>2] = $25;
   _eval();
   $26 = HEAP32[3152>>2]|0;
   $27 = (($26) - 1)|0;
   HEAP32[3152>>2] = $27;
  }
 }
 $28 = $c2;
 $29 = (($28) + 12|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)>(8);
 if ($32) {
  $33 = $c2;
  $34 = (($33) + 12|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($36|0)<(38);
  if ($37) {
   $38 = $c2;
   $39 = HEAP32[3152>>2]|0;
   $40 = HEAP32[3144>>2]|0;
   $41 = (($40) + ($39<<2)|0);
   HEAP32[$41>>2] = $38;
   $42 = HEAP32[3152>>2]|0;
   $43 = (($42) + 1)|0;
   HEAP32[3152>>2] = $43;
   _eval();
   $44 = HEAP32[3152>>2]|0;
   $45 = (($44) - 1)|0;
   HEAP32[3152>>2] = $45;
  }
 }
 $46 = $c1;
 $47 = (($46) + 12|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = ($49|0)==(3);
 if ($50) {
  $51 = $c2;
  $52 = (($51) + 12|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)==(3);
  if ($55) {
   $56 = (_newcell(3)|0);
   $57 = HEAP32[3152>>2]|0;
   $58 = HEAP32[3144>>2]|0;
   $59 = (($58) + ($57<<2)|0);
   HEAP32[$59>>2] = $56;
   $60 = HEAP32[3152>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[3152>>2] = $61;
   $62 = $c1;
   $63 = HEAP32[$62>>2]|0;
   $64 = $c2;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($63) + ($65))|0;
   $67 = HEAP32[3152>>2]|0;
   $68 = (($67) - 1)|0;
   $69 = HEAP32[3144>>2]|0;
   $70 = (($69) + ($68<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   HEAP32[$71>>2] = $66;
  } else {
   $72 = (_newcell(4)|0);
   $73 = HEAP32[3152>>2]|0;
   $74 = HEAP32[3144>>2]|0;
   $75 = (($74) + ($73<<2)|0);
   HEAP32[$75>>2] = $72;
   $76 = HEAP32[3152>>2]|0;
   $77 = (($76) + 1)|0;
   HEAP32[3152>>2] = $77;
   $78 = $c1;
   $79 = HEAP32[$78>>2]|0;
   $80 = (+($79|0));
   $81 = $c2;
   $82 = +HEAPF64[$81>>3];
   $83 = $80 + $82;
   $84 = HEAP32[3152>>2]|0;
   $85 = (($84) - 1)|0;
   $86 = HEAP32[3144>>2]|0;
   $87 = (($86) + ($85<<2)|0);
   $88 = HEAP32[$87>>2]|0;
   HEAPF64[$88>>3] = $83;
  }
  STACKTOP = sp;return;
 } else {
  $89 = $c2;
  $90 = (($89) + 12|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = ($92|0)==(3);
  if ($93) {
   $94 = (_newcell(4)|0);
   $95 = HEAP32[3152>>2]|0;
   $96 = HEAP32[3144>>2]|0;
   $97 = (($96) + ($95<<2)|0);
   HEAP32[$97>>2] = $94;
   $98 = HEAP32[3152>>2]|0;
   $99 = (($98) + 1)|0;
   HEAP32[3152>>2] = $99;
   $100 = $c1;
   $101 = +HEAPF64[$100>>3];
   $102 = $c2;
   $103 = HEAP32[$102>>2]|0;
   $104 = (+($103|0));
   $105 = $101 + $104;
   $106 = HEAP32[3152>>2]|0;
   $107 = (($106) - 1)|0;
   $108 = HEAP32[3144>>2]|0;
   $109 = (($108) + ($107<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   HEAPF64[$110>>3] = $105;
  } else {
   $111 = (_newcell(4)|0);
   $112 = HEAP32[3152>>2]|0;
   $113 = HEAP32[3144>>2]|0;
   $114 = (($113) + ($112<<2)|0);
   HEAP32[$114>>2] = $111;
   $115 = HEAP32[3152>>2]|0;
   $116 = (($115) + 1)|0;
   HEAP32[3152>>2] = $116;
   $117 = $c1;
   $118 = +HEAPF64[$117>>3];
   $119 = $c2;
   $120 = +HEAPF64[$119>>3];
   $121 = $118 + $120;
   $122 = HEAP32[3152>>2]|0;
   $123 = (($122) - 1)|0;
   $124 = HEAP32[3144>>2]|0;
   $125 = (($124) + ($123<<2)|0);
   $126 = HEAP32[$125>>2]|0;
   HEAPF64[$126>>3] = $121;
  }
  STACKTOP = sp;return;
 }
}
function _applyMINUS() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $c1 = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $c2 = $9;
 $10 = $c1;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>(8);
 if ($14) {
  $15 = $c1;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)<(38);
  if ($19) {
   $20 = $c1;
   $21 = HEAP32[3152>>2]|0;
   $22 = HEAP32[3144>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[3152>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[3152>>2] = $25;
   _eval();
   $26 = HEAP32[3152>>2]|0;
   $27 = (($26) - 1)|0;
   HEAP32[3152>>2] = $27;
  }
 }
 $28 = $c2;
 $29 = (($28) + 12|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)>(8);
 if ($32) {
  $33 = $c2;
  $34 = (($33) + 12|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($36|0)<(38);
  if ($37) {
   $38 = $c2;
   $39 = HEAP32[3152>>2]|0;
   $40 = HEAP32[3144>>2]|0;
   $41 = (($40) + ($39<<2)|0);
   HEAP32[$41>>2] = $38;
   $42 = HEAP32[3152>>2]|0;
   $43 = (($42) + 1)|0;
   HEAP32[3152>>2] = $43;
   _eval();
   $44 = HEAP32[3152>>2]|0;
   $45 = (($44) - 1)|0;
   HEAP32[3152>>2] = $45;
  }
 }
 $46 = $c1;
 $47 = (($46) + 12|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = ($49|0)==(3);
 if ($50) {
  $51 = $c2;
  $52 = (($51) + 12|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)==(3);
  if ($55) {
   $56 = (_newcell(3)|0);
   $57 = HEAP32[3152>>2]|0;
   $58 = HEAP32[3144>>2]|0;
   $59 = (($58) + ($57<<2)|0);
   HEAP32[$59>>2] = $56;
   $60 = HEAP32[3152>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[3152>>2] = $61;
   $62 = $c1;
   $63 = HEAP32[$62>>2]|0;
   $64 = $c2;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($63) - ($65))|0;
   $67 = HEAP32[3152>>2]|0;
   $68 = (($67) - 1)|0;
   $69 = HEAP32[3144>>2]|0;
   $70 = (($69) + ($68<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   HEAP32[$71>>2] = $66;
  } else {
   $72 = (_newcell(4)|0);
   $73 = HEAP32[3152>>2]|0;
   $74 = HEAP32[3144>>2]|0;
   $75 = (($74) + ($73<<2)|0);
   HEAP32[$75>>2] = $72;
   $76 = HEAP32[3152>>2]|0;
   $77 = (($76) + 1)|0;
   HEAP32[3152>>2] = $77;
   $78 = $c1;
   $79 = HEAP32[$78>>2]|0;
   $80 = (+($79|0));
   $81 = $c2;
   $82 = +HEAPF64[$81>>3];
   $83 = $80 - $82;
   $84 = HEAP32[3152>>2]|0;
   $85 = (($84) - 1)|0;
   $86 = HEAP32[3144>>2]|0;
   $87 = (($86) + ($85<<2)|0);
   $88 = HEAP32[$87>>2]|0;
   HEAPF64[$88>>3] = $83;
  }
  STACKTOP = sp;return;
 } else {
  $89 = $c2;
  $90 = (($89) + 12|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = ($92|0)==(3);
  if ($93) {
   $94 = (_newcell(4)|0);
   $95 = HEAP32[3152>>2]|0;
   $96 = HEAP32[3144>>2]|0;
   $97 = (($96) + ($95<<2)|0);
   HEAP32[$97>>2] = $94;
   $98 = HEAP32[3152>>2]|0;
   $99 = (($98) + 1)|0;
   HEAP32[3152>>2] = $99;
   $100 = $c1;
   $101 = +HEAPF64[$100>>3];
   $102 = $c2;
   $103 = HEAP32[$102>>2]|0;
   $104 = (+($103|0));
   $105 = $101 - $104;
   $106 = HEAP32[3152>>2]|0;
   $107 = (($106) - 1)|0;
   $108 = HEAP32[3144>>2]|0;
   $109 = (($108) + ($107<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   HEAPF64[$110>>3] = $105;
  } else {
   $111 = (_newcell(4)|0);
   $112 = HEAP32[3152>>2]|0;
   $113 = HEAP32[3144>>2]|0;
   $114 = (($113) + ($112<<2)|0);
   HEAP32[$114>>2] = $111;
   $115 = HEAP32[3152>>2]|0;
   $116 = (($115) + 1)|0;
   HEAP32[3152>>2] = $116;
   $117 = $c1;
   $118 = +HEAPF64[$117>>3];
   $119 = $c2;
   $120 = +HEAPF64[$119>>3];
   $121 = $118 - $120;
   $122 = HEAP32[3152>>2]|0;
   $123 = (($122) - 1)|0;
   $124 = HEAP32[3144>>2]|0;
   $125 = (($124) + ($123<<2)|0);
   $126 = HEAP32[$125>>2]|0;
   HEAPF64[$126>>3] = $121;
  }
  STACKTOP = sp;return;
 }
}
function _applyEQ() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_comparecell($4,$9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[2944>>2]|0;
  $17 = $12;
 } else {
  $13 = HEAP32[2952>>2]|0;
  $17 = $13;
 }
 $14 = HEAP32[3152>>2]|0;
 $15 = HEAP32[3144>>2]|0;
 $16 = (($15) + ($14<<2)|0);
 HEAP32[$16>>2] = $17;
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[3152>>2] = $19;
 return;
}
function _applyNE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_comparecell($4,$9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP32[2944>>2]|0;
  $17 = $12;
 } else {
  $13 = HEAP32[2952>>2]|0;
  $17 = $13;
 }
 $14 = HEAP32[3152>>2]|0;
 $15 = HEAP32[3144>>2]|0;
 $16 = (($15) + ($14<<2)|0);
 HEAP32[$16>>2] = $17;
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[3152>>2] = $19;
 return;
}
function _applyLT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_comparecell($4,$9)|0);
 $11 = ($10|0)<(0);
 if ($11) {
  $12 = HEAP32[2944>>2]|0;
  $17 = $12;
 } else {
  $13 = HEAP32[2952>>2]|0;
  $17 = $13;
 }
 $14 = HEAP32[3152>>2]|0;
 $15 = HEAP32[3144>>2]|0;
 $16 = (($15) + ($14<<2)|0);
 HEAP32[$16>>2] = $17;
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[3152>>2] = $19;
 return;
}
function _applyLE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_comparecell($4,$9)|0);
 $11 = ($10|0)<=(0);
 if ($11) {
  $12 = HEAP32[2944>>2]|0;
  $17 = $12;
 } else {
  $13 = HEAP32[2952>>2]|0;
  $17 = $13;
 }
 $14 = HEAP32[3152>>2]|0;
 $15 = HEAP32[3144>>2]|0;
 $16 = (($15) + ($14<<2)|0);
 HEAP32[$16>>2] = $17;
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[3152>>2] = $19;
 return;
}
function _applyGT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_comparecell($4,$9)|0);
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = HEAP32[2944>>2]|0;
  $17 = $12;
 } else {
  $13 = HEAP32[2952>>2]|0;
  $17 = $13;
 }
 $14 = HEAP32[3152>>2]|0;
 $15 = HEAP32[3144>>2]|0;
 $16 = (($15) + ($14<<2)|0);
 HEAP32[$16>>2] = $17;
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[3152>>2] = $19;
 return;
}
function _applyGE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_comparecell($4,$9)|0);
 $11 = ($10|0)>=(0);
 if ($11) {
  $12 = HEAP32[2944>>2]|0;
  $17 = $12;
 } else {
  $13 = HEAP32[2952>>2]|0;
  $17 = $13;
 }
 $14 = HEAP32[3152>>2]|0;
 $15 = HEAP32[3144>>2]|0;
 $16 = (($15) + ($14<<2)|0);
 HEAP32[$16>>2] = $17;
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[3152>>2] = $19;
 return;
}
function _applyUPDATE() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $r1 = 0, $r2 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $r1 = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $r2 = $9;
 $10 = $r1;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>(8);
 if ($14) {
  $15 = $r1;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)<(38);
  if ($19) {
   $20 = $r1;
   $21 = HEAP32[3152>>2]|0;
   $22 = HEAP32[3144>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[3152>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[3152>>2] = $25;
   _eval();
   $26 = HEAP32[3152>>2]|0;
   $27 = (($26) - 1)|0;
   HEAP32[3152>>2] = $27;
  }
 }
 $28 = $r2;
 $29 = (($28) + 12|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)>(8);
 if ($32) {
  $33 = $r2;
  $34 = (($33) + 12|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($36|0)<(38);
  if ($37) {
   $38 = $r2;
   $39 = HEAP32[3152>>2]|0;
   $40 = HEAP32[3144>>2]|0;
   $41 = (($40) + ($39<<2)|0);
   HEAP32[$41>>2] = $38;
   $42 = HEAP32[3152>>2]|0;
   $43 = (($42) + 1)|0;
   HEAP32[3152>>2] = $43;
   _eval();
   $44 = HEAP32[3152>>2]|0;
   $45 = (($44) - 1)|0;
   HEAP32[3152>>2] = $45;
  }
 }
 $46 = $r1;
 $47 = (($46) + 12|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = ($49|0)!=(42);
 if ($50) {
  label = 10;
 } else {
  $51 = $r2;
  $52 = (($51) + 12|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)!=(42);
  if ($55) {
   label = 10;
  } else {
   $56 = $r1;
   $57 = (($56) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $r2;
   $60 = (($59) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($58|0)!=($61|0);
   if ($62) {
    label = 10;
   }
  }
 }
 if ((label|0) == 10) {
  $63 = HEAP32[4584>>2]|0;
  $64 = (($63) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  _runtimeerror(13,$65);
 }
 $66 = (_newcell(42)|0);
 $temp = $66;
 $67 = HEAP32[3152>>2]|0;
 $68 = HEAP32[3144>>2]|0;
 $69 = (($68) + ($67<<2)|0);
 HEAP32[$69>>2] = $66;
 $70 = HEAP32[3152>>2]|0;
 $71 = (($70) + 1)|0;
 HEAP32[3152>>2] = $71;
 $72 = $r1;
 $73 = (($72) + 8|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $temp;
 $76 = (($75) + 8|0);
 HEAP32[$76>>2] = $74;
 while(1) {
  $77 = $r2;
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + 12|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = ($81|0)==(12);
  if ($82) {
   $83 = $r1;
   $84 = HEAP32[$83>>2]|0;
   $88 = $84;
  } else {
   $85 = $r2;
   $86 = HEAP32[$85>>2]|0;
   $88 = $86;
  }
  $87 = $temp;
  HEAP32[$87>>2] = $88;
  $89 = $r1;
  $90 = (($89) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $r1 = $91;
  $92 = $r2;
  $93 = (($92) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $r2 = $94;
  $95 = $r1;
  $96 = (($95) + 12|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = ($98|0)!=(42);
  if ($99) {
   break;
  }
  $100 = $r2;
  $101 = (($100) + 12|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = ($103|0)!=(42);
  if ($104) {
   break;
  }
  $105 = (_newcell(42)|0);
  $106 = $temp;
  $107 = (($106) + 4|0);
  HEAP32[$107>>2] = $105;
  $temp = $105;
 }
 $108 = HEAP32[2968>>2]|0;
 $109 = $temp;
 $110 = (($109) + 4|0);
 HEAP32[$110>>2] = $108;
 $111 = $r1;
 $112 = (($111) + 12|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113&255;
 $115 = ($114|0)==(42);
 if (!($115)) {
  $116 = $r2;
  $117 = (($116) + 12|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $118&255;
  $120 = ($119|0)==(42);
  if (!($120)) {
   STACKTOP = sp;return;
  }
 }
 $121 = HEAP32[4584>>2]|0;
 $122 = (($121) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 _runtimeerror(13,$123);
 STACKTOP = sp;return;
}
function _applySTRICT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 2)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[3152>>2]|0;
 $6 = HEAP32[3144>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 HEAP32[$7>>2] = $4;
 $8 = HEAP32[3152>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[3152>>2] = $9;
 _eval();
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) - 1)|0;
 HEAP32[3152>>2] = $11;
 $12 = (_newcell(22)|0);
 $13 = HEAP32[3152>>2]|0;
 $14 = HEAP32[3144>>2]|0;
 $15 = (($14) + ($13<<2)|0);
 HEAP32[$15>>2] = $12;
 $16 = HEAP32[3152>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[3152>>2] = $17;
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) - 2)|0;
 $20 = HEAP32[3144>>2]|0;
 $21 = (($20) + ($19<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[3152>>2]|0;
 $24 = (($23) - 1)|0;
 $25 = HEAP32[3144>>2]|0;
 $26 = (($25) + ($24<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$27>>2] = $22;
 $28 = HEAP32[3152>>2]|0;
 $29 = (($28) - 3)|0;
 $30 = HEAP32[3144>>2]|0;
 $31 = (($30) + ($29<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[3152>>2]|0;
 $34 = (($33) - 1)|0;
 $35 = HEAP32[3144>>2]|0;
 $36 = (($35) + ($34<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 4|0);
 HEAP32[$38>>2] = $32;
 return;
}
function _Write($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $args = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 $buffer = sp + 24|0;
 $0 = $fmt;
 HEAP32[$args>>2] = $varargs;
 $1 = $0;
 (_vsprintf($buffer,$1,$args)|0);
 _WriteString($buffer);
 STACKTOP = sp;return;
}
function _WriteCell($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 _WriteC($1,0);
 STACKTOP = sp;return;
}
function _WriteType($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 _WriteT($1,0);
 STACKTOP = sp;return;
}
function _toplevel() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _WriteEval(0);
 return;
}
function _WriteC($c,$parentheses) {
 $c = $c|0;
 $parentheses = $parentheses|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fun = 0, $k = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer31 = sp + 24|0;
 $vararg_buffer28 = sp + 88|0;
 $vararg_buffer25 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer16 = sp + 32|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 48|0;
 $vararg_buffer7 = sp + 56|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $c;
 $1 = $parentheses;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = (($4) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 do {
  switch ($7|0) {
  case 25:  {
   $149 = HEAP32[2568>>2]|0;
   $150 = $0;
   $151 = (($150) + 8|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = (($149) + (($152*52)|0)|0);
   $fun = $153;
   $154 = $1;
   $155 = ($154|0)!=(0);
   if ($155) {
    _WriteString(4664);
   }
   $156 = $fun;
   $157 = (($156) + 8|0);
   $158 = HEAP32[$157>>2]|0;
   _WriteString($158);
   _WriteString(9008);
   $159 = $0;
   $160 = HEAP32[$159>>2]|0;
   _WriteC($160,1);
   $161 = $1;
   $162 = ($161|0)!=(0);
   if ($162) {
    _WriteString(4672);
   }
   STACKTOP = sp;return;
   break;
  }
  case 24:  {
   $180 = HEAP32[2568>>2]|0;
   $181 = $0;
   $182 = (($181) + 8|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = (($180) + (($183*52)|0)|0);
   $fun = $184;
   $185 = $1;
   $186 = ($185|0)!=(0);
   if ($186) {
    _WriteString(4664);
   }
   $187 = $fun;
   $188 = (($187) + 8|0);
   $189 = HEAP32[$188>>2]|0;
   _WriteString($189);
   $190 = $fun;
   $191 = (($190) + 12|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = ($192|0)==(0);
   if ($193) {
   } else {
    $194 = $fun;
    $195 = (($194) + 12|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($196|0)==(1);
    if ($197) {
     $198 = $0;
     $199 = (($198) + 4|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = HEAP32[3152>>2]|0;
     $202 = HEAP32[3144>>2]|0;
     $203 = (($202) + ($201<<2)|0);
     HEAP32[$203>>2] = $200;
     $204 = HEAP32[3152>>2]|0;
     $205 = (($204) + 1)|0;
     HEAP32[3152>>2] = $205;
    } else {
     $206 = $fun;
     $207 = (($206) + 12|0);
     $208 = HEAP32[$207>>2]|0;
     $k = $208;
     while(1) {
      $209 = $k;
      $210 = ($209|0)>(1);
      if (!($210)) {
       break;
      }
      $211 = $0;
      $212 = HEAP32[$211>>2]|0;
      $213 = HEAP32[3152>>2]|0;
      $214 = HEAP32[3144>>2]|0;
      $215 = (($214) + ($213<<2)|0);
      HEAP32[$215>>2] = $212;
      $216 = HEAP32[3152>>2]|0;
      $217 = (($216) + 1)|0;
      HEAP32[3152>>2] = $217;
      $218 = $0;
      $219 = (($218) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $0 = $220;
      $221 = $k;
      $222 = (($221) + -1)|0;
      $k = $222;
     }
     $223 = $0;
     $224 = HEAP32[3152>>2]|0;
     $225 = HEAP32[3144>>2]|0;
     $226 = (($225) + ($224<<2)|0);
     HEAP32[$226>>2] = $223;
     $227 = HEAP32[3152>>2]|0;
     $228 = (($227) + 1)|0;
     HEAP32[3152>>2] = $228;
    }
   }
   $229 = $fun;
   $230 = (($229) + 12|0);
   $231 = HEAP32[$230>>2]|0;
   $k = $231;
   while(1) {
    $232 = $k;
    $233 = ($232|0)>(0);
    if (!($233)) {
     break;
    }
    _WriteString(9008);
    $234 = HEAP32[3152>>2]|0;
    $235 = (($234) + -1)|0;
    HEAP32[3152>>2] = $235;
    $236 = HEAP32[3144>>2]|0;
    $237 = (($236) + ($235<<2)|0);
    $238 = HEAP32[$237>>2]|0;
    _WriteC($238,1);
    $239 = $k;
    $240 = (($239) + -1)|0;
    $k = $240;
   }
   $241 = $1;
   $242 = ($241|0)!=(0);
   if ($242) {
    _WriteString(4672);
   }
   STACKTOP = sp;return;
   break;
  }
  case 26:  {
   $163 = HEAP32[2568>>2]|0;
   $164 = $0;
   $165 = (($164) + 8|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = (($163) + (($166*52)|0)|0);
   $fun = $167;
   $168 = $1;
   $169 = ($168|0)!=(0);
   if ($169) {
    _WriteString(4664);
   }
   $170 = $0;
   $171 = HEAP32[$170>>2]|0;
   _WriteC($171,1);
   _WriteString(9008);
   $172 = $fun;
   $173 = (($172) + 8|0);
   $174 = HEAP32[$173>>2]|0;
   _WriteString($174);
   _WriteString(9008);
   $175 = $0;
   $176 = (($175) + 4|0);
   $177 = HEAP32[$176>>2]|0;
   _WriteC($177,1);
   $178 = $1;
   $179 = ($178|0)!=(0);
   if ($179) {
    _WriteString(4672);
   }
   STACKTOP = sp;return;
   break;
  }
  case 20:  {
   $105 = $1;
   $106 = ($105|0)!=(0);
   if ($106) {
    _WriteString(4664);
   }
   $107 = $0;
   $108 = HEAP32[$107>>2]|0;
   _WriteC($108,0);
   _WriteString(4832);
   $109 = $0;
   $110 = (($109) + 4|0);
   $111 = HEAP32[$110>>2]|0;
   _WriteC($111,0);
   $112 = $1;
   $113 = ($112|0)!=(0);
   if ($113) {
    _WriteString(4672);
   }
   STACKTOP = sp;return;
   break;
  }
  case 11:  {
   $93 = $0;
   $94 = (($93) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)==(3);
   if ($96) {
    _WriteString(4696);
   } else {
    $97 = $0;
    $98 = (($97) + 8|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(2);
    if ($100) {
     _WriteString(4712);
    } else {
     $101 = $0;
     $102 = (($101) + 8|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103|0)==(5);
     if ($104) {
      _WriteString(4704);
     } else {
      _WriteString(4824);
     }
    }
   }
   STACKTOP = sp;return;
   break;
  }
  case 12:  {
   _WriteString(4840);
   STACKTOP = sp;return;
   break;
  }
  case 35:  {
   _WriteString(4632);
   $114 = $0;
   $115 = HEAP32[$114>>2]|0;
   _WriteElems($115,39,8984,4648,8984,0);
   _WriteString(4856);
   $116 = $0;
   $117 = (($116) + 4|0);
   $118 = HEAP32[$117>>2]|0;
   $0 = $118;
   while(1) {
    $119 = $0;
    $120 = (($119) + 12|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121&255;
    $123 = ($122|0)==(35);
    if (!($123)) {
     break;
    }
    $124 = $0;
    $125 = HEAP32[$124>>2]|0;
    $126 = (($125) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)!=(0|0);
    if ($128) {
     $129 = $0;
     $130 = HEAP32[$129>>2]|0;
     $131 = HEAP32[$130>>2]|0;
     _WriteElems($131,39,8984,4648,8984,0);
     _WriteString(4864);
     $132 = $0;
     $133 = HEAP32[$132>>2]|0;
     $134 = (($133) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     _WriteElems($135,39,8984,4648,8984,0);
    } else {
     $136 = $0;
     $137 = HEAP32[$136>>2]|0;
     $138 = HEAP32[$137>>2]|0;
     _WriteC($138,0);
    }
    $139 = $0;
    $140 = (($139) + 4|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + 12|0);
    $143 = HEAP8[$142>>0]|0;
    $144 = $143&255;
    $145 = ($144|0)==(35);
    if ($145) {
     _WriteString(4872);
    }
    $146 = $0;
    $147 = (($146) + 4|0);
    $148 = HEAP32[$147>>2]|0;
    $0 = $148;
   }
   _WriteString(4656);
   STACKTOP = sp;return;
   break;
  }
  case 16:  {
   $13 = $0;
   $14 = (($13) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)>(0);
   if ($16) {
    $17 = $0;
    $18 = (($17) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    HEAP32[$vararg_buffer>>2] = $19;
    _Write(4768,$vararg_buffer);
   } else {
    $20 = $0;
    $21 = (($20) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (0 - ($22))|0;
    HEAP32[$vararg_buffer1>>2] = $23;
    _Write(4776,$vararg_buffer1);
   }
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $31 = $0;
   $32 = (($31) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0);
   $35 = $34 ? 9448 : 9456;
   _WriteString($35);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $24 = $0;
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $25;
   _Write(8368,$vararg_buffer4);
   STACKTOP = sp;return;
   break;
  }
  case 19:  {
   $71 = $1;
   $72 = ($71|0)!=(0);
   if ($72) {
    _WriteString(4664);
   }
   while(1) {
    _WriteString(4808);
    $73 = $0;
    $74 = HEAP32[$73>>2]|0;
    _WriteC($74,1);
    _WriteString(9008);
    $75 = $0;
    $76 = (($75) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)>(0);
    if ($78) {
     $79 = $0;
     $80 = (($79) + 8|0);
     $81 = HEAP32[$80>>2]|0;
     HEAP32[$vararg_buffer13>>2] = $81;
     _Write(4768,$vararg_buffer13);
    } else {
     $82 = $0;
     $83 = (($82) + 8|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (0 - ($84))|0;
     HEAP32[$vararg_buffer16>>2] = $85;
     _Write(4776,$vararg_buffer16);
    }
    $86 = $0;
    $87 = (($86) + 4|0);
    $88 = HEAP32[$87>>2]|0;
    $0 = $88;
    $89 = $0;
    $90 = ($89|0)==(0|0);
    if ($90) {
     break;
    }
    _WriteString(4816);
   }
   $91 = $1;
   $92 = ($91|0)!=(0);
   if ($92) {
    _WriteString(4672);
   }
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $26 = $0;
   $27 = +HEAPF64[$26>>3];
   HEAPF64[tempDoublePtr>>3]=$27;HEAP32[$vararg_buffer7>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer7+4>>2]=HEAP32[tempDoublePtr+4>>2];
   _Write(8360,$vararg_buffer7);
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   _WriteString(9464);
   STACKTOP = sp;return;
   break;
  }
  case 39:  {
   $36 = $0;
   $37 = $1;
   _WriteList($36,$37);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $28 = $0;
   $29 = (($28) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   HEAP32[$vararg_buffer10>>2] = $30;
   _Write(4792,$vararg_buffer10);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   _WriteString(4720);
   STACKTOP = sp;return;
   break;
  }
  case 22:  {
   $8 = $1;
   $9 = ($8|0)!=(0);
   if ($9) {
    _WriteString(4664);
   }
   $10 = $0;
   _WriteApply($10);
   $11 = $1;
   $12 = ($11|0)!=(0);
   if ($12) {
    _WriteString(4672);
   }
   STACKTOP = sp;return;
   break;
  }
  case 41:  {
   $45 = $0;
   _WriteElems($45,41,4664,4648,4672,0);
   STACKTOP = sp;return;
   break;
  }
  case 40:  {
   $38 = $0;
   $39 = $1;
   $40 = ($39|0)!=(0);
   $41 = $40 ? 4664 : 8984;
   $42 = $1;
   $43 = ($42|0)!=(0);
   $44 = $43 ? 4672 : 8984;
   _WriteElems($38,40,$41,9008,$44,1);
   STACKTOP = sp;return;
   break;
  }
  case 18:  {
   $62 = $1;
   $63 = ($62|0)!=(0);
   if ($63) {
    _WriteString(4664);
   }
   _WriteString(4808);
   $64 = $0;
   $65 = HEAP32[$64>>2]|0;
   _WriteC($65,1);
   _WriteString(9008);
   $66 = $0;
   $67 = (($66) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   _WriteC($68,1);
   $69 = $1;
   $70 = ($69|0)!=(0);
   if ($70) {
    _WriteString(4672);
   }
   STACKTOP = sp;return;
   break;
  }
  case 42:  {
   $46 = $0;
   _WriteElems($46,42,4680,4648,4688,0);
   STACKTOP = sp;return;
   break;
  }
  case 23:  {
   $47 = $1;
   $48 = ($47|0)!=(0);
   if ($48) {
    _WriteString(4664);
   }
   _WriteString(4800);
   $49 = $0;
   $50 = HEAP32[$49>>2]|0;
   _WriteC($50,1);
   _WriteString(9008);
   $51 = $0;
   $52 = (($51) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP32[$53>>2]|0;
   _WriteC($54,1);
   _WriteString(9008);
   $55 = $0;
   $56 = (($55) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   _WriteC($59,1);
   $60 = $1;
   $61 = ($60|0)!=(0);
   if ($61) {
    _WriteString(4672);
   }
   STACKTOP = sp;return;
   break;
  }
  case 32:  {
   $271 = $1;
   $272 = ($271|0)!=(0);
   if ($272) {
    _WriteString(4664);
   }
   $273 = $0;
   $274 = (($273) + 4|0);
   $275 = HEAP32[$274>>2]|0;
   _WriteC($275,0);
   _WriteString(4904);
   $k = 0;
   $276 = $0;
   $277 = HEAP32[$276>>2]|0;
   $0 = $277;
   while(1) {
    $278 = $0;
    $279 = (($278) + 12|0);
    $280 = HEAP8[$279>>0]|0;
    $281 = $280&255;
    $282 = ($281|0)==(39);
    if (!($282)) {
     break;
    }
    $283 = $k;
    $284 = (($283) + -1)|0;
    $k = $284;
    $285 = (0 - ($283))|0;
    HEAP32[$vararg_buffer22>>2] = $285;
    _Write(4912,$vararg_buffer22);
    $286 = $0;
    $287 = HEAP32[$286>>2]|0;
    _WriteC($287,0);
    _WriteString(4872);
    $288 = $0;
    $289 = (($288) + 4|0);
    $290 = HEAP32[$289>>2]|0;
    $0 = $290;
   }
   _WriteString(4928);
   $291 = $1;
   $292 = ($291|0)!=(0);
   if ($292) {
    _WriteString(4672);
   }
   STACKTOP = sp;return;
   break;
  }
  case 28: case 27:  {
   $259 = $0;
   $260 = (($259) + 8|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = $0;
   $263 = (($262) + 12|0);
   $264 = HEAP8[$263>>0]|0;
   _WriteDirector($261,$264);
   $265 = $1;
   $266 = ($265|0)!=(0);
   if ($266) {
    _WriteString(4664);
   }
   $267 = $0;
   $268 = HEAP32[$267>>2]|0;
   _WriteC($268,1);
   $269 = $1;
   $270 = ($269|0)!=(0);
   if ($270) {
    _WriteString(4672);
   }
   STACKTOP = sp;return;
   break;
  }
  case 31:  {
   _WriteString(4896);
   $257 = $0;
   $258 = HEAP32[$257>>2]|0;
   _WriteC($258,0);
   _WriteString(4672);
   STACKTOP = sp;return;
   break;
  }
  case 13:  {
   $250 = HEAP32[2568>>2]|0;
   $251 = $0;
   $252 = (($251) + 8|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = (($250) + (($253*52)|0)|0);
   $255 = (($254) + 8|0);
   $256 = HEAP32[$255>>2]|0;
   HEAP32[$vararg_buffer19>>2] = $256;
   _Write(4880,$vararg_buffer19);
   STACKTOP = sp;return;
   break;
  }
  case 1: case 14:  {
   $243 = HEAP32[2568>>2]|0;
   $244 = $0;
   $245 = (($244) + 8|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = (($243) + (($246*52)|0)|0);
   $248 = (($247) + 8|0);
   $249 = HEAP32[$248>>2]|0;
   _WriteFunc($249);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   $299 = HEAP32[2568>>2]|0;
   $300 = $0;
   $301 = HEAP32[$300>>2]|0;
   $302 = (($301) + 8|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = (($299) + (($303*52)|0)|0);
   $305 = (($304) + 8|0);
   $306 = HEAP32[$305>>2]|0;
   _WriteString($306);
   STACKTOP = sp;return;
   break;
  }
  case 30: case 29:  {
   _WriteString(4632);
   $307 = $0;
   $308 = HEAP32[$307>>2]|0;
   $309 = HEAP32[$308>>2]|0;
   _WriteC($309,0);
   $k = 1;
   while(1) {
    $310 = $k;
    $311 = $0;
    $312 = (($311) + 8|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = ($310|0)<=($313|0);
    if (!($314)) {
     break;
    }
    $315 = $k;
    HEAP32[$vararg_buffer25>>2] = $315;
    _Write(4944,$vararg_buffer25);
    $316 = $k;
    $317 = (($316) + 1)|0;
    $k = $317;
   }
   _WriteString(4952);
   $k = 2;
   while(1) {
    $318 = $k;
    $319 = $0;
    $320 = (($319) + 8|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = ($318|0)<=($321|0);
    if (!($322)) {
     break;
    }
    $323 = $k;
    HEAP32[$vararg_buffer28>>2] = $323;
    _Write(4960,$vararg_buffer28);
    $324 = $k;
    $325 = (($324) + 1)|0;
    $k = $325;
   }
   _WriteString(4968);
   $326 = $0;
   $327 = HEAP32[$326>>2]|0;
   $328 = (($327) + 4|0);
   $329 = HEAP32[$328>>2]|0;
   $330 = (($329) + 4|0);
   $331 = HEAP32[$330>>2]|0;
   _WriteC($331,0);
   $332 = $0;
   $333 = HEAP32[$332>>2]|0;
   $334 = (($333) + 4|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = HEAP32[$335>>2]|0;
   $337 = ($336|0)!=(0|0);
   if ($337) {
    _WriteString(4872);
    $338 = $0;
    $339 = HEAP32[$338>>2]|0;
    $340 = (($339) + 4|0);
    $341 = HEAP32[$340>>2]|0;
    $342 = HEAP32[$341>>2]|0;
    _WriteC($342,0);
    $k = 1;
    while(1) {
     $343 = $k;
     $344 = $0;
     $345 = (($344) + 8|0);
     $346 = HEAP32[$345>>2]|0;
     $347 = ($343|0)<=($346|0);
     if (!($347)) {
      break;
     }
     $348 = $k;
     HEAP32[$vararg_buffer31>>2] = $348;
     _Write(4944,$vararg_buffer31);
     $349 = $k;
     $350 = (($349) + 1)|0;
     $k = $350;
    }
   }
   _WriteString(4656);
   STACKTOP = sp;return;
   break;
  }
  case 37:  {
   $298 = $0;
   _WriteElems($298,37,4664,4856,4672,0);
   STACKTOP = sp;return;
   break;
  }
  case 36:  {
   $293 = $0;
   $294 = HEAP32[$293>>2]|0;
   _WriteC($294,0);
   _WriteString(4736);
   $295 = $0;
   $296 = (($295) + 4|0);
   $297 = HEAP32[$296>>2]|0;
   _WriteC($297,0);
   STACKTOP = sp;return;
   break;
  }
  default: {
   _systemerror(7);
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _WriteT($c,$parentheses) {
 $c = $c|0;
 $parentheses = $parentheses|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $parentheses;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = (($4) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 do {
  switch ($7|0) {
  case 10:  {
   $k = 1;
   while(1) {
    $63 = $k;
    $64 = $0;
    $65 = (($64) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($63|0)<=($66|0);
    if (!($67)) {
     break;
    }
    _WriteString(4744);
    $68 = $k;
    $69 = (($68) + 1)|0;
    $k = $69;
   }
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   _WriteString(4720);
   STACKTOP = sp;return;
   break;
  }
  case 33:  {
   $70 = $0;
   $71 = HEAP32[$70>>2]|0;
   _WriteT($71,0);
   _WriteString(4752);
   $72 = $0;
   $73 = (($72) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   _WriteT($74,0);
   STACKTOP = sp;return;
   break;
  }
  case 41:  {
   _WriteString(4664);
   $10 = $0;
   $11 = HEAP32[$10>>2]|0;
   _WriteT($11,0);
   while(1) {
    $12 = $0;
    $13 = (($12) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 12|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16&255;
    $18 = ($17|0)==(41);
    if (!($18)) {
     break;
    }
    _WriteString(4648);
    $19 = $0;
    $20 = (($19) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $0 = $21;
    $22 = $0;
    $23 = HEAP32[$22>>2]|0;
    _WriteT($23,0);
   }
   _WriteString(4672);
   STACKTOP = sp;return;
   break;
  }
  case 34:  {
   $75 = $0;
   $76 = HEAP32[$75>>2]|0;
   _WriteT($76,0);
   _WriteString(4760);
   $77 = $0;
   $78 = (($77) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   _WriteT($79,0);
   STACKTOP = sp;return;
   break;
  }
  case 39:  {
   _WriteString(4632);
   $8 = $0;
   $9 = HEAP32[$8>>2]|0;
   _WriteT($9,0);
   _WriteString(4656);
   STACKTOP = sp;return;
   break;
  }
  case 40:  {
   $80 = $1;
   $81 = ($80|0)!=(0);
   if ($81) {
    _WriteString(4664);
   }
   $82 = HEAP32[2568>>2]|0;
   $83 = $0;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + 8|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($82) + (($86*52)|0)|0);
   $88 = (($87) + 8|0);
   $89 = HEAP32[$88>>2]|0;
   _WriteString($89);
   while(1) {
    $90 = $0;
    $91 = (($90) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + 12|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $94&255;
    $96 = ($95|0)==(40);
    if (!($96)) {
     break;
    }
    _WriteString(9008);
    $97 = $0;
    $98 = (($97) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $0 = $99;
    $100 = $0;
    $101 = HEAP32[$100>>2]|0;
    _WriteT($101,1);
   }
   $102 = $1;
   $103 = ($102|0)!=(0);
   if ($103) {
    _WriteString(4672);
   }
   STACKTOP = sp;return;
   break;
  }
  case 22:  {
   $48 = $1;
   $49 = ($48|0)!=(0);
   if ($49) {
    _WriteString(4664);
   }
   while(1) {
    $50 = $0;
    $51 = (($50) + 12|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = ($53|0)==(22);
    if (!($54)) {
     break;
    }
    $55 = $0;
    $56 = HEAP32[$55>>2]|0;
    _WriteT($56,1);
    _WriteString(4736);
    $57 = $0;
    $58 = (($57) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $0 = $59;
   }
   $60 = $0;
   _WriteT($60,0);
   $61 = $1;
   $62 = ($61|0)!=(0);
   if ($62) {
    _WriteString(4672);
   }
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   _WriteString(4704);
   STACKTOP = sp;return;
   break;
  }
  case 42:  {
   _WriteString(4680);
   $24 = $0;
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$25>>2]|0;
   _WriteCell($26);
   _WriteString(4728);
   $27 = $0;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   _WriteT($30,0);
   while(1) {
    $31 = $0;
    $32 = (($31) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 12|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = ($36|0)==(42);
    if (!($37)) {
     break;
    }
    _WriteString(4648);
    $38 = $0;
    $39 = (($38) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $0 = $40;
    $41 = $0;
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[$42>>2]|0;
    _WriteCell($43);
    _WriteString(4728);
    $44 = $0;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    _WriteT($47,0);
   }
   _WriteString(4688);
   STACKTOP = sp;return;
   break;
  }
  case 4: case 3:  {
   _WriteString(4696);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   _WriteString(4712);
   STACKTOP = sp;return;
   break;
  }
  default: {
   _systemerror(8);
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _WriteEval($parentheses) {
 $parentheses = $parentheses|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $charlist = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $parentheses;
 $1 = HEAP32[3152>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[3152>>2] = $2;
 $3 = HEAP32[3144>>2]|0;
 $4 = (($3) + ($2<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $temp = $5;
 $6 = $temp;
 $7 = (($6) + 12|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(8);
 if ($10) {
  $11 = $temp;
  $12 = (($11) + 12|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)<(38);
  if ($15) {
   $16 = $temp;
   $17 = HEAP32[3152>>2]|0;
   $18 = HEAP32[3144>>2]|0;
   $19 = (($18) + ($17<<2)|0);
   HEAP32[$19>>2] = $16;
   $20 = HEAP32[3152>>2]|0;
   $21 = (($20) + 1)|0;
   HEAP32[3152>>2] = $21;
   _eval();
   $22 = HEAP32[3152>>2]|0;
   $23 = (($22) - 1)|0;
   HEAP32[3152>>2] = $23;
  }
 }
 $24 = $temp;
 $25 = (($24) + 12|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 switch ($27|0) {
 case 39:  {
  $29 = $temp;
  $30 = (($29) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[3152>>2]|0;
  $33 = HEAP32[3144>>2]|0;
  $34 = (($33) + ($32<<2)|0);
  HEAP32[$34>>2] = $31;
  $35 = HEAP32[3152>>2]|0;
  $36 = (($35) + 1)|0;
  HEAP32[3152>>2] = $36;
  $37 = $temp;
  $38 = HEAP32[$37>>2]|0;
  $temp = $38;
  $39 = $temp;
  $40 = (($39) + 12|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)>(8);
  if ($43) {
   $44 = $temp;
   $45 = (($44) + 12|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = ($47|0)<(38);
   if ($48) {
    $49 = $temp;
    $50 = HEAP32[3152>>2]|0;
    $51 = HEAP32[3144>>2]|0;
    $52 = (($51) + ($50<<2)|0);
    HEAP32[$52>>2] = $49;
    $53 = HEAP32[3152>>2]|0;
    $54 = (($53) + 1)|0;
    HEAP32[3152>>2] = $54;
    _eval();
    $55 = HEAP32[3152>>2]|0;
    $56 = (($55) - 1)|0;
    HEAP32[3152>>2] = $56;
   }
  }
  $57 = $temp;
  $58 = (($57) + 12|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = ($60|0)==(5);
  $62 = $61&1;
  $charlist = $62;
  $63 = $charlist;
  $64 = ($63|0)!=(0);
  if ($64) {
   _WriteString(4640);
   $71 = $temp;
   $72 = (($71) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   HEAP32[$vararg_buffer>>2] = $73;
   _Write(8400,$vararg_buffer);
  } else {
   _WriteString(4632);
   $65 = $temp;
   $66 = HEAP32[3152>>2]|0;
   $67 = HEAP32[3144>>2]|0;
   $68 = (($67) + ($66<<2)|0);
   HEAP32[$68>>2] = $65;
   $69 = HEAP32[3152>>2]|0;
   $70 = (($69) + 1)|0;
   HEAP32[3152>>2] = $70;
   _WriteEval(0);
  }
  while(1) {
   _eval();
   $74 = HEAP32[3152>>2]|0;
   $75 = (($74) + -1)|0;
   HEAP32[3152>>2] = $75;
   $76 = HEAP32[3144>>2]|0;
   $77 = (($76) + ($75<<2)|0);
   $78 = HEAP32[$77>>2]|0;
   $temp = $78;
   $79 = $temp;
   $80 = (($79) + 12|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = ($82|0)!=(39);
   if ($83) {
    break;
   }
   $84 = $temp;
   $85 = (($84) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = HEAP32[3152>>2]|0;
   $88 = HEAP32[3144>>2]|0;
   $89 = (($88) + ($87<<2)|0);
   HEAP32[$89>>2] = $86;
   $90 = HEAP32[3152>>2]|0;
   $91 = (($90) + 1)|0;
   HEAP32[3152>>2] = $91;
   $92 = $temp;
   $93 = HEAP32[$92>>2]|0;
   $temp = $93;
   $94 = $charlist;
   $95 = ($94|0)!=(0);
   if ($95) {
    $102 = $temp;
    $103 = (($102) + 12|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = ($105|0)>(8);
    if ($106) {
     $107 = $temp;
     $108 = (($107) + 12|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = $109&255;
     $111 = ($110|0)<(38);
     if ($111) {
      $112 = $temp;
      $113 = HEAP32[3152>>2]|0;
      $114 = HEAP32[3144>>2]|0;
      $115 = (($114) + ($113<<2)|0);
      HEAP32[$115>>2] = $112;
      $116 = HEAP32[3152>>2]|0;
      $117 = (($116) + 1)|0;
      HEAP32[3152>>2] = $117;
      _eval();
      $118 = HEAP32[3152>>2]|0;
      $119 = (($118) - 1)|0;
      HEAP32[3152>>2] = $119;
     }
    }
    $120 = $temp;
    $121 = (($120) + 8|0);
    $122 = HEAP32[$121>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $122;
    _Write(8400,$vararg_buffer1);
   } else {
    _WriteString(4648);
    $96 = $temp;
    $97 = HEAP32[3152>>2]|0;
    $98 = HEAP32[3144>>2]|0;
    $99 = (($98) + ($97<<2)|0);
    HEAP32[$99>>2] = $96;
    $100 = HEAP32[3152>>2]|0;
    $101 = (($100) + 1)|0;
    HEAP32[3152>>2] = $101;
    _WriteEval(0);
   }
  }
  $123 = $charlist;
  $124 = ($123|0)!=(0);
  if ($124) {
   _WriteString(4640);
  } else {
   _WriteString(4656);
  }
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $28 = $temp;
  _WriteCell($28);
  STACKTOP = sp;return;
  break;
 }
 case 40:  {
  $125 = $0;
  $126 = ($125|0)!=(0);
  if ($126) {
   _WriteString(4664);
  }
  $127 = $temp;
  $128 = (($127) + 4|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = HEAP32[3152>>2]|0;
  $131 = HEAP32[3144>>2]|0;
  $132 = (($131) + ($130<<2)|0);
  HEAP32[$132>>2] = $129;
  $133 = HEAP32[3152>>2]|0;
  $134 = (($133) + 1)|0;
  HEAP32[3152>>2] = $134;
  $135 = $temp;
  $136 = HEAP32[$135>>2]|0;
  $137 = HEAP32[3152>>2]|0;
  $138 = HEAP32[3144>>2]|0;
  $139 = (($138) + ($137<<2)|0);
  HEAP32[$139>>2] = $136;
  $140 = HEAP32[3152>>2]|0;
  $141 = (($140) + 1)|0;
  HEAP32[3152>>2] = $141;
  _WriteEval(1);
  while(1) {
   $142 = HEAP32[3152>>2]|0;
   $143 = (($142) + -1)|0;
   HEAP32[3152>>2] = $143;
   $144 = HEAP32[3144>>2]|0;
   $145 = (($144) + ($143<<2)|0);
   $146 = HEAP32[$145>>2]|0;
   $temp = $146;
   $147 = $temp;
   $148 = (($147) + 12|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = ($150|0)!=(40);
   if ($151) {
    break;
   }
   $152 = $temp;
   $153 = (($152) + 4|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = HEAP32[3152>>2]|0;
   $156 = HEAP32[3144>>2]|0;
   $157 = (($156) + ($155<<2)|0);
   HEAP32[$157>>2] = $154;
   $158 = HEAP32[3152>>2]|0;
   $159 = (($158) + 1)|0;
   HEAP32[3152>>2] = $159;
   $160 = $temp;
   $161 = HEAP32[$160>>2]|0;
   $162 = HEAP32[3152>>2]|0;
   $163 = HEAP32[3144>>2]|0;
   $164 = (($163) + ($162<<2)|0);
   HEAP32[$164>>2] = $161;
   $165 = HEAP32[3152>>2]|0;
   $166 = (($165) + 1)|0;
   HEAP32[3152>>2] = $166;
   _WriteString(9008);
   _WriteEval(1);
  }
  $167 = $0;
  $168 = ($167|0)!=(0);
  if ($168) {
   _WriteString(4672);
  }
  STACKTOP = sp;return;
  break;
 }
 case 42:  {
  _WriteString(4680);
  $209 = $temp;
  $210 = (($209) + 4|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = HEAP32[3152>>2]|0;
  $213 = HEAP32[3144>>2]|0;
  $214 = (($213) + ($212<<2)|0);
  HEAP32[$214>>2] = $211;
  $215 = HEAP32[3152>>2]|0;
  $216 = (($215) + 1)|0;
  HEAP32[3152>>2] = $216;
  $217 = $temp;
  $218 = HEAP32[$217>>2]|0;
  $219 = HEAP32[3152>>2]|0;
  $220 = HEAP32[3144>>2]|0;
  $221 = (($220) + ($219<<2)|0);
  HEAP32[$221>>2] = $218;
  $222 = HEAP32[3152>>2]|0;
  $223 = (($222) + 1)|0;
  HEAP32[3152>>2] = $223;
  _WriteEval(0);
  while(1) {
   $224 = HEAP32[3152>>2]|0;
   $225 = (($224) + -1)|0;
   HEAP32[3152>>2] = $225;
   $226 = HEAP32[3144>>2]|0;
   $227 = (($226) + ($225<<2)|0);
   $228 = HEAP32[$227>>2]|0;
   $temp = $228;
   $229 = $temp;
   $230 = (($229) + 12|0);
   $231 = HEAP8[$230>>0]|0;
   $232 = $231&255;
   $233 = ($232|0)!=(42);
   if ($233) {
    break;
   }
   $234 = $temp;
   $235 = (($234) + 4|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = HEAP32[3152>>2]|0;
   $238 = HEAP32[3144>>2]|0;
   $239 = (($238) + ($237<<2)|0);
   HEAP32[$239>>2] = $236;
   $240 = HEAP32[3152>>2]|0;
   $241 = (($240) + 1)|0;
   HEAP32[3152>>2] = $241;
   $242 = $temp;
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[3152>>2]|0;
   $245 = HEAP32[3144>>2]|0;
   $246 = (($245) + ($244<<2)|0);
   HEAP32[$246>>2] = $243;
   $247 = HEAP32[3152>>2]|0;
   $248 = (($247) + 1)|0;
   HEAP32[3152>>2] = $248;
   _WriteString(4648);
   _WriteEval(0);
  }
  _WriteString(4688);
  STACKTOP = sp;return;
  break;
 }
 case 41:  {
  _WriteString(4664);
  $169 = $temp;
  $170 = (($169) + 4|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = HEAP32[3152>>2]|0;
  $173 = HEAP32[3144>>2]|0;
  $174 = (($173) + ($172<<2)|0);
  HEAP32[$174>>2] = $171;
  $175 = HEAP32[3152>>2]|0;
  $176 = (($175) + 1)|0;
  HEAP32[3152>>2] = $176;
  $177 = $temp;
  $178 = HEAP32[$177>>2]|0;
  $179 = HEAP32[3152>>2]|0;
  $180 = HEAP32[3144>>2]|0;
  $181 = (($180) + ($179<<2)|0);
  HEAP32[$181>>2] = $178;
  $182 = HEAP32[3152>>2]|0;
  $183 = (($182) + 1)|0;
  HEAP32[3152>>2] = $183;
  _WriteEval(0);
  while(1) {
   $184 = HEAP32[3152>>2]|0;
   $185 = (($184) + -1)|0;
   HEAP32[3152>>2] = $185;
   $186 = HEAP32[3144>>2]|0;
   $187 = (($186) + ($185<<2)|0);
   $188 = HEAP32[$187>>2]|0;
   $temp = $188;
   $189 = $temp;
   $190 = (($189) + 12|0);
   $191 = HEAP8[$190>>0]|0;
   $192 = $191&255;
   $193 = ($192|0)!=(41);
   if ($193) {
    break;
   }
   $194 = $temp;
   $195 = (($194) + 4|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = HEAP32[3152>>2]|0;
   $198 = HEAP32[3144>>2]|0;
   $199 = (($198) + ($197<<2)|0);
   HEAP32[$199>>2] = $196;
   $200 = HEAP32[3152>>2]|0;
   $201 = (($200) + 1)|0;
   HEAP32[3152>>2] = $201;
   $202 = $temp;
   $203 = HEAP32[$202>>2]|0;
   $204 = HEAP32[3152>>2]|0;
   $205 = HEAP32[3144>>2]|0;
   $206 = (($205) + ($204<<2)|0);
   HEAP32[$206>>2] = $203;
   $207 = HEAP32[3152>>2]|0;
   $208 = (($207) + 1)|0;
   HEAP32[3152>>2] = $208;
   _WriteString(4648);
   _WriteEval(0);
  }
  _WriteString(4672);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $249 = $temp;
  _WriteCell($249);
  STACKTOP = sp;return;
 }
 }
}
function _WriteApply($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $k = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $k = 0;
 while(1) {
  $1 = $0;
  $2 = (($1) + 12|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==(22);
  if (!($5)) {
   break;
  }
  $6 = $0;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[3152>>2]|0;
  $10 = HEAP32[3144>>2]|0;
  $11 = (($10) + ($9<<2)|0);
  HEAP32[$11>>2] = $8;
  $12 = HEAP32[3152>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[3152>>2] = $13;
  $14 = $k;
  $15 = (($14) + 1)|0;
  $k = $15;
  $16 = $0;
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
 }
 $18 = $k;
 $19 = ($18|0)==(2);
 if ($19) {
  $20 = $0;
  $21 = (($20) + 12|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)==(14);
  if ($24) {
   $25 = HEAP32[2568>>2]|0;
   $26 = $0;
   $27 = (($26) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($25) + (($28*52)|0)|0);
   $30 = (($29) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $name = $31;
   $32 = ($31|0)!=(0|0);
   if ($32) {
    $33 = $name;
    $34 = HEAP8[$33>>0]|0;
    $35 = $34 << 24 >> 24;
    $36 = (_isalpha($35)|0);
    $37 = ($36|0)!=(0);
    if (!($37)) {
     $38 = $name;
     $39 = HEAP8[$38>>0]|0;
     $40 = $39 << 24 >> 24;
     $41 = ($40|0)==(95);
     if (!($41)) {
      $42 = HEAP32[3152>>2]|0;
      $43 = (($42) + -1)|0;
      HEAP32[3152>>2] = $43;
      $44 = HEAP32[3144>>2]|0;
      $45 = (($44) + ($43<<2)|0);
      $46 = HEAP32[$45>>2]|0;
      _WriteC($46,1);
      _WriteString(9008);
      $47 = $name;
      _WriteString($47);
      _WriteString(9008);
      $48 = HEAP32[3152>>2]|0;
      $49 = (($48) + -1)|0;
      HEAP32[3152>>2] = $49;
      $50 = HEAP32[3144>>2]|0;
      $51 = (($50) + ($49<<2)|0);
      $52 = HEAP32[$51>>2]|0;
      _WriteC($52,1);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $53 = $0;
 _WriteC($53,1);
 while(1) {
  $54 = $k;
  $55 = ($54|0)>(0);
  if (!($55)) {
   break;
  }
  _WriteString(9008);
  $56 = HEAP32[3152>>2]|0;
  $57 = (($56) + -1)|0;
  HEAP32[3152>>2] = $57;
  $58 = HEAP32[3144>>2]|0;
  $59 = (($58) + ($57<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  _WriteC($60,1);
  $61 = $k;
  $62 = (($61) + -1)|0;
  $k = $62;
 }
 STACKTOP = sp;return;
}
function _WriteList($c,$parentheses) {
 $c = $c|0;
 $parentheses = $parentheses|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $charlist = 0, $temp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $c;
 $1 = $parentheses;
 $charlist = 1;
 $2 = $0;
 $temp = $2;
 while(1) {
  $3 = $temp;
  $4 = (($3) + 12|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $7 = ($6|0)==(39);
  if (!($7)) {
   break;
  }
  $8 = $temp;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 12|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($12|0)!=(5);
  if ($13) {
   $charlist = 0;
  }
  $14 = $temp;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $temp = $16;
 }
 $17 = $temp;
 $18 = (($17) + 12|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($20|0)!=(6);
 if (!($21)) {
  $38 = $charlist;
  $39 = ($38|0)!=(0);
  if ($39) {
   _WriteString(4640);
   $40 = $0;
   $temp = $40;
   while(1) {
    $41 = $temp;
    $42 = (($41) + 12|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = ($44|0)==(39);
    if (!($45)) {
     break;
    }
    $46 = $temp;
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    HEAP32[$vararg_buffer>>2] = $49;
    _Write(8400,$vararg_buffer);
    $50 = $temp;
    $51 = (($50) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $temp = $52;
   }
   _WriteString(4640);
  } else {
   $53 = $0;
   _WriteElems($53,39,4632,4648,4656,0);
  }
  STACKTOP = sp;return;
 }
 $22 = $1;
 $23 = ($22|0)!=(0);
 if ($23) {
  _WriteString(4664);
 }
 $24 = $0;
 $temp = $24;
 while(1) {
  $25 = $temp;
  $26 = (($25) + 12|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = ($28|0)==(39);
  if (!($29)) {
   break;
  }
  $30 = $temp;
  $31 = HEAP32[$30>>2]|0;
  _WriteC($31,1);
  _WriteString(6744);
  $32 = $temp;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $temp = $34;
 }
 $35 = $temp;
 _WriteC($35,1);
 $36 = $1;
 $37 = ($36|0)!=(0);
 if ($37) {
  _WriteString(4672);
 }
 STACKTOP = sp;return;
}
function _WriteElems($c,$tag,$start,$separator,$stop,$parentheses) {
 $c = $c|0;
 $tag = $tag|0;
 $start = $start|0;
 $separator = $separator|0;
 $stop = $stop|0;
 $parentheses = $parentheses|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $tag;
 $2 = $start;
 $3 = $separator;
 $4 = $stop;
 $5 = $parentheses;
 $6 = $2;
 _WriteString($6);
 while(1) {
  $7 = $0;
  $8 = (($7) + 12|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $1;
  $12 = $11&255;
  $13 = ($10|0)==($12|0);
  if (!($13)) {
   break;
  }
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $16 = $5;
  _WriteC($15,$16);
  $17 = $0;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 12|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $1;
  $24 = $23&255;
  $25 = ($22|0)==($24|0);
  if ($25) {
   $26 = $3;
   _WriteString($26);
  }
  $27 = $0;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $0 = $29;
 }
 $30 = $4;
 _WriteString($30);
 STACKTOP = sp;return;
}
function _WriteFunc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isOperator = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isalpha($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = $0;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)==(95);
  $11 = $9;
 }
 $10 = $11 ^ 1;
 $12 = $10&1;
 $isOperator = $12;
 $13 = $isOperator;
 $14 = ($13|0)!=(0);
 if ($14) {
  _WriteString(4664);
 }
 $15 = $0;
 _WriteString($15);
 $16 = $isOperator;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 _WriteString(4672);
 STACKTOP = sp;return;
}
function _WriteDirector($bitstring,$tag) {
 $bitstring = $bitstring|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bitstring;
 $1 = $tag;
 while(1) {
  $2 = $0;
  $3 = ($2|0)>(1);
  if (!($3)) {
   break;
  }
  $4 = $0;
  $5 = $4 & 1;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = $1;
   $8 = $7&255;
   $9 = ($8|0)==(27);
   if ($9) {
    _WriteString(4976);
   }
  }
  $10 = $0;
  $11 = $10 & 1;
  $12 = ($11|0)!=(0);
  if (!($12)) {
   $13 = $1;
   $14 = $13&255;
   $15 = ($14|0)==(27);
   if ($15) {
    _WriteString(4984);
   }
  }
  $16 = $0;
  $17 = $16 & 1;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $1;
   $20 = $19&255;
   $21 = ($20|0)==(28);
   if ($21) {
    _WriteString(4992);
   }
  }
  $22 = $0;
  $23 = $22 & 1;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   $25 = $1;
   $26 = $25&255;
   $27 = ($26|0)==(28);
   if ($27) {
    _WriteString(5000);
   }
  }
  $28 = $0;
  $29 = $28 >> 1;
  $0 = $29;
 }
 STACKTOP = sp;return;
}
function _checkexpression($c,$print) {
 $c = $c|0;
 $print = $print|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $print;
 _initfunction(0,0,0);
 $2 = $0;
 $3 = (_findtype($2)|0);
 $0 = $3;
 $4 = $1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = (_expandtype($6)|0);
 _WriteType($7);
 STACKTOP = sp;return;
}
function _checkdefinitions() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cycles = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[5008>>2] = 0;
 _forallhashtable(65);
 $cycles = 0;
 while(1) {
  HEAP32[5016>>2] = 0;
  _forallhashtable(66);
  $0 = HEAP32[5016>>2]|0;
  $1 = ($0|0)!=(0);
  if ($1) {
   $2 = $cycles;
   $3 = (($2) + 1)|0;
   $cycles = $3;
   $4 = HEAP32[5008>>2]|0;
   $5 = ($2|0)<($4|0);
   $23 = $5;
  } else {
   $23 = 0;
  }
  if (!($23)) {
   break;
  }
 }
 $6 = HEAP32[5016>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  _globaltypeerror(5024);
 }
 _forallhashtable(67);
 HEAP32[5048>>2] = 0;
 _forallhashtable(68);
 $cycles = 0;
 while(1) {
  HEAP32[5016>>2] = 0;
  _forallhashtable(69);
  $8 = HEAP32[5016>>2]|0;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $cycles;
   $11 = (($10) + 1)|0;
   $cycles = $11;
   $12 = HEAP32[5048>>2]|0;
   $13 = ($10|0)<($12|0);
   $24 = $13;
  } else {
   $24 = 0;
  }
  if (!($24)) {
   break;
  }
 }
 $14 = HEAP32[5016>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  _globaltypeerror(5056);
 }
 _forallhashtable(70);
 $cycles = 0;
 while(1) {
  HEAP32[5016>>2] = 0;
  _forallhashtable(71);
  $16 = HEAP32[5016>>2]|0;
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $cycles;
   $19 = (($18) + 1)|0;
   $cycles = $19;
   $20 = ($18|0)<(25);
   $25 = $20;
  } else {
   $25 = 0;
  }
  if (!($25)) {
   break;
  }
 }
 $21 = HEAP32[5016>>2]|0;
 $22 = ($21|0)!=(0);
 if (!($22)) {
  _forallhashtable(72);
  STACKTOP = sp;return;
 }
 _Write(5072,$vararg_buffer);
 _Write(8392,$vararg_buffer1);
 _printusertypes();
 _globaltypeerror(8984);
 _forallhashtable(72);
 STACKTOP = sp;return;
}
function _initfunction($funname,$abstype,$clause) {
 $funname = $funname|0;
 $abstype = $abstype|0;
 $clause = $clause|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $funname;
 $1 = $abstype;
 $2 = $clause;
 $3 = $0;
 HEAP32[5304>>2] = $3;
 $4 = $1;
 HEAP32[5384>>2] = $4;
 $5 = $2;
 HEAP32[5280>>2] = $5;
 HEAP32[5216>>2] = 0;
 HEAP32[5424>>2] = 0;
 HEAP32[5240>>2] = 0;
 $k = 0;
 while(1) {
  $6 = $k;
  $7 = ($6|0)<(10);
  if (!($7)) {
   break;
  }
  $8 = HEAP32[2576>>2]|0;
  $9 = $k;
  $10 = (5344 + ($9<<2)|0);
  HEAP32[$10>>2] = $8;
  $11 = $k;
  $12 = (($11) + 1)|0;
  $k = $12;
 }
 $k = 0;
 while(1) {
  $13 = $k;
  $14 = ($13|0)<(10);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[2576>>2]|0;
  $16 = $k;
  $17 = (5720 + ($16<<2)|0);
  HEAP32[$17>>2] = $15;
  $18 = $k;
  $19 = (($18) + 1)|0;
  $k = $19;
 }
 STACKTOP = sp;return;
}
function _findtype($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $new = 0, $org = 0, $posCode = 0, $t1 = 0, $t2 = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer17 = sp;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer10 = sp + 16|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer3 = sp + 40|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 56|0;
 $posCode = sp + 92|0;
 $1 = $c;
 $2 = $1;
 $org = $2;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = (($5) + 12|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  L3: do {
   switch ($8|0) {
   case 22:  {
    $436 = $1;
    $437 = $1;
    $438 = (_findtypeapply($436,$437)|0);
    $0 = $438;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 23:  {
    $410 = (_newcell(2)|0);
    $411 = $1;
    $412 = HEAP32[$411>>2]|0;
    $413 = (_findtype($412)|0);
    $414 = $1;
    $415 = HEAP32[$414>>2]|0;
    $416 = $org;
    _checkunify($410,$413,$415,$416);
    $417 = $1;
    $418 = (($417) + 4|0);
    $419 = HEAP32[$418>>2]|0;
    $420 = HEAP32[$419>>2]|0;
    $421 = (_findtype($420)|0);
    $temp = $421;
    $422 = $temp;
    $423 = $1;
    $424 = (($423) + 4|0);
    $425 = HEAP32[$424>>2]|0;
    $426 = (($425) + 4|0);
    $427 = HEAP32[$426>>2]|0;
    $428 = (_findtype($427)|0);
    $429 = $1;
    $430 = (($429) + 4|0);
    $431 = HEAP32[$430>>2]|0;
    $432 = (($431) + 4|0);
    $433 = HEAP32[$432>>2]|0;
    $434 = $org;
    _checkunify($422,$428,$433,$434);
    $435 = $temp;
    $0 = $435;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 32:  {
    $316 = $1;
    $317 = HEAP32[$316>>2]|0;
    $temp = $317;
    while(1) {
     $318 = $temp;
     $319 = (($318) + 12|0);
     $320 = HEAP8[$319>>0]|0;
     $321 = $320&255;
     $322 = ($321|0)==(39);
     if (!($322)) {
      break;
     }
     $323 = $temp;
     $324 = HEAP32[$323>>2]|0;
     $325 = (($324) + 8|0);
     $326 = HEAP32[$325>>2]|0;
     HEAP32[$posCode>>2] = $326;
     _swapPosCode($posCode);
     $327 = $temp;
     $328 = HEAP32[$327>>2]|0;
     $329 = HEAP32[$328>>2]|0;
     $330 = (_findtype($329)|0);
     $331 = $temp;
     $332 = HEAP32[$331>>2]|0;
     $333 = (($332) + 4|0);
     $334 = HEAP32[$333>>2]|0;
     $335 = (_findtype($334)|0);
     $336 = $temp;
     $337 = HEAP32[$336>>2]|0;
     $338 = (($337) + 4|0);
     $339 = HEAP32[$338>>2]|0;
     $340 = $temp;
     $341 = HEAP32[$340>>2]|0;
     $342 = HEAP32[$341>>2]|0;
     _checkunify($330,$335,$339,$342);
     _swapPosCode($posCode);
     $343 = $temp;
     $344 = (($343) + 4|0);
     $345 = HEAP32[$344>>2]|0;
     $temp = $345;
    }
    $346 = $1;
    $347 = (($346) + 4|0);
    $348 = HEAP32[$347>>2]|0;
    $349 = (_findtype($348)|0);
    $0 = $349;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 14:  {
    $350 = HEAP32[2568>>2]|0;
    $351 = $1;
    $352 = (($351) + 8|0);
    $353 = HEAP32[$352>>2]|0;
    $354 = (($350) + (($353*52)|0)|0);
    $355 = (($354) + 28|0);
    $356 = HEAP32[$355>>2]|0;
    $temp = $356;
    $357 = $temp;
    $358 = ($357|0)!=(0|0);
    if (!($358)) {
     _Write(5696,$vararg_buffer15);
     $361 = HEAP32[2568>>2]|0;
     $362 = $1;
     $363 = (($362) + 8|0);
     $364 = HEAP32[$363>>2]|0;
     $365 = (($361) + (($364*52)|0)|0);
     $366 = (($365) + 8|0);
     $367 = HEAP32[$366>>2]|0;
     HEAP32[$vararg_buffer17>>2] = $367;
     _Write(5608,$vararg_buffer17);
     _typeerror();
     break L3;
    }
    $359 = $temp;
    $360 = (_copytypeexpr($359)|0);
    $0 = $360;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 37:  {
    $376 = $1;
    $377 = HEAP32[$376>>2]|0;
    $378 = (_findtype($377)|0);
    $new = $378;
    $379 = $1;
    $380 = (($379) + 4|0);
    $381 = HEAP32[$380>>2]|0;
    $temp = $381;
    while(1) {
     $382 = $temp;
     $383 = (($382) + 12|0);
     $384 = HEAP8[$383>>0]|0;
     $385 = $384&255;
     $386 = ($385|0)==(37);
     if (!($386)) {
      break;
     }
     $387 = $new;
     $388 = $temp;
     $389 = HEAP32[$388>>2]|0;
     $390 = (_findtype($389)|0);
     $391 = $temp;
     $392 = HEAP32[$391>>2]|0;
     $393 = $org;
     _checkunify($387,$390,$392,$393);
     $394 = $temp;
     $395 = (($394) + 4|0);
     $396 = HEAP32[$395>>2]|0;
     $temp = $396;
    }
    $397 = $new;
    $0 = $397;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 20:  {
    $398 = $1;
    $399 = (($398) + 4|0);
    $400 = HEAP32[$399>>2]|0;
    $401 = (_findtype($400)|0);
    $temp = $401;
    $402 = $temp;
    $403 = $1;
    $404 = HEAP32[$403>>2]|0;
    $405 = (_findtype($404)|0);
    $406 = $1;
    $407 = HEAP32[$406>>2]|0;
    $408 = $org;
    _checkunify($402,$405,$407,$408);
    $409 = $temp;
    $0 = $409;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 36:  {
    $368 = $1;
    $369 = HEAP32[$368>>2]|0;
    $370 = (_findtype($369)|0);
    $371 = $1;
    $372 = (($371) + 4|0);
    $373 = HEAP32[$372>>2]|0;
    $374 = (_findtype($373)|0);
    $375 = (_make348(22,$370,$374)|0);
    $0 = $375;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 35:  {
    $249 = $1;
    $250 = HEAP32[$249>>2]|0;
    $251 = (_findtype($250)|0);
    $temp = $251;
    $252 = $1;
    $253 = (($252) + 4|0);
    $254 = HEAP32[$253>>2]|0;
    $1 = $254;
    while(1) {
     $255 = $1;
     $256 = (($255) + 12|0);
     $257 = HEAP8[$256>>0]|0;
     $258 = $257&255;
     $259 = ($258|0)==(35);
     if (!($259)) {
      break;
     }
     $260 = $1;
     $261 = HEAP32[$260>>2]|0;
     $262 = (($261) + 8|0);
     $263 = HEAP32[$262>>2]|0;
     HEAP32[$posCode>>2] = $263;
     _swapPosCode($posCode);
     $264 = $1;
     $265 = HEAP32[$264>>2]|0;
     $266 = (($265) + 4|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = ($267|0)!=(0|0);
     if ($268) {
      $269 = $1;
      $270 = HEAP32[$269>>2]|0;
      $271 = HEAP32[$270>>2]|0;
      $t1 = $271;
      $272 = $1;
      $273 = HEAP32[$272>>2]|0;
      $274 = (($273) + 4|0);
      $275 = HEAP32[$274>>2]|0;
      $t2 = $275;
      while(1) {
       $276 = $t1;
       $277 = (($276) + 12|0);
       $278 = HEAP8[$277>>0]|0;
       $279 = $278&255;
       $280 = ($279|0)==(39);
       if ($280) {
        $281 = $t2;
        $282 = (($281) + 12|0);
        $283 = HEAP8[$282>>0]|0;
        $284 = $283&255;
        $285 = ($284|0)==(39);
        $443 = $285;
       } else {
        $443 = 0;
       }
       if (!($443)) {
        break;
       }
       $286 = $t1;
       $287 = HEAP32[$286>>2]|0;
       $288 = (_findtype($287)|0);
       $289 = HEAP32[2576>>2]|0;
       $290 = (_make348(39,$288,$289)|0);
       $291 = $t2;
       $292 = HEAP32[$291>>2]|0;
       $293 = (_findtype($292)|0);
       $294 = $t2;
       $295 = HEAP32[$294>>2]|0;
       $296 = $org;
       _checkunify($290,$293,$295,$296);
       $297 = $t1;
       $298 = (($297) + 4|0);
       $299 = HEAP32[$298>>2]|0;
       $t1 = $299;
       $300 = $t2;
       $301 = (($300) + 4|0);
       $302 = HEAP32[$301>>2]|0;
       $t2 = $302;
      }
     } else {
      $303 = (_newcell(2)|0);
      $304 = $1;
      $305 = HEAP32[$304>>2]|0;
      $306 = HEAP32[$305>>2]|0;
      $307 = (_findtype($306)|0);
      $308 = $1;
      $309 = HEAP32[$308>>2]|0;
      $310 = HEAP32[$309>>2]|0;
      $311 = $org;
      _checkunify($303,$307,$310,$311);
     }
     _swapPosCode($posCode);
     $312 = $1;
     $313 = (($312) + 4|0);
     $314 = HEAP32[$313>>2]|0;
     $1 = $314;
    }
    $315 = $temp;
    $0 = $315;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 42:  {
    $147 = (_newvariable()|0);
    $new = $147;
    while(1) {
     $148 = HEAP32[2568>>2]|0;
     $149 = $1;
     $150 = HEAP32[$149>>2]|0;
     $151 = HEAP32[$150>>2]|0;
     $152 = (($151) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = (($148) + (($153*52)|0)|0);
     $155 = (($154) + 28|0);
     $156 = HEAP32[$155>>2]|0;
     $temp = $156;
     $157 = $temp;
     $158 = ($157|0)==(0|0);
     if ($158) {
      label = 36;
      break;
     }
     $159 = $temp;
     $160 = (($159) + 12|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = $161&255;
     $163 = ($162|0)!=(22);
     if ($163) {
      label = 36;
      break;
     }
     $164 = $temp;
     $165 = HEAP32[$164>>2]|0;
     $166 = (($165) + 12|0);
     $167 = HEAP8[$166>>0]|0;
     $168 = $167&255;
     $169 = ($168|0)!=(40);
     if ($169) {
      label = 36;
      break;
     }
     $170 = HEAP32[2568>>2]|0;
     $171 = $temp;
     $172 = HEAP32[$171>>2]|0;
     $173 = HEAP32[$172>>2]|0;
     $174 = (($173) + 8|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = (($170) + (($175*52)|0)|0);
     $177 = (($176) + 28|0);
     $178 = HEAP32[$177>>2]|0;
     $temp = $178;
     $179 = $temp;
     $180 = ($179|0)==(0|0);
     if ($180) {
      label = 39;
      break;
     }
     $181 = $temp;
     $182 = (($181) + 12|0);
     $183 = HEAP8[$182>>0]|0;
     $184 = $183&255;
     $185 = ($184|0)!=(34);
     if ($185) {
      label = 39;
      break;
     }
     while(1) {
      $186 = $temp;
      $187 = (($186) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $temp = $188;
      $189 = $temp;
      $190 = (($189) + 12|0);
      $191 = HEAP8[$190>>0]|0;
      $192 = $191&255;
      $193 = ($192|0)==(42);
      if ($193) {
       $194 = $temp;
       $195 = HEAP32[$194>>2]|0;
       $196 = HEAP32[$195>>2]|0;
       $197 = (($196) + 8|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $1;
       $200 = HEAP32[$199>>2]|0;
       $201 = HEAP32[$200>>2]|0;
       $202 = (($201) + 8|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = ($198|0)!=($203|0);
       $442 = $204;
      } else {
       $442 = 0;
      }
      if (!($442)) {
       break;
      }
     }
     $205 = $temp;
     $206 = (($205) + 12|0);
     $207 = HEAP8[$206>>0]|0;
     $208 = $207&255;
     $209 = ($208|0)!=(42);
     if ($209) {
      label = 46;
      break;
     }
     $210 = $1;
     $211 = HEAP32[$210>>2]|0;
     $212 = HEAP32[$211>>2]|0;
     $213 = (_findtype($212)|0);
     $temp = $213;
     $214 = $new;
     $215 = $temp;
     $216 = HEAP32[$215>>2]|0;
     $217 = $1;
     $218 = HEAP32[$217>>2]|0;
     $219 = $org;
     _checkunify($214,$216,$218,$219);
     $220 = $1;
     $221 = HEAP32[$220>>2]|0;
     $222 = (($221) + 4|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = (_findtype($223)|0);
     $225 = $temp;
     $226 = (($225) + 4|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = $1;
     $229 = HEAP32[$228>>2]|0;
     $230 = $org;
     _checkunify($224,$227,$229,$230);
     $231 = $1;
     $232 = (($231) + 4|0);
     $233 = HEAP32[$232>>2]|0;
     $1 = $233;
     $234 = $1;
     $235 = (($234) + 12|0);
     $236 = HEAP8[$235>>0]|0;
     $237 = $236&255;
     $238 = ($237|0)!=(42);
     if ($238) {
      label = 48;
      break;
     }
    }
    if ((label|0) == 36) {
    }
    else if ((label|0) == 39) {
    }
    else if ((label|0) == 46) {
    }
    else if ((label|0) == 48) {
     $239 = $new;
     $0 = $239;
     $440 = $0;
     STACKTOP = sp;return ($440|0);
    }
    _Write(5672,$vararg_buffer10);
    $240 = HEAP32[2568>>2]|0;
    $241 = $1;
    $242 = HEAP32[$241>>2]|0;
    $243 = HEAP32[$242>>2]|0;
    $244 = (($243) + 8|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = (($240) + (($245*52)|0)|0);
    $247 = (($246) + 8|0);
    $248 = HEAP32[$247>>2]|0;
    HEAP32[$vararg_buffer12>>2] = $248;
    _Write(5608,$vararg_buffer12);
    _typeerror();
    break;
   }
   case 11:  {
    $25 = $1;
    $26 = (($25) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27&255;
    $29 = (_newcell($28)|0);
    $0 = $29;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 7:  {
    $21 = (_newcell(7)|0);
    $0 = $21;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 2:  {
    $20 = (_newcell(2)|0);
    $0 = $20;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 9:  {
    $16 = $1;
    $17 = (_getvariable($16)|0);
    $0 = $17;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 39:  {
    $30 = $1;
    $org = $30;
    $31 = $1;
    $32 = HEAP32[$31>>2]|0;
    $33 = (_findtype($32)|0);
    $temp = $33;
    $34 = $temp;
    $35 = HEAP32[2576>>2]|0;
    $36 = (_make348(39,$34,$35)|0);
    $new = $36;
    $37 = $1;
    $38 = (($37) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $1 = $39;
    while(1) {
     $40 = $1;
     $41 = (($40) + 12|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $42&255;
     $44 = ($43|0)==(39);
     if (!($44)) {
      break;
     }
     $45 = $temp;
     $46 = $1;
     $47 = HEAP32[$46>>2]|0;
     $48 = (_findtype($47)|0);
     $49 = $1;
     $50 = HEAP32[$49>>2]|0;
     $51 = $org;
     _checkunify($45,$48,$50,$51);
     $52 = $1;
     $53 = (($52) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     $1 = $54;
    }
    $55 = $new;
    $56 = $1;
    $57 = (_findtype($56)|0);
    $58 = $1;
    $59 = $org;
    _checkunify($55,$57,$58,$59);
    $60 = $new;
    $0 = $60;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 41:  {
    $61 = (_newcell(41)|0);
    $temp = $61;
    $new = $61;
    $62 = $1;
    $63 = HEAP32[$62>>2]|0;
    $64 = (_findtype($63)|0);
    $65 = $temp;
    HEAP32[$65>>2] = $64;
    $66 = $1;
    $67 = (($66) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $1 = $68;
    while(1) {
     $69 = $1;
     $70 = (($69) + 12|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71&255;
     $73 = ($72|0)==(41);
     if (!($73)) {
      break;
     }
     $74 = (_newcell(41)|0);
     $75 = $temp;
     $76 = (($75) + 4|0);
     HEAP32[$76>>2] = $74;
     $temp = $74;
     $77 = $1;
     $78 = HEAP32[$77>>2]|0;
     $79 = (_findtype($78)|0);
     $80 = $temp;
     HEAP32[$80>>2] = $79;
     $81 = $1;
     $82 = (($81) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     $1 = $83;
    }
    $84 = HEAP32[2968>>2]|0;
    $85 = $temp;
    $86 = (($85) + 4|0);
    HEAP32[$86>>2] = $84;
    $87 = $new;
    $0 = $87;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 5:  {
    $19 = (_newcell(5)|0);
    $0 = $19;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 12:  {
    _Write(5584,$vararg_buffer);
    $9 = HEAP32[2568>>2]|0;
    $10 = $1;
    $11 = (($10) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($9) + (($12*52)|0)|0);
    $14 = (($13) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $15;
    _Write(5608,$vararg_buffer1);
    _typeerror();
    break;
   }
   case 6:  {
    $22 = (_newvariable()|0);
    $23 = HEAP32[2576>>2]|0;
    $24 = (_make348(39,$22,$23)|0);
    $0 = $24;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 4: case 3:  {
    $18 = (_newcell(3)|0);
    $0 = $18;
    $440 = $0;
    STACKTOP = sp;return ($440|0);
    break;
   }
   case 40:  {
    $88 = HEAP32[2568>>2]|0;
    $89 = $1;
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($88) + (($92*52)|0)|0);
    $94 = (($93) + 28|0);
    $95 = HEAP32[$94>>2]|0;
    $temp = $95;
    $96 = $temp;
    $97 = ($96|0)!=(0|0);
    if (!($97)) {
     _Write(5648,$vararg_buffer5);
     $139 = HEAP32[2568>>2]|0;
     $140 = $1;
     $141 = HEAP32[$140>>2]|0;
     $142 = (($141) + 8|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = (($139) + (($143*52)|0)|0);
     $145 = (($144) + 8|0);
     $146 = HEAP32[$145>>2]|0;
     HEAP32[$vararg_buffer7>>2] = $146;
     _Write(5608,$vararg_buffer7);
     _typeerror();
     break L3;
    }
    $98 = $temp;
    $99 = (_copytypeexpr($98)|0);
    $temp = $99;
    $100 = $1;
    $101 = (($100) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $t1 = $102;
    while(1) {
     $103 = $temp;
     $104 = (($103) + 12|0);
     $105 = HEAP8[$104>>0]|0;
     $106 = $105&255;
     $107 = ($106|0)==(22);
     if ($107) {
      $108 = $t1;
      $109 = (($108) + 12|0);
      $110 = HEAP8[$109>>0]|0;
      $111 = $110&255;
      $112 = ($111|0)==(40);
      $441 = $112;
     } else {
      $441 = 0;
     }
     if (!($441)) {
      break;
     }
     $113 = $temp;
     $114 = HEAP32[$113>>2]|0;
     $115 = $t1;
     $116 = HEAP32[$115>>2]|0;
     $117 = (_findtype($116)|0);
     $118 = $t1;
     $119 = HEAP32[$118>>2]|0;
     $120 = $org;
     _checkunify($114,$117,$119,$120);
     $121 = $temp;
     $122 = (($121) + 4|0);
     $123 = HEAP32[$122>>2]|0;
     $temp = $123;
     $124 = $t1;
     $125 = (($124) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $t1 = $126;
    }
    $127 = $temp;
    $128 = (($127) + 12|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130|0)!=(22);
    if ($131) {
     $132 = $t1;
     $133 = (($132) + 12|0);
     $134 = HEAP8[$133>>0]|0;
     $135 = $134&255;
     $136 = ($135|0)!=(40);
     if ($136) {
      $137 = $temp;
      $0 = $137;
      $440 = $0;
      STACKTOP = sp;return ($440|0);
     }
    }
    _Write(5616,$vararg_buffer3);
    $138 = $1;
    _WriteCell($138);
    _typeerror();
    break;
   }
   default: {
   }
   }
  } while(0);
 }
 $439 = (_newvariable()|0);
 $0 = $439;
 $440 = $0;
 STACKTOP = sp;return ($440|0);
}
function _expandtype($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = HEAP32[2576>>2]|0;
 HEAP32[5576>>2] = $1;
 $2 = $0;
 $3 = (_expandtyperec($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _countsynonym($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 12|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)==(33);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[5008>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[5008>>2] = $17;
 STACKTOP = sp;return;
}
function _expandsynonym($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $typeexpr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $typeexpr = $3;
 $4 = $typeexpr;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $typeexpr;
 $7 = (($6) + 12|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(33);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = (($11) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 _checkmemlarge();
 $15 = $0;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 _initfunction($17,0,0);
 $18 = $typeexpr;
 $19 = (_copytypeexpr($18)|0);
 $typeexpr = $19;
 $20 = $typeexpr;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (_substitutesynonyms($22)|0);
 $24 = $typeexpr;
 $25 = (($24) + 4|0);
 HEAP32[$25>>2] = $23;
 $26 = $typeexpr;
 $27 = (_expandtype($26)|0);
 $28 = $0;
 $29 = (($28) + 28|0);
 HEAP32[$29>>2] = $27;
 STACKTOP = sp;return;
}
function _globaltypeerror($message) {
 $message = $message|0;
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $message;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 _Write(5568,$vararg_buffer);
 HEAP32[5304>>2] = 0;
 HEAP32[5280>>2] = 0;
 HEAP32[5216>>2] = 0;
 HEAP32[5240>>2] = 0;
 _typeerror();
 STACKTOP = sp;return;
}
function _modifytypeexpr($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $9 = (_newcell(10)|0);
   $10 = $0;
   $11 = (($10) + 28|0);
   HEAP32[$11>>2] = $9;
   $12 = $0;
   $13 = (($12) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 8|0);
   HEAP32[$15>>2] = 1;
   STACKTOP = sp;return;
  }
 }
 $16 = $0;
 $17 = (($16) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 do {
  if ($19) {
   $20 = $0;
   $21 = (($20) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + 12|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ($25|0)!=(33);
   if (!($26)) {
    $27 = $0;
    $28 = (($27) + 32|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)!=(0|0);
    if (!($30)) {
     break;
    }
   }
   _checkmemlarge();
   $31 = $0;
   $32 = (($31) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   _initfunction($33,0,0);
   $34 = $0;
   $35 = (($34) + 28|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_copytypeexpr($36)|0);
   $38 = (_substitutesynonyms($37)|0);
   $39 = (_expandtype($38)|0);
   $40 = $0;
   $41 = (($40) + 28|0);
   HEAP32[$41>>2] = $39;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _countabstype($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 12|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)==(33);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $0;
 $17 = (($16) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $0;
 $20 = (($19) + 32|0);
 HEAP32[$20>>2] = $18;
 $21 = HEAP32[5048>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[5048>>2] = $22;
 STACKTOP = sp;return;
}
function _expandabstype($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $typeexpr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $typeexpr = $3;
 $4 = $typeexpr;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $typeexpr;
 $7 = (($6) + 12|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(33);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 _checkmemlarge();
 $11 = $0;
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 _initfunction($13,0,0);
 $14 = $typeexpr;
 $15 = (_copytypeexpr($14)|0);
 $typeexpr = $15;
 $16 = $typeexpr;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_substituteabstypes($18)|0);
 $20 = $typeexpr;
 $21 = (($20) + 4|0);
 HEAP32[$21>>2] = $19;
 $22 = $typeexpr;
 $23 = (_expandtype($22)|0);
 $24 = $0;
 $25 = (($24) + 32|0);
 HEAP32[$25>>2] = $23;
 STACKTOP = sp;return;
}
function _settypechanged($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   $9 = $0;
   $10 = (($9) + 20|0);
   HEAP32[$10>>2] = 1;
   STACKTOP = sp;return;
  }
 }
 $11 = $0;
 $12 = (($11) + 20|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function _checkfuncdef($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $functiontype = 0, $posCode = 0, $spine = 0, $temp = 0, $typetemplate = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 16|0;
 $posCode = sp + 28|0;
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = $0;
  $14 = (($13) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_typemaychange($15)|0);
  $17 = ($16|0)!=(0);
  if (!($17)) {
   STACKTOP = sp;return;
  }
 }
 $18 = $0;
 $19 = (($18) + 20|0);
 HEAP32[$19>>2] = 0;
 $20 = $0;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $temp = $22;
 while(1) {
  $23 = $temp;
  $24 = (($23) + 12|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = ($26|0)==(39);
  if (!($27)) {
   break;
  }
  _checkmemlarge();
  $28 = $0;
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $0;
  $32 = (($31) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $temp;
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  _initfunction($30,$33,$36);
  $37 = $temp;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  HEAP32[$posCode>>2] = $40;
  _swapPosCode($posCode);
  $41 = $0;
  $42 = (($41) + 44|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (_findtype($43)|0);
  $typetemplate = $44;
  $45 = $temp;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (_findtype($48)|0);
  $functiontype = $49;
  $50 = $temp;
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  $spine = $52;
  while(1) {
   $53 = $spine;
   $54 = (($53) + 12|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = ($56|0)==(22);
   if (!($57)) {
    break;
   }
   $58 = $spine;
   $59 = (($58) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (_findtype($60)|0);
   $62 = $functiontype;
   $63 = (_make348(22,$61,$62)|0);
   $functiontype = $63;
   $64 = $spine;
   $65 = HEAP32[$64>>2]|0;
   $spine = $65;
  }
  $66 = $typetemplate;
  $67 = $functiontype;
  $68 = $0;
  $69 = (($68) + 44|0);
  $70 = HEAP32[$69>>2]|0;
  _checkunify($66,$67,$70,0);
  $71 = $typetemplate;
  $72 = (_checkrefined($71)|0);
  $73 = ($72|0)!=(0);
  if ($73) {
   $74 = $0;
   $75 = (($74) + 32|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)!=(0|0);
   if ($77) {
    _Write(5488,$vararg_buffer);
    $78 = $0;
    $79 = (($78) + 8|0);
    $80 = HEAP32[$79>>2]|0;
    HEAP32[$vararg_buffer1>>2] = $80;
    _Write(5312,$vararg_buffer1);
    _typeerror();
   } else {
    $81 = $0;
    $82 = (($81) + 20|0);
    HEAP32[$82>>2] = 1;
    HEAP32[5016>>2] = 1;
    $83 = $typetemplate;
    $84 = (_expandtype($83)|0);
    $85 = $0;
    $86 = (($85) + 28|0);
    HEAP32[$86>>2] = $84;
    $87 = $0;
    $88 = (($87) + 28|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (_typesize($89)|0);
    $91 = ($90|0)>(1000);
    if ($91) {
     _Write(5520,$vararg_buffer3);
     $92 = $0;
     $93 = (($92) + 28|0);
     $94 = HEAP32[$93>>2]|0;
     _WriteType($94);
     $95 = $0;
     $96 = (($95) + 8|0);
     $97 = HEAP32[$96>>2]|0;
     HEAP32[$vararg_buffer5>>2] = $97;
     _Write(5312,$vararg_buffer5);
     _typeerror();
    }
   }
  } else {
  }
  _swapPosCode($posCode);
  $98 = $temp;
  $99 = (($98) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $temp = $100;
 }
 STACKTOP = sp;return;
}
function _checkgeneric($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $functiontype = 0, $new = 0, $new1 = 0, $new2 = 0, $posCode = 0, $spine = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $posCode = sp + 24|0;
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $temp = $11;
 while(1) {
  $12 = $temp;
  $13 = (($12) + 12|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==(39);
  if (!($16)) {
   break;
  }
  _checkmemlarge();
  $17 = $0;
  $18 = (($17) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  $21 = (($20) + 32|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $temp;
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  _initfunction($19,$22,$25);
  $26 = $temp;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$posCode>>2] = $29;
  _swapPosCode($posCode);
  $30 = (_newvariable()|0);
  $new = $30;
  $functiontype = $30;
  $31 = $temp;
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  $spine = $33;
  while(1) {
   $34 = $spine;
   $35 = (($34) + 12|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = ($37|0)==(22);
   if (!($38)) {
    break;
   }
   $39 = $spine;
   $40 = (($39) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (_findtype($41)|0);
   $43 = $functiontype;
   $44 = (_make348(22,$42,$43)|0);
   $functiontype = $44;
   $45 = $spine;
   $46 = HEAP32[$45>>2]|0;
   $spine = $46;
  }
  $47 = $functiontype;
  $48 = $0;
  $49 = (($48) + 44|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (_findtype($50)|0);
  $52 = $0;
  $53 = (($52) + 44|0);
  $54 = HEAP32[$53>>2]|0;
  _checkunify($47,$51,$54,0);
  $55 = $functiontype;
  $56 = (_expandtype($55)|0);
  $57 = (_copytypeexpr($56)|0);
  $new1 = $57;
  $58 = $new;
  $59 = $temp;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (_findtype($62)|0);
  $64 = $0;
  $65 = (($64) + 44|0);
  $66 = HEAP32[$65>>2]|0;
  _checkunify($58,$63,$66,0);
  $67 = $functiontype;
  $68 = (_expandtype($67)|0);
  $69 = (_copytypeexpr($68)|0);
  $new2 = $69;
  $70 = $new1;
  $71 = $new2;
  $72 = (_unify($70,$71)|0);
  $73 = ($72|0)!=(0);
  if ($73) {
   $74 = $new1;
   $75 = (_checkrefined($74)|0);
   $76 = ($75|0)!=(0);
   if ($76) {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   _Write(5128,$vararg_buffer);
   $77 = $temp;
   $78 = HEAP32[$77>>2]|0;
   $79 = HEAP32[$78>>2]|0;
   _WriteCell($79);
   _Write(5168,$vararg_buffer1);
   $80 = $new1;
   _WriteType($80);
   _Write(5192,$vararg_buffer3);
   $81 = $new2;
   _WriteType($81);
   _typeerror();
  }
  _swapPosCode($posCode);
  $82 = $temp;
  $83 = (($82) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $temp = $84;
 }
 STACKTOP = sp;return;
}
function _typeerror() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $0 = HEAP32[5216>>2]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  _Write(5224,$vararg_buffer);
  $2 = HEAP32[5216>>2]|0;
  _WriteCell($2);
 }
 $3 = HEAP32[5240>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = HEAP32[5240>>2]|0;
  $6 = (_posCodeFileName($5)|0);
  HEAP32[$vararg_buffer1>>2] = $6;
  _Write(5248,$vararg_buffer1);
  $7 = HEAP32[5240>>2]|0;
  $8 = (_posCodeLinenr($7)|0);
  HEAP32[$vararg_buffer3>>2] = $8;
  _Write(5264,$vararg_buffer3);
  _systemerror(19);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[5280>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  _Write(5288,$vararg_buffer6);
  $11 = HEAP32[5280>>2]|0;
  _WriteCell($11);
 } else {
  $12 = HEAP32[5304>>2]|0;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = HEAP32[5304>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $14;
   _Write(5312,$vararg_buffer8);
  }
 }
 _systemerror(19);
 STACKTOP = sp;return;
}
function _getvariable($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $nms = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3|0) % 10)&-1;
 $5 = (5720 + ($4<<2)|0);
 $nms = $5;
 $6 = $nms;
 $7 = HEAP32[$6>>2]|0;
 $temp = $7;
 while(1) {
  $8 = $temp;
  $9 = (($8) + 12|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)==(39);
  if ($12) {
   $13 = $temp;
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $0;
   $19 = (($18) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($17|0)!=($20|0);
   $41 = $21;
  } else {
   $41 = 0;
  }
  if (!($41)) {
   break;
  }
  $22 = $temp;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $temp = $24;
 }
 $25 = $temp;
 $26 = (($25) + 12|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = ($28|0)!=(39);
 if (!($29)) {
  $37 = $temp;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  STACKTOP = sp;return ($40|0);
 }
 $30 = $0;
 $31 = (_newvariable()|0);
 $32 = (_make348(39,$30,$31)|0);
 $33 = $nms;
 $34 = HEAP32[$33>>2]|0;
 $35 = (_make348(39,$32,$34)|0);
 $36 = $nms;
 HEAP32[$36>>2] = $35;
 $temp = $35;
 $37 = $temp;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function _newvariable() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_newcell(10)|0);
 $temp = $0;
 $1 = HEAP32[5424>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[5424>>2] = $2;
 $3 = $temp;
 $4 = (($3) + 8|0);
 HEAP32[$4>>2] = $2;
 $5 = $temp;
 STACKTOP = sp;return ($5|0);
}
function _make348($tag,$left,$right) {
 $tag = $tag|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tag;
 $1 = $left;
 $2 = $right;
 $3 = $0;
 $4 = (_newcell($3)|0);
 $temp = $4;
 $5 = $1;
 $6 = $temp;
 HEAP32[$6>>2] = $5;
 $7 = $2;
 $8 = $temp;
 $9 = (($8) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $temp;
 STACKTOP = sp;return ($10|0);
}
function _checkunify($type1,$type2,$c,$context) {
 $type1 = $type1|0;
 $type2 = $type2|0;
 $c = $c|0;
 $context = $context|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $3 = sp + 28|0;
 $0 = $type1;
 $1 = $type2;
 $2 = $c;
 HEAP32[$3>>2] = $context;
 _swapcontext($3);
 $4 = $0;
 $5 = $1;
 $6 = (_unify($4,$5)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  _swapcontext($3);
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $1;
 $10 = (_make348(39,$8,$9)|0);
 $list = $10;
 $11 = $list;
 $12 = (_expandtype($11)|0);
 $list = $12;
 _Write(5440,$vararg_buffer);
 $13 = $2;
 _WriteCell($13);
 _Write(5456,$vararg_buffer1);
 $14 = $list;
 $15 = HEAP32[$14>>2]|0;
 _WriteType($15);
 _Write(5472,$vararg_buffer3);
 $16 = $list;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 _WriteType($18);
 _typeerror();
 _swapcontext($3);
 STACKTOP = sp;return;
}
function _copytypeexpr($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = HEAP32[5424>>2]|0;
 HEAP32[5432>>2] = $1;
 $2 = $0;
 $3 = (_copytypeexprrec($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _swapPosCode($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $temp = $2;
 $3 = HEAP32[5240>>2]|0;
 $4 = $0;
 HEAP32[$4>>2] = $3;
 $5 = $temp;
 HEAP32[5240>>2] = $5;
 STACKTOP = sp;return;
}
function _findtypeapply($c,$org) {
 $c = $c|0;
 $org = $org|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $org;
 $3 = $1;
 $4 = (($3) + 12|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)!=(22);
 if ($7) {
  $8 = $1;
  $9 = (_findtype($8)|0);
  $0 = $9;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 }
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = (_findtypeapply($11,$12)|0);
 $temp = $13;
 $14 = $temp;
 $15 = (($14) + 12|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)==(10);
 if ($18) {
  $19 = $temp;
  $20 = (_findbinding($19)|0);
  $temp = $20;
 }
 $21 = $temp;
 $22 = (($21) + 12|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = ($24|0)==(22);
 if ($25) {
  $26 = $temp;
  $27 = HEAP32[$26>>2]|0;
  $28 = $1;
  $29 = (($28) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_findtype($30)|0);
  $32 = $1;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $2;
  _checkunify($27,$31,$34,$35);
  $36 = $temp;
  $37 = (($36) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $0 = $38;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 } else {
  $39 = (_newvariable()|0);
  $new = $39;
  $40 = $1;
  $41 = (($40) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (_findtype($42)|0);
  $44 = $new;
  $45 = (_make348(22,$43,$44)|0);
  $46 = $temp;
  $47 = $1;
  $48 = HEAP32[$47>>2]|0;
  $49 = $2;
  _checkunify($45,$46,$48,$49);
  $50 = $new;
  $0 = $50;
  $51 = $0;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _expandtyperec($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(10);
 if ($6) {
  $7 = $1;
  $8 = (_findbinding($7)|0);
  $1 = $8;
 }
 $9 = $1;
 $10 = (($9) + 12|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)==(10);
 if ($13) {
  $14 = (_newcell(10)|0);
  $temp = $14;
  $15 = $1;
  $16 = (_addvariable($15,5576)|0);
  $17 = $temp;
  $18 = (($17) + 8|0);
  HEAP32[$18>>2] = $16;
  $19 = $temp;
  $0 = $19;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ($23|0)>(17);
 if ($24) {
  $25 = $1;
  $26 = (($25) + 12|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $1;
  $29 = HEAP32[$28>>2]|0;
  $30 = (_expandtyperec($29)|0);
  $31 = $1;
  $32 = (($31) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_expandtyperec($33)|0);
  $35 = (_make348($27,$30,$34)|0);
  $0 = $35;
  $37 = $0;
  STACKTOP = sp;return ($37|0);
 }
 $36 = $1;
 $0 = $36;
 $37 = $0;
 STACKTOP = sp;return ($37|0);
}
function _substitutesynonyms($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fun = 0, $synonym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = $1;
  $0 = $4;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $5 = $1;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(17);
 if ($9) {
  $10 = $1;
  $11 = HEAP32[$10>>2]|0;
  $12 = (_substitutesynonyms($11)|0);
  $13 = $1;
  HEAP32[$13>>2] = $12;
  $14 = $1;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_substitutesynonyms($16)|0);
  $18 = $1;
  $19 = (($18) + 4|0);
  HEAP32[$19>>2] = $17;
 }
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ($23|0)==(40);
 if ($24) {
  $25 = HEAP32[2568>>2]|0;
  $26 = $1;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($25) + (($29*52)|0)|0);
  $fun = $30;
  $31 = $fun;
  $32 = (($31) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  $synonym = $33;
  $34 = $synonym;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $synonym;
   $37 = (($36) + 12|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)==(33);
   if ($40) {
    $41 = $fun;
    $42 = (($41) + 32|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==(0|0);
    if ($44) {
     HEAP32[5016>>2] = 1;
     $45 = $synonym;
     $46 = (_copytypeexpr($45)|0);
     $synonym = $46;
     $47 = $synonym;
     $48 = HEAP32[$47>>2]|0;
     $49 = $1;
     _tryunify($48,$49);
     $50 = $synonym;
     $51 = (($50) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $0 = $52;
     $54 = $0;
     STACKTOP = sp;return ($54|0);
    }
   }
  }
 }
 $53 = $1;
 $0 = $53;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function _substituteabstypes($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fun = 0, $synonym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = $1;
  $0 = $4;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $5 = $1;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(17);
 if ($9) {
  $10 = $1;
  $11 = HEAP32[$10>>2]|0;
  $12 = (_substituteabstypes($11)|0);
  $13 = $1;
  HEAP32[$13>>2] = $12;
  $14 = $1;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_substituteabstypes($16)|0);
  $18 = $1;
  $19 = (($18) + 4|0);
  HEAP32[$19>>2] = $17;
 }
 $20 = $1;
 $21 = (($20) + 12|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ($23|0)==(40);
 if ($24) {
  $25 = HEAP32[2568>>2]|0;
  $26 = $1;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($25) + (($29*52)|0)|0);
  $fun = $30;
  $31 = $fun;
  $32 = (($31) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $synonym = $33;
  $34 = $synonym;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $synonym;
   $37 = (($36) + 12|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)==(33);
   if ($40) {
    HEAP32[5016>>2] = 1;
    $41 = $synonym;
    $42 = (_copytypeexpr($41)|0);
    $synonym = $42;
    $43 = $synonym;
    $44 = HEAP32[$43>>2]|0;
    $45 = $1;
    _tryunify($44,$45);
    $46 = $synonym;
    $47 = (($46) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $0 = $48;
    $50 = $0;
    STACKTOP = sp;return ($50|0);
   }
  }
 }
 $49 = $1;
 $0 = $49;
 $50 = $0;
 STACKTOP = sp;return ($50|0);
}
function _typemaychange($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $c;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
  } else {
   $4 = $1;
   $5 = (($4) + 12|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $8 = ($7|0)==(14);
   if ($8) {
    label = 5;
   } else {
    $9 = $1;
    $10 = (($9) + 12|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = $11&255;
    $13 = ($12|0)==(24);
    if ($13) {
     label = 5;
    }
   }
   if ((label|0) == 5) {
    $14 = HEAP32[2568>>2]|0;
    $15 = $1;
    $16 = (($15) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($14) + (($17*52)|0)|0);
    $19 = (($18) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)!=(0);
    if ($21) {
     $0 = 1;
     $38 = $0;
     STACKTOP = sp;return ($38|0);
    }
   }
   $22 = $1;
   $23 = (($22) + 12|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ($25|0)>(17);
   if (!($26)) {
    break;
   }
   $27 = $1;
   $28 = HEAP32[$27>>2]|0;
   $29 = (_typemaychange($28)|0);
   $30 = ($29|0)!=(0);
   if ($30) {
    $37 = 1;
   } else {
    $31 = $1;
    $32 = (($31) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (_typemaychange($33)|0);
    $35 = ($34|0)!=(0);
    $37 = $35;
   }
   $36 = $37&1;
   $0 = $36;
   $38 = $0;
   STACKTOP = sp;return ($38|0);
  }
 } while(0);
 $0 = 0;
 $38 = $0;
 STACKTOP = sp;return ($38|0);
}
function _checkrefined($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lengthnew = 0, $lengthold = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $lengthold = 0;
 $lengthnew = 0;
 $2 = HEAP32[2576>>2]|0;
 HEAP32[5328>>2] = $2;
 HEAP32[5336>>2] = $2;
 $3 = $1;
 $4 = (_refinedrec($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $0 = 1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $6 = HEAP32[5328>>2]|0;
 $temp = $6;
 while(1) {
  $7 = $temp;
  $8 = (($7) + 12|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($10|0)==(39);
  if (!($11)) {
   break;
  }
  $12 = $lengthold;
  $13 = (($12) + 1)|0;
  $lengthold = $13;
  $14 = $temp;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $temp = $16;
 }
 $17 = HEAP32[5336>>2]|0;
 $temp = $17;
 while(1) {
  $18 = $temp;
  $19 = (($18) + 12|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ($21|0)==(39);
  if (!($22)) {
   break;
  }
  $23 = $lengthnew;
  $24 = (($23) + 1)|0;
  $lengthnew = $24;
  $25 = $temp;
  $26 = (($25) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $temp = $27;
 }
 $28 = $lengthnew;
 $29 = $lengthold;
 $30 = ($28|0)<($29|0);
 $31 = $30&1;
 $0 = $31;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _typesize($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)>(17);
 if ($6) {
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  $9 = (_typesize($8)|0);
  $10 = (1 + ($9))|0;
  $11 = $1;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_typesize($13)|0);
  $15 = (($10) + ($14))|0;
  $0 = $15;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 } else {
  $0 = 1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _unify($type1,$type2) {
 $type1 = $type1|0;
 $type2 = $type2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $t1 = 0, $t11 = 0, $t2 = 0, $t22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type1;
 $2 = $type2;
 $3 = $1;
 $4 = (($3) + 12|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(10);
 if ($7) {
  $8 = $1;
  $9 = (_findbinding($8)|0);
  $1 = $9;
 }
 $10 = $2;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(10);
 if ($14) {
  $15 = $2;
  $16 = (_findbinding($15)|0);
  $2 = $16;
 }
 $17 = $1;
 $18 = (($17) + 12|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($20|0)==(10);
 if ($21) {
  $22 = $1;
  $23 = $2;
  $24 = (_addbinding($22,$23)|0);
  $0 = $24;
  $200 = $0;
  STACKTOP = sp;return ($200|0);
 }
 $25 = $2;
 $26 = (($25) + 12|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = ($28|0)==(10);
 if ($29) {
  $30 = $2;
  $31 = $1;
  $32 = (_addbinding($30,$31)|0);
  $0 = $32;
  $200 = $0;
  STACKTOP = sp;return ($200|0);
 }
 $33 = HEAP32[5384>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $1;
  $36 = (($35) + 12|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = ($38|0)==(40);
  if ($39) {
   $40 = $1;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = HEAP32[5384>>2]|0;
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($43|0)==($46|0);
   if ($47) {
    $48 = $1;
    $49 = $2;
    $50 = (_unifyabstype($48,$49)|0);
    $0 = $50;
    $200 = $0;
    STACKTOP = sp;return ($200|0);
   }
  }
 }
 $51 = HEAP32[5384>>2]|0;
 $52 = ($51|0)!=(0|0);
 if ($52) {
  $53 = $2;
  $54 = (($53) + 12|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = ($56|0)==(40);
  if ($57) {
   $58 = $2;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = HEAP32[5384>>2]|0;
   $63 = (($62) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($61|0)==($64|0);
   if ($65) {
    $66 = $2;
    $67 = $1;
    $68 = (_unifyabstype($66,$67)|0);
    $0 = $68;
    $200 = $0;
    STACKTOP = sp;return ($200|0);
   }
  }
 }
 $69 = $1;
 $70 = (($69) + 12|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = $2;
 $74 = (($73) + 12|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = ($72|0)!=($76|0);
 if ($77) {
  $0 = 0;
  $200 = $0;
  STACKTOP = sp;return ($200|0);
 }
 $78 = $1;
 $79 = (($78) + 12|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = ($81|0)==(39);
 if ($82) {
  $83 = $1;
  $84 = HEAP32[$83>>2]|0;
  $85 = $2;
  $86 = HEAP32[$85>>2]|0;
  $87 = (_unify($84,$86)|0);
  $0 = $87;
  $200 = $0;
  STACKTOP = sp;return ($200|0);
 }
 $88 = $1;
 $89 = (($88) + 12|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = $90&255;
 $92 = ($91|0)==(41);
 if ($92) {
  $93 = $1;
  $t1 = $93;
  $94 = $2;
  $t2 = $94;
  while(1) {
   $95 = $t1;
   $96 = (($95) + 12|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = ($98|0)==(41);
   if ($99) {
    $100 = $t2;
    $101 = (($100) + 12|0);
    $102 = HEAP8[$101>>0]|0;
    $103 = $102&255;
    $104 = ($103|0)==(41);
    $201 = $104;
   } else {
    $201 = 0;
   }
   if (!($201)) {
    label = 29;
    break;
   }
   $105 = $t1;
   $106 = HEAP32[$105>>2]|0;
   $107 = $t2;
   $108 = HEAP32[$107>>2]|0;
   $109 = (_unify($106,$108)|0);
   $110 = ($109|0)!=(0);
   if (!($110)) {
    label = 27;
    break;
   }
   $111 = $t1;
   $112 = (($111) + 4|0);
   $113 = HEAP32[$112>>2]|0;
   $t1 = $113;
   $114 = $t2;
   $115 = (($114) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $t2 = $116;
  }
  if ((label|0) == 27) {
   $0 = 0;
   $200 = $0;
   STACKTOP = sp;return ($200|0);
  }
  else if ((label|0) == 29) {
   $117 = $t1;
   $118 = (($117) + 12|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = $t2;
   $122 = (($121) + 12|0);
   $123 = HEAP8[$122>>0]|0;
   $124 = $123&255;
   $125 = ($120|0)==($124|0);
   $126 = $125&1;
   $0 = $126;
   $200 = $0;
   STACKTOP = sp;return ($200|0);
  }
 }
 $127 = $1;
 $128 = (($127) + 12|0);
 $129 = HEAP8[$128>>0]|0;
 $130 = $129&255;
 $131 = ($130|0)==(40);
 if (!($131)) {
  $179 = $1;
  $180 = (($179) + 12|0);
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&255;
  $183 = ($182|0)==(22);
  if (!($183)) {
   $0 = 1;
   $200 = $0;
   STACKTOP = sp;return ($200|0);
  }
  $184 = $1;
  $185 = HEAP32[$184>>2]|0;
  $186 = $2;
  $187 = HEAP32[$186>>2]|0;
  $188 = (_unify($185,$187)|0);
  $189 = ($188|0)!=(0);
  if ($189) {
   $190 = $1;
   $191 = (($190) + 4|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = $2;
   $194 = (($193) + 4|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (_unify($192,$195)|0);
   $197 = ($196|0)!=(0);
   $199 = $197;
  } else {
   $199 = 0;
  }
  $198 = $199&1;
  $0 = $198;
  $200 = $0;
  STACKTOP = sp;return ($200|0);
 }
 $132 = $1;
 $133 = HEAP32[$132>>2]|0;
 $134 = (($133) + 8|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $2;
 $137 = HEAP32[$136>>2]|0;
 $138 = (($137) + 8|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($135|0)!=($139|0);
 if ($140) {
  $0 = 0;
  $200 = $0;
  STACKTOP = sp;return ($200|0);
 }
 $141 = $1;
 $142 = (($141) + 4|0);
 $143 = HEAP32[$142>>2]|0;
 $t11 = $143;
 $144 = $2;
 $145 = (($144) + 4|0);
 $146 = HEAP32[$145>>2]|0;
 $t22 = $146;
 while(1) {
  $147 = $t11;
  $148 = (($147) + 12|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $149&255;
  $151 = ($150|0)==(40);
  if ($151) {
   $152 = $t22;
   $153 = (($152) + 12|0);
   $154 = HEAP8[$153>>0]|0;
   $155 = $154&255;
   $156 = ($155|0)==(40);
   $202 = $156;
  } else {
   $202 = 0;
  }
  if (!($202)) {
   label = 40;
   break;
  }
  $157 = $t11;
  $158 = HEAP32[$157>>2]|0;
  $159 = $t22;
  $160 = HEAP32[$159>>2]|0;
  $161 = (_unify($158,$160)|0);
  $162 = ($161|0)!=(0);
  if (!($162)) {
   label = 38;
   break;
  }
  $163 = $t11;
  $164 = (($163) + 4|0);
  $165 = HEAP32[$164>>2]|0;
  $t11 = $165;
  $166 = $t22;
  $167 = (($166) + 4|0);
  $168 = HEAP32[$167>>2]|0;
  $t22 = $168;
 }
 if ((label|0) == 38) {
  $0 = 0;
  $200 = $0;
  STACKTOP = sp;return ($200|0);
 }
 else if ((label|0) == 40) {
  $169 = $t11;
  $170 = (($169) + 12|0);
  $171 = HEAP8[$170>>0]|0;
  $172 = $171&255;
  $173 = $t22;
  $174 = (($173) + 12|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = $175&255;
  $177 = ($172|0)==($176|0);
  $178 = $177&1;
  $0 = $178;
  $200 = $0;
  STACKTOP = sp;return ($200|0);
 }
 return (0)|0;
}
function _swapcontext($context) {
 $context = $context|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $context;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $temp = $2;
 $3 = HEAP32[5216>>2]|0;
 $4 = $0;
 HEAP32[$4>>2] = $3;
 $5 = $temp;
 HEAP32[5216>>2] = $5;
 STACKTOP = sp;return;
}
function _copytypeexprrec($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(10);
 if ($6) {
  $7 = (_newcell(10)|0);
  $temp = $7;
  $8 = HEAP32[5432>>2]|0;
  $9 = $1;
  $10 = (($9) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($8) + ($11))|0;
  $13 = $temp;
  $14 = (($13) + 8|0);
  HEAP32[$14>>2] = $12;
  $15 = $temp;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[5424>>2]|0;
  $19 = ($17|0)>($18|0);
  if ($19) {
   $20 = $temp;
   $21 = (($20) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[5424>>2] = $22;
  }
  $23 = $temp;
  $0 = $23;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $24 = $1;
 $25 = (($24) + 12|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ($27|0)>(17);
 if ($28) {
  $29 = $1;
  $30 = (($29) + 12|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $1;
  $33 = HEAP32[$32>>2]|0;
  $34 = (_copytypeexprrec($33)|0);
  $35 = $1;
  $36 = (($35) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (_copytypeexprrec($37)|0);
  $39 = (_make348($31,$34,$38)|0);
  $0 = $39;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $40 = $1;
 $0 = $40;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _findbinding($var) {
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $var;
 while(1) {
  $2 = $1;
  $3 = (($2) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4|0) % 10)&-1;
  $6 = (5344 + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $temp = $7;
  while(1) {
   $8 = $temp;
   $9 = (($8) + 12|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = ($11|0)==(39);
   if ($12) {
    $13 = $temp;
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    $16 = (($15) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $1;
    $19 = (($18) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($17|0)!=($20|0);
    $42 = $21;
   } else {
    $42 = 0;
   }
   if (!($42)) {
    break;
   }
   $22 = $temp;
   $23 = (($22) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $temp = $24;
  }
  $25 = $temp;
  $26 = (($25) + 12|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = ($28|0)!=(39);
  if ($29) {
   label = 8;
   break;
  }
  $31 = $temp;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $1 = $34;
  $35 = $1;
  $36 = (($35) + 12|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = ($38|0)!=(10);
  if ($39) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 8) {
  $30 = $1;
  $0 = $30;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 10) {
  $40 = $1;
  $0 = $40;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _addvariable($var,$variablelist) {
 $var = $var|0;
 $variablelist = $variablelist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $number = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $var;
 $2 = $variablelist;
 $3 = $2;
 $temp = $3;
 $number = 1;
 while(1) {
  $4 = $temp;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 12|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(39);
  if (!($9)) {
   label = 6;
   break;
  }
  $10 = $temp;
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)==($17|0);
  if ($18) {
   label = 4;
   break;
  }
  $20 = $temp;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 4|0);
  $temp = $22;
  $23 = $number;
  $24 = (($23) + 1)|0;
  $number = $24;
 }
 if ((label|0) == 4) {
  $19 = $number;
  $0 = $19;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 6) {
  $25 = $1;
  $26 = HEAP32[2576>>2]|0;
  $27 = (_make348(39,$25,$26)|0);
  $28 = $temp;
  HEAP32[$28>>2] = $27;
  $29 = $number;
  $0 = $29;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _tryunify($type1,$type2) {
 $type1 = $type1|0;
 $type2 = $type2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $list = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $type1;
 $1 = $type2;
 $2 = $0;
 $3 = $1;
 $4 = (_unify($2,$3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $1;
 $8 = (_make348(39,$6,$7)|0);
 $list = $8;
 $9 = $list;
 $10 = (_expandtype($9)|0);
 $list = $10;
 _Write(5544,$vararg_buffer);
 $11 = $list;
 $12 = HEAP32[$11>>2]|0;
 _WriteType($12);
 _Write(5560,$vararg_buffer1);
 $13 = $list;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 _WriteType($15);
 _typeerror();
 STACKTOP = sp;return;
}
function _refinedrec($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $type;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(10);
 if ($6) {
  $7 = $1;
  (_addvariable($7,5328)|0);
  $8 = $1;
  $9 = (_findbinding($8)|0);
  $1 = $9;
  $10 = $1;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)!=(10);
  if ($14) {
   $0 = 1;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  } else {
   $15 = $1;
   (_addvariable($15,5336)|0);
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 }
 $16 = $1;
 $17 = (($16) + 12|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ($19|0)>(17);
 if (!($20)) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $21 = $1;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_refinedrec($22)|0);
 $24 = ($23|0)!=(0);
 if ($24) {
  $31 = 1;
 } else {
  $25 = $1;
  $26 = (($25) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_refinedrec($27)|0);
  $29 = ($28|0)!=(0);
  $31 = $29;
 }
 $30 = $31&1;
 $0 = $30;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _addbinding($var,$typeexpr) {
 $var = $var|0;
 $typeexpr = $typeexpr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bds = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $var;
 $2 = $typeexpr;
 $3 = $2;
 $4 = (($3) + 12|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(10);
 if ($7) {
  $8 = $1;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)==($13|0);
  if ($14) {
   $0 = 1;
   $36 = $0;
   STACKTOP = sp;return ($36|0);
  }
 }
 $15 = $2;
 $16 = (($15) + 12|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)!=(10);
 if ($19) {
  $20 = $1;
  $21 = $2;
  $22 = (_occurs($20,$21)|0);
  $23 = ($22|0)!=(0);
  if ($23) {
   $0 = 0;
   $36 = $0;
   STACKTOP = sp;return ($36|0);
  }
 }
 $24 = $1;
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26|0) % 10)&-1;
 $28 = (5344 + ($27<<2)|0);
 $bds = $28;
 $29 = $1;
 $30 = $2;
 $31 = (_make348(39,$29,$30)|0);
 $32 = $bds;
 $33 = HEAP32[$32>>2]|0;
 $34 = (_make348(39,$31,$33)|0);
 $35 = $bds;
 HEAP32[$35>>2] = $34;
 $0 = 1;
 $36 = $0;
 STACKTOP = sp;return ($36|0);
}
function _unifyabstype($abstype,$type) {
 $abstype = $abstype|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $fun = 0, $synonym = 0, $t1 = 0, $t2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = $abstype;
 $2 = $type;
 $3 = HEAP32[2568>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($3) + (($7*52)|0)|0);
 $fun = $8;
 $9 = $fun;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $fun;
  $14 = (($13) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)==(33);
  if ($19) {
   $20 = $fun;
   $21 = (($20) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_copytypeexpr($22)|0);
   $synonym = $23;
   $24 = $synonym;
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $t1 = $27;
   $28 = $1;
   $29 = (($28) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $t2 = $30;
   while(1) {
    $31 = $t1;
    $32 = (($31) + 12|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = ($34|0)==(40);
    if ($35) {
     $36 = $t2;
     $37 = (($36) + 12|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = ($39|0)==(40);
     $69 = $40;
    } else {
     $69 = 0;
    }
    if (!($69)) {
     break;
    }
    $41 = $t1;
    $42 = HEAP32[$41>>2]|0;
    $43 = $t2;
    $44 = HEAP32[$43>>2]|0;
    $45 = (_unify($42,$44)|0);
    $46 = ($45|0)!=(0);
    if (!($46)) {
     label = 8;
     break;
    }
    $47 = $t1;
    $48 = (($47) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $t1 = $49;
    $50 = $t2;
    $51 = (($50) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $t2 = $52;
   }
   if ((label|0) == 8) {
    $0 = 0;
    $68 = $0;
    STACKTOP = sp;return ($68|0);
   }
   $53 = $t1;
   $54 = (($53) + 12|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $t2;
   $58 = (($57) + 12|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = ($56|0)!=($60|0);
   if ($61) {
    $0 = 0;
    $68 = $0;
    STACKTOP = sp;return ($68|0);
   } else {
    $62 = $synonym;
    $63 = (($62) + 4|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $2;
    $66 = (_unify($64,$65)|0);
    $0 = $66;
    $68 = $0;
    STACKTOP = sp;return ($68|0);
   }
  }
 }
 _Write(5392,$vararg_buffer);
 $67 = $1;
 _WriteType($67);
 _typeerror();
 $0 = 0;
 $68 = $0;
 STACKTOP = sp;return ($68|0);
}
function _occurs($var,$type) {
 $var = $var|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $var;
 $2 = $type;
 $3 = $2;
 $4 = (($3) + 12|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)==(10);
 if ($7) {
  $8 = $2;
  $9 = (_findbinding($8)|0);
  $2 = $9;
 }
 $10 = $2;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(10);
 if ($14) {
  $15 = $2;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $1;
  $19 = (($18) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)==($20|0);
  $22 = $21&1;
  $0 = $22;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $23 = $2;
 $24 = (($23) + 12|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)>(17);
 if (!($27)) {
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $28 = $1;
 $29 = $2;
 $30 = HEAP32[$29>>2]|0;
 $31 = (_occurs($28,$30)|0);
 $32 = ($31|0)!=(0);
 if ($32) {
  $40 = 1;
 } else {
  $33 = $1;
  $34 = $2;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_occurs($33,$36)|0);
  $38 = ($37|0)!=(0);
  $40 = $38;
 }
 $39 = $40&1;
 $0 = $39;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _getAmaPath() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5760|0);
}
function _createmem($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $0;
 $2 = ($1|0)<(10000);
 if ($2) {
  $0 = 10000;
 }
 $3 = $0;
 $4 = ($3|0)>(10000000);
 if ($4) {
  $0 = 10000000;
 }
 $5 = $0;
 HEAP32[6288>>2] = $5;
 $6 = HEAP32[6288>>2]|0;
 $7 = (_calloc($6,20)|0);
 HEAP32[6296>>2] = $7;
 HEAP32[6304>>2] = 0;
 $8 = HEAP32[6288>>2]|0;
 $9 = HEAP32[6304>>2]|0;
 $10 = (($8) - ($9))|0;
 HEAP32[6312>>2] = $10;
 HEAP8[6320>>0] = 0;
 $11 = HEAP8[6320>>0]|0;
 $12 = $11&255;
 $13 = (1 - ($12))|0;
 $14 = $13&255;
 HEAP8[6328>>0] = $14;
 HEAP32[6336>>2] = 0;
 HEAP32[6344>>2] = 0;
 STACKTOP = sp;return;
}
function _reclaim() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[6336>>2]|0;
 $k = $0;
 while(1) {
  $1 = $k;
  $2 = HEAP32[6288>>2]|0;
  $3 = ($1|0)<($2|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[6296>>2]|0;
  $5 = $k;
  $6 = (($4) + (($5*20)|0)|0);
  $c = $6;
  $7 = $c;
  $8 = (($7) + 16|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = HEAP8[6320>>0]|0;
  $12 = $11&255;
  $13 = ($10|0)==($12|0);
  if ($13) {
   $14 = HEAP8[6328>>0]|0;
   $15 = $c;
   $16 = (($15) + 16|0);
   HEAP8[$16>>0] = $14;
  }
  $17 = $k;
  $18 = (($17) + 1)|0;
  $k = $18;
 }
 $19 = HEAP32[6288>>2]|0;
 $20 = HEAP32[6304>>2]|0;
 $21 = (($19) - ($20))|0;
 HEAP32[6312>>2] = $21;
 $22 = HEAP8[6328>>0]|0;
 HEAP8[6320>>0] = $22;
 $23 = HEAP8[6320>>0]|0;
 $24 = $23&255;
 $25 = (1 - ($24))|0;
 $26 = $25&255;
 HEAP8[6328>>0] = $26;
 _forallhashtable(73);
 _forallstack(74);
 HEAP32[6336>>2] = 0;
 $27 = HEAP32[6344>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[6344>>2] = $28;
 $29 = HEAP32[6312>>2]|0;
 $30 = ($29|0)<(1000);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 _systemerror(2);
 STACKTOP = sp;return;
}
function _unlockmem() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $k = 0;
 while(1) {
  $0 = $k;
  $1 = HEAP32[6288>>2]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[6296>>2]|0;
  $4 = $k;
  $5 = (($3) + (($4*20)|0)|0);
  $c = $5;
  $6 = $c;
  $7 = (($6) + 16|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = ($9|0)==(2);
  if ($10) {
   $11 = HEAP8[6328>>0]|0;
   $12 = $c;
   $13 = (($12) + 16|0);
   HEAP8[$13>>0] = $11;
  }
  $14 = $k;
  $15 = (($14) + 1)|0;
  $k = $15;
 }
 HEAP32[6304>>2] = 0;
 _reclaim();
 STACKTOP = sp;return;
}
function _lockmem() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _unlockmem();
 $0 = HEAP32[6288>>2]|0;
 HEAP32[6312>>2] = $0;
 $1 = HEAP8[6328>>0]|0;
 HEAP8[6320>>0] = $1;
 HEAP8[6328>>0] = 2;
 _forallhashtable(73);
 _forallstack(74);
 $2 = HEAP8[6320>>0]|0;
 HEAP8[6328>>0] = $2;
 $3 = HEAP8[6328>>0]|0;
 $4 = $3&255;
 $5 = (1 - ($4))|0;
 $6 = $5&255;
 HEAP8[6320>>0] = $6;
 $7 = HEAP32[6288>>2]|0;
 $8 = HEAP32[6312>>2]|0;
 $9 = (($7) - ($8))|0;
 HEAP32[6304>>2] = $9;
 return;
}
function _checkmem() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6312>>2]|0;
 $1 = ($0|0)<(1000);
 if (!($1)) {
  return;
 }
 _reclaim();
 $2 = HEAP32[6312>>2]|0;
 $3 = ($2|0)<(1000);
 if ($3) {
  _systemerror(2);
 }
 return;
}
function _checkmemlarge() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6312>>2]|0;
 $1 = ($0|0)<(5000);
 if (!($1)) {
  return;
 }
 _reclaim();
 $2 = HEAP32[6312>>2]|0;
 $3 = ($2|0)<(5000);
 if ($3) {
  _systemerror(2);
 }
 return;
}
function _printmeminfo() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[6288>>2]|0;
 $1 = HEAP32[6288>>2]|0;
 $2 = HEAP32[6304>>2]|0;
 $3 = (($1) - ($2))|0;
 $4 = HEAP32[6344>>2]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $4;
 _Write(6352,$vararg_buffer);
 STACKTOP = sp;return;
}
function _newcell($tag) {
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $tag;
 $1 = HEAP32[6312>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  _reclaim();
 }
 $3 = HEAP32[6312>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[6312>>2] = $4;
 while(1) {
  $5 = HEAP32[6296>>2]|0;
  $6 = HEAP32[6336>>2]|0;
  $7 = (($5) + (($6*20)|0)|0);
  $temp = $7;
  $8 = HEAP32[6336>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[6336>>2] = $9;
  $10 = $temp;
  $11 = (($10) + 16|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = HEAP8[6320>>0]|0;
  $15 = $14&255;
  $16 = ($13|0)!=($15|0);
  if (!($16)) {
   break;
  }
 }
 $17 = HEAP8[6328>>0]|0;
 $18 = $temp;
 $19 = (($18) + 16|0);
 HEAP8[$19>>0] = $17;
 $20 = $0;
 $21 = $temp;
 $22 = (($21) + 12|0);
 HEAP8[$22>>0] = $20;
 $23 = $temp;
 $24 = (($23) + 4|0);
 HEAP32[$24>>2] = 0;
 $25 = $temp;
 HEAP32[$25>>2] = 0;
 $26 = $temp;
 STACKTOP = sp;return ($26|0);
}
function _markfuncdef($fun) {
 $fun = $fun|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fun;
 $1 = $0;
 $2 = (($1) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 16|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = HEAP8[6320>>0]|0;
 $8 = $7&255;
 $9 = ($6|0)==($8|0);
 if ($9) {
  $10 = $0;
  $11 = (($10) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  _markcell($12);
 }
 $13 = $0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $0;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 16|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = HEAP8[6320>>0]|0;
  $24 = $23&255;
  $25 = ($22|0)==($24|0);
  if ($25) {
   $26 = $0;
   $27 = (($26) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   _markcell($28);
  }
 }
 $29 = $0;
 $30 = (($29) + 28|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $0;
  $34 = (($33) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 16|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = HEAP8[6320>>0]|0;
  $40 = $39&255;
  $41 = ($38|0)==($40|0);
  if ($41) {
   $42 = $0;
   $43 = (($42) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   _markcell($44);
  }
 }
 $45 = $0;
 $46 = (($45) + 32|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 if (!($48)) {
  STACKTOP = sp;return;
 }
 $49 = $0;
 $50 = (($49) + 32|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 16|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = HEAP8[6320>>0]|0;
 $56 = $55&255;
 $57 = ($54|0)==($56|0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $58 = $0;
 $59 = (($58) + 32|0);
 $60 = HEAP32[$59>>2]|0;
 _markcell($60);
 STACKTOP = sp;return;
}
function _markcell($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + 16|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = HEAP8[6320>>0]|0;
 $8 = $7&255;
 $9 = ($6|0)==($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = HEAP8[6328>>0]|0;
 $11 = $0;
 $12 = (($11) + 16|0);
 HEAP8[$12>>0] = $10;
 $13 = HEAP32[6312>>2]|0;
 $14 = (($13) + -1)|0;
 HEAP32[6312>>2] = $14;
 $15 = $0;
 $16 = (($15) + 12|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)>(17);
 if ($19) {
  $20 = $0;
  _markcellrec($20);
 }
 STACKTOP = sp;return;
}
function _markcellrec($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 L1: while(1) {
  $1 = $0;
  $2 = (($1) + 12|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  if ((($4|0) == 28)) {
   $13 = $0;
   $14 = (($13) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(1);
   do {
    if ($16) {
     $17 = $0;
     $18 = HEAP32[$17>>2]|0;
     $19 = (($18) + 12|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = $20&255;
     $22 = ($21|0)==(28);
     if ($22) {
      $23 = $0;
      $24 = HEAP32[$23>>2]|0;
      $25 = (($24) + 8|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $0;
      $28 = (($27) + 8|0);
      HEAP32[$28>>2] = $26;
      $29 = $0;
      $30 = HEAP32[$29>>2]|0;
      $31 = HEAP32[$30>>2]|0;
      $32 = $0;
      HEAP32[$32>>2] = $31;
      continue L1;
     } else {
      break;
     }
    } else {
     $33 = $0;
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 12|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = ($37|0)<(8);
     if (!($38)) {
      $39 = $0;
      $40 = HEAP32[$39>>2]|0;
      $41 = (($40) + 12|0);
      $42 = HEAP8[$41>>0]|0;
      $43 = $42&255;
      $44 = ($43|0)>(38);
      if (!($44)) {
       break;
      }
     }
     $45 = $0;
     $46 = (($45) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = $0;
     $49 = HEAP32[$48>>2]|0;
     $50 = (_copydirector($47,$49)|0);
     $51 = $0;
     HEAP32[$51>>2] = $50;
     $52 = $0;
     $53 = (($52) + 8|0);
     HEAP32[$53>>2] = 1;
     continue L1;
    }
   } while(0);
  } else if ((($4|0) == 25)) {
   $5 = $0;
   $6 = (($5) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = HEAP32[2976>>2]|0;
   $9 = ($7|0)==($8|0);
   if ($9) {
    $10 = $0;
    $11 = HEAP32[$10>>2]|0;
    $12 = HEAP32[$11>>2]|0;
    _MarkIOFile($12);
   }
  }
  $54 = $0;
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)!=(0|0);
  if ($56) {
   $57 = $0;
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + 16|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = HEAP8[6320>>0]|0;
   $63 = $62&255;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = HEAP8[6328>>0]|0;
    $66 = $0;
    $67 = HEAP32[$66>>2]|0;
    $68 = (($67) + 16|0);
    HEAP8[$68>>0] = $65;
    $69 = HEAP32[6312>>2]|0;
    $70 = (($69) + -1)|0;
    HEAP32[6312>>2] = $70;
    $71 = $0;
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) + 12|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = ($75|0)>(17);
    if ($76) {
     $77 = $0;
     $78 = HEAP32[$77>>2]|0;
     _markcellrec($78);
    }
   }
  }
  $79 = $0;
  $80 = (($79) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $0 = $81;
  $82 = $0;
  $83 = ($82|0)==(0|0);
  if ($83) {
   label = 22;
   break;
  }
  $84 = $0;
  $85 = (($84) + 16|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = HEAP8[6320>>0]|0;
  $89 = $88&255;
  $90 = ($87|0)!=($89|0);
  if ($90) {
   label = 22;
   break;
  }
  $91 = HEAP8[6328>>0]|0;
  $92 = $0;
  $93 = (($92) + 16|0);
  HEAP8[$93>>0] = $91;
  $94 = HEAP32[6312>>2]|0;
  $95 = (($94) + -1)|0;
  HEAP32[6312>>2] = $95;
  $96 = $0;
  $97 = (($96) + 12|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = ($99|0)<(17);
  if ($100) {
   label = 24;
   break;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return;
 }
}
function _initlib() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_time((0|0))|0);
 _srand($0);
 (_insert(6408,1,14,0,75)|0);
 (_insert(6416,2,14,0,76)|0);
 (_insert(6424,0,14,0,77)|0);
 (_insert(6440,1,14,0,78)|0);
 (_insert(6448,1,14,0,79)|0);
 (_insert(6456,1,14,0,80)|0);
 (_insert(6464,1,14,0,81)|0);
 (_insert(6472,1,14,0,82)|0);
 (_insert(6480,1,14,0,83)|0);
 (_insert(6488,2,14,0,84)|0);
 (_insert(6496,2,14,0,85)|0);
 (_insert(6512,2,14,0,86)|0);
 (_insert(6520,1,14,0,87)|0);
 (_insert(6528,1,14,0,88)|0);
 (_insert(6536,1,14,0,89)|0);
 (_insert(6544,1,14,0,90)|0);
 (_insert(6552,1,14,0,91)|0);
 (_insert(6560,2,14,0,92)|0);
 (_insert(6568,1,14,0,93)|0);
 (_insert(6576,3,14,0,94)|0);
 (_insert(6584,3,14,0,95)|0);
 (_insert(6592,2,14,0,96)|0);
 (_insert(6600,3,14,0,97)|0);
 (_insert(6608,2,14,0,98)|0);
 (_insert(6616,1,14,0,99)|0);
 (_insert(6624,2,14,0,100)|0);
 (_insert(6632,2,14,0,101)|0);
 (_insert(6640,2,14,0,102)|0);
 (_insert(6648,1,14,0,103)|0);
 (_insert(6656,3,14,0,104)|0);
 (_insert(6664,2,14,0,105)|0);
 (_insert(6672,2,14,0,106)|0);
 (_insert(6680,2,14,0,107)|0);
 (_insert(6696,2,14,0,108)|0);
 (_insert(6704,2,14,0,109)|0);
 (_insert(6720,2,14,0,110)|0);
 (_insert(6728,3,14,0,111)|0);
 (_insert(6736,1,14,0,112)|0);
 (_insert(10808,3,14,0,113)|0);
 (_insert(6744,2,14,0,114)|0);
 (_insert(6752,2,14,0,115)|0);
 (_insert(6760,2,14,0,116)|0);
 (_insert(6768,2,14,0,117)|0);
 (_insert(6776,2,14,0,118)|0);
 (_insert(6784,2,14,0,119)|0);
 (_insert(9544,1,14,0,120)|0);
 (_insert(9536,1,14,0,121)|0);
 (_insert(6792,1,14,0,122)|0);
 (_insert(6800,2,14,0,123)|0);
 (_insert(6808,2,14,0,124)|0);
 (_insert(6816,1,14,0,125)|0);
 (_insert(6824,1,14,0,126)|0);
 (_insert(6840,2,14,0,127)|0);
 (_insert(6848,2,14,0,128)|0);
 (_insert(6856,2,14,0,129)|0);
 (_insert(6864,3,14,0,130)|0);
 (_insert(6872,1,14,0,131)|0);
 (_insert(6880,1,14,0,132)|0);
 (_insert(6888,1,14,0,133)|0);
 (_insert(6896,1,14,0,134)|0);
 (_insert(6904,1,14,0,135)|0);
 (_insert(6912,1,14,0,136)|0);
 (_insert(6920,1,14,0,137)|0);
 (_insert(6928,1,14,0,138)|0);
 (_insert(6936,1,14,0,139)|0);
 (_insert(6944,1,14,0,140)|0);
 (_insert(6952,1,14,0,141)|0);
 (_insert(6960,1,14,0,142)|0);
 (_insert(6968,1,14,0,143)|0);
 (_insert(6976,1,14,0,144)|0);
 (_insert(6984,1,14,0,145)|0);
 (_insert(6992,1,14,0,146)|0);
 (_inserttypestring(6408,7000)|0);
 (_inserttypestring(6416,7016)|0);
 (_inserttypestring(6424,7032)|0);
 (_inserttypestring(6440,7064)|0);
 (_inserttypestring(6448,7080)|0);
 (_inserttypestring(6456,7096)|0);
 (_inserttypestring(6464,7112)|0);
 (_inserttypestring(6472,7128)|0);
 (_inserttypestring(6480,7144)|0);
 (_inserttypestring(6488,7160)|0);
 (_inserttypestring(6496,7184)|0);
 (_inserttypestring(6512,7216)|0);
 (_inserttypestring(6520,7080)|0);
 (_inserttypestring(6528,7080)|0);
 (_inserttypestring(6536,7144)|0);
 (_inserttypestring(6544,7240)|0);
 (_inserttypestring(6552,7096)|0);
 (_inserttypestring(6560,7256)|0);
 (_inserttypestring(6568,7240)|0);
 (_inserttypestring(6576,7272)|0);
 (_inserttypestring(6584,7312)|0);
 (_inserttypestring(6592,7352)|0);
 (_inserttypestring(6600,7384)|0);
 (_inserttypestring(6608,7352)|0);
 (_inserttypestring(6616,7424)|0);
 (_inserttypestring(6624,7184)|0);
 (_inserttypestring(6632,7440)|0);
 (_inserttypestring(6640,7472)|0);
 (_inserttypestring(6648,7496)|0);
 (_inserttypestring(6656,7512)|0);
 (_inserttypestring(6664,7472)|0);
 (_inserttypestring(6672,7544)|0);
 (_inserttypestring(6680,7576)|0);
 (_inserttypestring(6696,7160)|0);
 (_inserttypestring(6704,7184)|0);
 (_inserttypestring(6720,7616)|0);
 (_inserttypestring(6728,7648)|0);
 (_inserttypestring(6736,7688)|0);
 (_inserttypestring(10808,7720)|0);
 (_inserttypestring(6744,7760)|0);
 (_inserttypestring(6752,7776)|0);
 (_inserttypestring(6760,7792)|0);
 (_inserttypestring(6768,7792)|0);
 (_inserttypestring(6776,7816)|0);
 (_inserttypestring(6784,7816)|0);
 (_inserttypestring(9544,7840)|0);
 (_inserttypestring(9536,7856)|0);
 (_inserttypestring(6792,7872)|0);
 (_inserttypestring(6800,7896)|0);
 (_inserttypestring(6808,7896)|0);
 (_inserttypestring(6824,7928)|0);
 (_inserttypestring(6840,7952)|0);
 (_inserttypestring(6848,7952)|0);
 (_inserttypestring(6856,7968)|0);
 (_inserttypestring(6864,7992)|0);
 (_inserttypestring(6872,8032)|0);
 (_inserttypestring(6880,8048)|0);
 (_inserttypestring(6888,8032)|0);
 (_inserttypestring(6896,8048)|0);
 (_inserttypestring(6904,8064)|0);
 (_inserttypestring(6912,8064)|0);
 (_inserttypestring(6920,8064)|0);
 (_inserttypestring(6928,8080)|0);
 (_inserttypestring(6936,8096)|0);
 (_inserttypestring(6944,8064)|0);
 (_inserttypestring(6952,8064)|0);
 (_inserttypestring(6960,8064)|0);
 (_inserttypestring(6968,8064)|0);
 (_inserttypestring(6976,8064)|0);
 (_inserttypestring(6984,8064)|0);
 (_inserttypestring(6992,8064)|0);
 $1 = (_gettemplate(6448)|0);
 HEAP32[8112>>2] = $1;
 $2 = (_gettemplate(6456)|0);
 HEAP32[8120>>2] = $2;
 $3 = (_gettemplate(6520)|0);
 HEAP32[8128>>2] = $3;
 $4 = (_gettemplate(6528)|0);
 HEAP32[8136>>2] = $4;
 $5 = (_gettemplate(6488)|0);
 HEAP32[8144>>2] = $5;
 $6 = (_gettemplate(6672)|0);
 HEAP32[8152>>2] = $6;
 $7 = (_gettemplate(6752)|0);
 HEAP32[8160>>2] = $7;
 $8 = (_gettemplate(6872)|0);
 HEAP32[8168>>2] = $8;
 $9 = (_gettemplate(6944)|0);
 HEAP32[8176>>2] = $9;
 $10 = (_gettemplate(6928)|0);
 HEAP32[8184>>2] = $10;
 $11 = (_gettemplate(6976)|0);
 HEAP32[8192>>2] = $11;
 $12 = (_gettemplate(6984)|0);
 HEAP32[8200>>2] = $12;
 $13 = (_gettemplate(6760)|0);
 HEAP32[8208>>2] = $13;
 $14 = (_gettemplate(6616)|0);
 HEAP32[8216>>2] = $14;
 $15 = (_gettemplate(6624)|0);
 HEAP32[8224>>2] = $15;
 $16 = (_gettemplate(6584)|0);
 HEAP32[8232>>2] = $16;
 $17 = (_gettemplate(6592)|0);
 HEAP32[8240>>2] = $17;
 $18 = (_gettemplate(6600)|0);
 HEAP32[8248>>2] = $18;
 $19 = (_gettemplate(6608)|0);
 HEAP32[8256>>2] = $19;
 $20 = (_gettemplate(6856)|0);
 HEAP32[8264>>2] = $20;
 $21 = (_gettemplate(6632)|0);
 HEAP32[8272>>2] = $21;
 $22 = (_gettemplate(6640)|0);
 HEAP32[8280>>2] = $22;
 $23 = (_gettemplate(6648)|0);
 HEAP32[8288>>2] = $23;
 $24 = (_gettemplate(6656)|0);
 HEAP32[8296>>2] = $24;
 $25 = (_gettemplate(6664)|0);
 HEAP32[8304>>2] = $25;
 $26 = (_gettemplate(6768)|0);
 HEAP32[8312>>2] = $26;
 $27 = (_gettemplate(6864)|0);
 HEAP32[8320>>2] = $27;
 $28 = (_gettemplate(6696)|0);
 HEAP32[8328>>2] = $28;
 $29 = (_gettemplate(6704)|0);
 HEAP32[8336>>2] = $29;
 $30 = (_gettemplate(6720)|0);
 HEAP32[8344>>2] = $30;
 $31 = (_gettemplate(6728)|0);
 HEAP32[8352>>2] = $31;
 _insertsys(6816);
 return;
}
function _applyERROR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $temp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $temp = $4;
 $5 = $temp;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(8);
 if ($9) {
  $10 = $temp;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)<(38);
  if ($14) {
   $15 = $temp;
   $16 = HEAP32[3152>>2]|0;
   $17 = HEAP32[3144>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $15;
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[3152>>2] = $20;
   _eval();
   $21 = HEAP32[3152>>2]|0;
   $22 = (($21) - 1)|0;
   HEAP32[3152>>2] = $22;
  }
 }
 while(1) {
  $23 = $temp;
  $24 = (($23) + 12|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = ($26|0)==(39);
  if (!($27)) {
   break;
  }
  $28 = $temp;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 12|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = ($32|0)>(8);
  if ($33) {
   $34 = $temp;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + 12|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)<(38);
   if ($39) {
    $40 = $temp;
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP32[3152>>2]|0;
    $43 = HEAP32[3144>>2]|0;
    $44 = (($43) + ($42<<2)|0);
    HEAP32[$44>>2] = $41;
    $45 = HEAP32[3152>>2]|0;
    $46 = (($45) + 1)|0;
    HEAP32[3152>>2] = $46;
    _eval();
    $47 = HEAP32[3152>>2]|0;
    $48 = (($47) - 1)|0;
    HEAP32[3152>>2] = $48;
   }
  }
  $49 = $temp;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $52&255;
  $54 = $53 << 24 >> 24;
  HEAP32[$vararg_buffer>>2] = $54;
  _Write(8400,$vararg_buffer);
  $55 = $temp;
  $56 = (($55) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $temp = $57;
  $58 = $temp;
  $59 = (($58) + 12|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = ($61|0)>(8);
  if ($62) {
   $63 = $temp;
   $64 = (($63) + 12|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = ($66|0)<(38);
   if ($67) {
    $68 = $temp;
    $69 = HEAP32[3152>>2]|0;
    $70 = HEAP32[3144>>2]|0;
    $71 = (($70) + ($69<<2)|0);
    HEAP32[$71>>2] = $68;
    $72 = HEAP32[3152>>2]|0;
    $73 = (($72) + 1)|0;
    HEAP32[3152>>2] = $73;
    _eval();
    $74 = HEAP32[3152>>2]|0;
    $75 = (($74) - 1)|0;
    HEAP32[3152>>2] = $75;
   }
  }
 }
 _runtimeerror(13,-1);
 STACKTOP = sp;return;
}
function _applyDEBUG() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 _Write(8376,$vararg_buffer);
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 _WriteCell($4);
 _Write(8392,$vararg_buffer1);
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[3152>>2]|0;
 $11 = HEAP32[3144>>2]|0;
 $12 = (($11) + ($10<<2)|0);
 HEAP32[$12>>2] = $9;
 $13 = HEAP32[3152>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[3152>>2] = $14;
 _eval();
 STACKTOP = sp;return;
}
function _applyTIMEDATE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $dt = 0, $t = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp + 8|0;
 (_time(($t|0))|0);
 $0 = (_localtime(($t|0))|0);
 $dt = $0;
 $1 = (_newcell(41)|0);
 $temp = $1;
 $2 = HEAP32[3152>>2]|0;
 $3 = HEAP32[3144>>2]|0;
 $4 = (($3) + ($2<<2)|0);
 HEAP32[$4>>2] = $1;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[3152>>2] = $6;
 $7 = $temp;
 $8 = (($7) + 8|0);
 HEAP32[$8>>2] = 6;
 $9 = (_newcell(3)|0);
 $10 = $temp;
 HEAP32[$10>>2] = $9;
 $11 = $dt;
 $12 = HEAP32[$11>>2]|0;
 $13 = $temp;
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$14>>2] = $12;
 $15 = (_newcell(41)|0);
 $16 = $temp;
 $17 = (($16) + 4|0);
 HEAP32[$17>>2] = $15;
 $temp = $15;
 $18 = (_newcell(3)|0);
 $19 = $temp;
 HEAP32[$19>>2] = $18;
 $20 = $dt;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $temp;
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$24>>2] = $22;
 $25 = (_newcell(41)|0);
 $26 = $temp;
 $27 = (($26) + 4|0);
 HEAP32[$27>>2] = $25;
 $temp = $25;
 $28 = (_newcell(3)|0);
 $29 = $temp;
 HEAP32[$29>>2] = $28;
 $30 = $dt;
 $31 = (($30) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $temp;
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$34>>2] = $32;
 $35 = (_newcell(41)|0);
 $36 = $temp;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = $35;
 $temp = $35;
 $38 = (_newcell(3)|0);
 $39 = $temp;
 HEAP32[$39>>2] = $38;
 $40 = $dt;
 $41 = (($40) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $temp;
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$44>>2] = $42;
 $45 = (_newcell(41)|0);
 $46 = $temp;
 $47 = (($46) + 4|0);
 HEAP32[$47>>2] = $45;
 $temp = $45;
 $48 = (_newcell(3)|0);
 $49 = $temp;
 HEAP32[$49>>2] = $48;
 $50 = $dt;
 $51 = (($50) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $temp;
 $54 = HEAP32[$53>>2]|0;
 HEAP32[$54>>2] = $52;
 $55 = (_newcell(41)|0);
 $56 = $temp;
 $57 = (($56) + 4|0);
 HEAP32[$57>>2] = $55;
 $temp = $55;
 $58 = (_newcell(3)|0);
 $59 = $temp;
 HEAP32[$59>>2] = $58;
 $60 = $dt;
 $61 = (($60) + 20|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + 1900)|0;
 $64 = $temp;
 $65 = HEAP32[$64>>2]|0;
 HEAP32[$65>>2] = $63;
 $66 = HEAP32[2968>>2]|0;
 $67 = $temp;
 $68 = (($67) + 4|0);
 HEAP32[$68>>2] = $66;
 STACKTOP = sp;return;
}
function _applyEMPTY() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)>(8);
 if ($8) {
  $9 = HEAP32[3152>>2]|0;
  $10 = (($9) - 1)|0;
  $11 = HEAP32[3144>>2]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 12|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)<(38);
  if ($17) {
   _eval();
  }
 }
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) - 1)|0;
 $20 = HEAP32[3144>>2]|0;
 $21 = (($20) + ($19<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 12|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = ($25|0)==(6);
 if ($26) {
  $27 = HEAP32[2944>>2]|0;
  $32 = $27;
 } else {
  $28 = HEAP32[2952>>2]|0;
  $32 = $28;
 }
 $29 = HEAP32[3152>>2]|0;
 $30 = HEAP32[3144>>2]|0;
 $31 = (($30) + ($29<<2)|0);
 HEAP32[$31>>2] = $32;
 $33 = HEAP32[3152>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[3152>>2] = $34;
 return;
}
function _applyHD() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $temp = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 1)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 12|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)>(8);
 if ($13) {
  $14 = HEAP32[3152>>2]|0;
  $15 = (($14) - 1)|0;
  $16 = HEAP32[3144>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 12|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ($21|0)<(38);
  if ($22) {
   _eval();
  }
 }
 $23 = $temp;
 $24 = (($23) + 12|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)!=(39);
 if ($27) {
  $28 = HEAP32[8112>>2]|0;
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  _runtimeerror(39,$30);
 }
 $31 = $temp;
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[3152>>2]|0;
 $34 = HEAP32[3144>>2]|0;
 $35 = (($34) + ($33<<2)|0);
 HEAP32[$35>>2] = $32;
 $36 = HEAP32[3152>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[3152>>2] = $37;
 $38 = HEAP32[3152>>2]|0;
 $39 = (($38) - 1)|0;
 $40 = HEAP32[3144>>2]|0;
 $41 = (($40) + ($39<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 12|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = ($45|0)>(8);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = HEAP32[3152>>2]|0;
 $48 = (($47) - 1)|0;
 $49 = HEAP32[3144>>2]|0;
 $50 = (($49) + ($48<<2)|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 12|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = ($54|0)<(38);
 if (!($55)) {
  STACKTOP = sp;return;
 }
 _eval();
 STACKTOP = sp;return;
}
function _applyTL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $temp = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 1)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 12|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)>(8);
 if ($13) {
  $14 = HEAP32[3152>>2]|0;
  $15 = (($14) - 1)|0;
  $16 = HEAP32[3144>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 12|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ($21|0)<(38);
  if ($22) {
   _eval();
  }
 }
 $23 = $temp;
 $24 = (($23) + 12|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)!=(39);
 if ($27) {
  $28 = HEAP32[8120>>2]|0;
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  _runtimeerror(39,$30);
 }
 $31 = $temp;
 $32 = (($31) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[3152>>2]|0;
 $35 = HEAP32[3144>>2]|0;
 $36 = (($35) + ($34<<2)|0);
 HEAP32[$36>>2] = $33;
 $37 = HEAP32[3152>>2]|0;
 $38 = (($37) + 1)|0;
 HEAP32[3152>>2] = $38;
 $39 = HEAP32[3152>>2]|0;
 $40 = (($39) - 1)|0;
 $41 = HEAP32[3144>>2]|0;
 $42 = (($41) + ($40<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 12|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = ($46|0)>(8);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 $48 = HEAP32[3152>>2]|0;
 $49 = (($48) - 1)|0;
 $50 = HEAP32[3144>>2]|0;
 $51 = (($50) + ($49<<2)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 12|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = ($55|0)<(38);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 _eval();
 STACKTOP = sp;return;
}
function _applyFST() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $temp = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 1)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 12|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)>(8);
 if ($13) {
  $14 = HEAP32[3152>>2]|0;
  $15 = (($14) - 1)|0;
  $16 = HEAP32[3144>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 12|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ($21|0)<(38);
  if ($22) {
   _eval();
  }
 }
 $23 = $temp;
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[3152>>2]|0;
 $26 = HEAP32[3144>>2]|0;
 $27 = (($26) + ($25<<2)|0);
 HEAP32[$27>>2] = $24;
 $28 = HEAP32[3152>>2]|0;
 $29 = (($28) + 1)|0;
 HEAP32[3152>>2] = $29;
 $30 = HEAP32[3152>>2]|0;
 $31 = (($30) - 1)|0;
 $32 = HEAP32[3144>>2]|0;
 $33 = (($32) + ($31<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + 12|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = ($37|0)>(8);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = HEAP32[3152>>2]|0;
 $40 = (($39) - 1)|0;
 $41 = HEAP32[3144>>2]|0;
 $42 = (($41) + ($40<<2)|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 12|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = ($46|0)<(38);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 _eval();
 STACKTOP = sp;return;
}
function _applySND() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $temp = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 1)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 12|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)>(8);
 if ($13) {
  $14 = HEAP32[3152>>2]|0;
  $15 = (($14) - 1)|0;
  $16 = HEAP32[3144>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 12|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ($21|0)<(38);
  if ($22) {
   _eval();
  }
 }
 $23 = $temp;
 $24 = (($23) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[3152>>2]|0;
 $28 = HEAP32[3144>>2]|0;
 $29 = (($28) + ($27<<2)|0);
 HEAP32[$29>>2] = $26;
 $30 = HEAP32[3152>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[3152>>2] = $31;
 $32 = HEAP32[3152>>2]|0;
 $33 = (($32) - 1)|0;
 $34 = HEAP32[3144>>2]|0;
 $35 = (($34) + ($33<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 12|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = ($39|0)>(8);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $41 = HEAP32[3152>>2]|0;
 $42 = (($41) - 1)|0;
 $43 = HEAP32[3144>>2]|0;
 $44 = (($43) + ($42<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + 12|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = ($48|0)<(38);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 _eval();
 STACKTOP = sp;return;
}
function _applyAND() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $l = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 $5 = $l;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(8);
 if ($9) {
  $10 = $l;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)<(38);
  if ($14) {
   $15 = $l;
   $16 = HEAP32[3152>>2]|0;
   $17 = HEAP32[3144>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $15;
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[3152>>2] = $20;
   _eval();
   $21 = HEAP32[3152>>2]|0;
   $22 = (($21) - 1)|0;
   HEAP32[3152>>2] = $22;
  }
 }
 while(1) {
  $23 = $l;
  $24 = (($23) + 12|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = ($26|0)==(39);
  if (!($27)) {
   label = 15;
   break;
  }
  $28 = $l;
  $29 = HEAP32[$28>>2]|0;
  $temp = $29;
  $30 = $temp;
  $31 = (($30) + 12|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($33|0)>(8);
  if ($34) {
   $35 = $temp;
   $36 = (($35) + 12|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)<(38);
   if ($39) {
    $40 = $temp;
    $41 = HEAP32[3152>>2]|0;
    $42 = HEAP32[3144>>2]|0;
    $43 = (($42) + ($41<<2)|0);
    HEAP32[$43>>2] = $40;
    $44 = HEAP32[3152>>2]|0;
    $45 = (($44) + 1)|0;
    HEAP32[3152>>2] = $45;
    _eval();
    $46 = HEAP32[3152>>2]|0;
    $47 = (($46) - 1)|0;
    HEAP32[3152>>2] = $47;
   }
  }
  $48 = $temp;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   label = 10;
   break;
  }
  $58 = $l;
  $59 = (($58) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $l = $60;
  $61 = HEAP32[3152>>2]|0;
  $62 = (($61) - 1)|0;
  $63 = HEAP32[3144>>2]|0;
  $64 = (($63) + ($62<<2)|0);
  HEAP32[$64>>2] = $60;
  $65 = $l;
  $66 = (($65) + 12|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = ($68|0)>(8);
  if ($69) {
   $70 = $l;
   $71 = (($70) + 12|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = ($73|0)<(38);
   if ($74) {
    $75 = $l;
    $76 = HEAP32[3152>>2]|0;
    $77 = HEAP32[3144>>2]|0;
    $78 = (($77) + ($76<<2)|0);
    HEAP32[$78>>2] = $75;
    $79 = HEAP32[3152>>2]|0;
    $80 = (($79) + 1)|0;
    HEAP32[3152>>2] = $80;
    _eval();
    $81 = HEAP32[3152>>2]|0;
    $82 = (($81) - 1)|0;
    HEAP32[3152>>2] = $82;
   }
  }
 }
 if ((label|0) == 10) {
  $52 = HEAP32[2952>>2]|0;
  $53 = HEAP32[3152>>2]|0;
  $54 = HEAP32[3144>>2]|0;
  $55 = (($54) + ($53<<2)|0);
  HEAP32[$55>>2] = $52;
  $56 = HEAP32[3152>>2]|0;
  $57 = (($56) + 1)|0;
  HEAP32[3152>>2] = $57;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 15) {
  $83 = HEAP32[2944>>2]|0;
  $84 = HEAP32[3152>>2]|0;
  $85 = HEAP32[3144>>2]|0;
  $86 = (($85) + ($84<<2)|0);
  HEAP32[$86>>2] = $83;
  $87 = HEAP32[3152>>2]|0;
  $88 = (($87) + 1)|0;
  HEAP32[3152>>2] = $88;
  STACKTOP = sp;return;
 }
}
function _applyDROP() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $count = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[8144>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_evalint($4,$7)|0);
 $count = $8;
 $9 = HEAP32[3152>>2]|0;
 $10 = (($9) - 2)|0;
 $11 = HEAP32[3144>>2]|0;
 $12 = (($11) + ($10<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $l = $13;
 $14 = $l;
 $15 = (($14) + 12|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)>(8);
 if ($18) {
  $19 = $l;
  $20 = (($19) + 12|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)<(38);
  if ($23) {
   $24 = $l;
   $25 = HEAP32[3152>>2]|0;
   $26 = HEAP32[3144>>2]|0;
   $27 = (($26) + ($25<<2)|0);
   HEAP32[$27>>2] = $24;
   $28 = HEAP32[3152>>2]|0;
   $29 = (($28) + 1)|0;
   HEAP32[3152>>2] = $29;
   _eval();
   $30 = HEAP32[3152>>2]|0;
   $31 = (($30) - 1)|0;
   HEAP32[3152>>2] = $31;
  }
 }
 while(1) {
  $32 = $count;
  $33 = (($32) + -1)|0;
  $count = $33;
  $34 = ($32|0)>(0);
  if ($34) {
   $35 = $l;
   $36 = (($35) + 12|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==(39);
   $71 = $39;
  } else {
   $71 = 0;
  }
  if (!($71)) {
   break;
  }
  $40 = $l;
  $41 = (($40) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $l = $42;
  $43 = HEAP32[3152>>2]|0;
  $44 = (($43) - 2)|0;
  $45 = HEAP32[3144>>2]|0;
  $46 = (($45) + ($44<<2)|0);
  HEAP32[$46>>2] = $42;
  $47 = $l;
  $48 = (($47) + 12|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = ($50|0)>(8);
  if ($51) {
   $52 = $l;
   $53 = (($52) + 12|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = ($55|0)<(38);
   if ($56) {
    $57 = $l;
    $58 = HEAP32[3152>>2]|0;
    $59 = HEAP32[3144>>2]|0;
    $60 = (($59) + ($58<<2)|0);
    HEAP32[$60>>2] = $57;
    $61 = HEAP32[3152>>2]|0;
    $62 = (($61) + 1)|0;
    HEAP32[3152>>2] = $62;
    _eval();
    $63 = HEAP32[3152>>2]|0;
    $64 = (($63) - 1)|0;
    HEAP32[3152>>2] = $64;
   }
  }
 }
 $65 = $l;
 $66 = HEAP32[3152>>2]|0;
 $67 = HEAP32[3144>>2]|0;
 $68 = (($67) + ($66<<2)|0);
 HEAP32[$68>>2] = $65;
 $69 = HEAP32[3152>>2]|0;
 $70 = (($69) + 1)|0;
 HEAP32[3152>>2] = $70;
 STACKTOP = sp;return;
}
function _applyDROPWHILE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $fun = 0, $l = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $fun = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l = $9;
 $10 = $l;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>(8);
 if ($14) {
  $15 = $l;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)<(38);
  if ($19) {
   $20 = $l;
   $21 = HEAP32[3152>>2]|0;
   $22 = HEAP32[3144>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[3152>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[3152>>2] = $25;
   _eval();
   $26 = HEAP32[3152>>2]|0;
   $27 = (($26) - 1)|0;
   HEAP32[3152>>2] = $27;
  }
 }
 while(1) {
  $28 = $l;
  $29 = (($28) + 12|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)==(39);
  if (!($32)) {
   label = 12;
   break;
  }
  $33 = (_newcell(22)|0);
  $temp = $33;
  $34 = HEAP32[3152>>2]|0;
  $35 = HEAP32[3144>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  HEAP32[$36>>2] = $33;
  $37 = HEAP32[3152>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[3152>>2] = $38;
  $39 = $fun;
  $40 = $temp;
  HEAP32[$40>>2] = $39;
  $41 = $l;
  $42 = HEAP32[$41>>2]|0;
  $43 = $temp;
  $44 = (($43) + 4|0);
  HEAP32[$44>>2] = $42;
  _eval();
  $45 = HEAP32[3152>>2]|0;
  $46 = (($45) + -1)|0;
  HEAP32[3152>>2] = $46;
  $47 = HEAP32[3144>>2]|0;
  $48 = (($47) + ($46<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)!=(0);
  if (!($52)) {
   break;
  }
  $53 = $l;
  $54 = (($53) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $l = $55;
  $56 = HEAP32[3152>>2]|0;
  $57 = (($56) - 2)|0;
  $58 = HEAP32[3144>>2]|0;
  $59 = (($58) + ($57<<2)|0);
  HEAP32[$59>>2] = $55;
  $60 = $l;
  $61 = (($60) + 12|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = ($63|0)>(8);
  if ($64) {
   $65 = $l;
   $66 = (($65) + 12|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = ($68|0)<(38);
   if ($69) {
    $70 = $l;
    $71 = HEAP32[3152>>2]|0;
    $72 = HEAP32[3144>>2]|0;
    $73 = (($72) + ($71<<2)|0);
    HEAP32[$73>>2] = $70;
    $74 = HEAP32[3152>>2]|0;
    $75 = (($74) + 1)|0;
    HEAP32[3152>>2] = $75;
    _eval();
    $76 = HEAP32[3152>>2]|0;
    $77 = (($76) - 1)|0;
    HEAP32[3152>>2] = $77;
   }
  }
 }
 if ((label|0) == 12) {
  $78 = $l;
  $79 = HEAP32[3152>>2]|0;
  $80 = HEAP32[3144>>2]|0;
  $81 = (($80) + ($79<<2)|0);
  HEAP32[$81>>2] = $78;
  $82 = HEAP32[3152>>2]|0;
  $83 = (($82) + 1)|0;
  HEAP32[3152>>2] = $83;
  STACKTOP = sp;return;
 }
 $78 = $l;
 $79 = HEAP32[3152>>2]|0;
 $80 = HEAP32[3144>>2]|0;
 $81 = (($80) + ($79<<2)|0);
 HEAP32[$81>>2] = $78;
 $82 = HEAP32[3152>>2]|0;
 $83 = (($82) + 1)|0;
 HEAP32[3152>>2] = $83;
 STACKTOP = sp;return;
}
function _applyMEMBER() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $l = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $x = $9;
 $10 = $l;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>(8);
 if ($14) {
  $15 = $l;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)<(38);
  if ($19) {
   $20 = $l;
   $21 = HEAP32[3152>>2]|0;
   $22 = HEAP32[3144>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[3152>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[3152>>2] = $25;
   _eval();
   $26 = HEAP32[3152>>2]|0;
   $27 = (($26) - 1)|0;
   HEAP32[3152>>2] = $27;
  }
 }
 while(1) {
  $28 = $l;
  $29 = (($28) + 12|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)==(39);
  if (!($32)) {
   label = 12;
   break;
  }
  $33 = $l;
  $34 = HEAP32[$33>>2]|0;
  $35 = $x;
  $36 = (_comparecell($34,$35)|0);
  $37 = ($36|0)==(0);
  if ($37) {
   label = 7;
   break;
  }
  $44 = $l;
  $45 = (($44) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $l = $46;
  $47 = HEAP32[3152>>2]|0;
  $48 = (($47) - 1)|0;
  $49 = HEAP32[3144>>2]|0;
  $50 = (($49) + ($48<<2)|0);
  HEAP32[$50>>2] = $46;
  $51 = $l;
  $52 = (($51) + 12|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)>(8);
  if ($55) {
   $56 = $l;
   $57 = (($56) + 12|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59|0)<(38);
   if ($60) {
    $61 = $l;
    $62 = HEAP32[3152>>2]|0;
    $63 = HEAP32[3144>>2]|0;
    $64 = (($63) + ($62<<2)|0);
    HEAP32[$64>>2] = $61;
    $65 = HEAP32[3152>>2]|0;
    $66 = (($65) + 1)|0;
    HEAP32[3152>>2] = $66;
    _eval();
    $67 = HEAP32[3152>>2]|0;
    $68 = (($67) - 1)|0;
    HEAP32[3152>>2] = $68;
   }
  }
 }
 if ((label|0) == 7) {
  $38 = HEAP32[2944>>2]|0;
  $39 = HEAP32[3152>>2]|0;
  $40 = HEAP32[3144>>2]|0;
  $41 = (($40) + ($39<<2)|0);
  HEAP32[$41>>2] = $38;
  $42 = HEAP32[3152>>2]|0;
  $43 = (($42) + 1)|0;
  HEAP32[3152>>2] = $43;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $69 = HEAP32[2952>>2]|0;
  $70 = HEAP32[3152>>2]|0;
  $71 = HEAP32[3144>>2]|0;
  $72 = (($71) + ($70<<2)|0);
  HEAP32[$72>>2] = $69;
  $73 = HEAP32[3152>>2]|0;
  $74 = (($73) + 1)|0;
  HEAP32[3152>>2] = $74;
  STACKTOP = sp;return;
 }
}
function _applyMIN() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $l = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 $5 = $l;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(8);
 if ($9) {
  $10 = $l;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)<(38);
  if ($14) {
   $15 = $l;
   $16 = HEAP32[3152>>2]|0;
   $17 = HEAP32[3144>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $15;
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[3152>>2] = $20;
   _eval();
   $21 = HEAP32[3152>>2]|0;
   $22 = (($21) - 1)|0;
   HEAP32[3152>>2] = $22;
  }
 }
 $23 = $l;
 $24 = (($23) + 12|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)!=(39);
 if ($27) {
  $28 = HEAP32[8128>>2]|0;
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  _runtimeerror(39,$30);
 }
 $31 = $l;
 $32 = HEAP32[$31>>2]|0;
 $res = $32;
 $33 = HEAP32[3152>>2]|0;
 $34 = HEAP32[3144>>2]|0;
 $35 = (($34) + ($33<<2)|0);
 HEAP32[$35>>2] = $32;
 $36 = HEAP32[3152>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[3152>>2] = $37;
 $38 = $l;
 $39 = (($38) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $l = $40;
 $41 = HEAP32[3152>>2]|0;
 $42 = (($41) - 2)|0;
 $43 = HEAP32[3144>>2]|0;
 $44 = (($43) + ($42<<2)|0);
 HEAP32[$44>>2] = $40;
 $45 = $l;
 $46 = (($45) + 12|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = ($48|0)>(8);
 if ($49) {
  $50 = $l;
  $51 = (($50) + 12|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = ($53|0)<(38);
  if ($54) {
   $55 = $l;
   $56 = HEAP32[3152>>2]|0;
   $57 = HEAP32[3144>>2]|0;
   $58 = (($57) + ($56<<2)|0);
   HEAP32[$58>>2] = $55;
   $59 = HEAP32[3152>>2]|0;
   $60 = (($59) + 1)|0;
   HEAP32[3152>>2] = $60;
   _eval();
   $61 = HEAP32[3152>>2]|0;
   $62 = (($61) - 1)|0;
   HEAP32[3152>>2] = $62;
  }
 }
 while(1) {
  $63 = $l;
  $64 = (($63) + 12|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = ($66|0)==(39);
  if (!($67)) {
   break;
  }
  $68 = $l;
  $69 = HEAP32[$68>>2]|0;
  $70 = $res;
  $71 = (_comparecell($69,$70)|0);
  $72 = ($71|0)<(0);
  if ($72) {
   $73 = $l;
   $74 = HEAP32[$73>>2]|0;
   $res = $74;
   $75 = HEAP32[3152>>2]|0;
   $76 = (($75) - 1)|0;
   $77 = HEAP32[3144>>2]|0;
   $78 = (($77) + ($76<<2)|0);
   HEAP32[$78>>2] = $74;
  }
  $79 = $l;
  $80 = (($79) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $l = $81;
  $82 = HEAP32[3152>>2]|0;
  $83 = (($82) - 2)|0;
  $84 = HEAP32[3144>>2]|0;
  $85 = (($84) + ($83<<2)|0);
  HEAP32[$85>>2] = $81;
  $86 = $l;
  $87 = (($86) + 12|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = ($89|0)>(8);
  if ($90) {
   $91 = $l;
   $92 = (($91) + 12|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = ($94|0)<(38);
   if ($95) {
    $96 = $l;
    $97 = HEAP32[3152>>2]|0;
    $98 = HEAP32[3144>>2]|0;
    $99 = (($98) + ($97<<2)|0);
    HEAP32[$99>>2] = $96;
    $100 = HEAP32[3152>>2]|0;
    $101 = (($100) + 1)|0;
    HEAP32[3152>>2] = $101;
    _eval();
    $102 = HEAP32[3152>>2]|0;
    $103 = (($102) - 1)|0;
    HEAP32[3152>>2] = $103;
   }
  }
 }
 _eval();
 STACKTOP = sp;return;
}
function _applyMAX() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $l = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 $5 = $l;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(8);
 if ($9) {
  $10 = $l;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)<(38);
  if ($14) {
   $15 = $l;
   $16 = HEAP32[3152>>2]|0;
   $17 = HEAP32[3144>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $15;
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[3152>>2] = $20;
   _eval();
   $21 = HEAP32[3152>>2]|0;
   $22 = (($21) - 1)|0;
   HEAP32[3152>>2] = $22;
  }
 }
 $23 = $l;
 $24 = (($23) + 12|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)!=(39);
 if ($27) {
  $28 = HEAP32[8136>>2]|0;
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  _runtimeerror(39,$30);
 }
 $31 = $l;
 $32 = HEAP32[$31>>2]|0;
 $res = $32;
 $33 = HEAP32[3152>>2]|0;
 $34 = HEAP32[3144>>2]|0;
 $35 = (($34) + ($33<<2)|0);
 HEAP32[$35>>2] = $32;
 $36 = HEAP32[3152>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[3152>>2] = $37;
 $38 = $l;
 $39 = (($38) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $l = $40;
 $41 = HEAP32[3152>>2]|0;
 $42 = (($41) - 2)|0;
 $43 = HEAP32[3144>>2]|0;
 $44 = (($43) + ($42<<2)|0);
 HEAP32[$44>>2] = $40;
 $45 = $l;
 $46 = (($45) + 12|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = ($48|0)>(8);
 if ($49) {
  $50 = $l;
  $51 = (($50) + 12|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = ($53|0)<(38);
  if ($54) {
   $55 = $l;
   $56 = HEAP32[3152>>2]|0;
   $57 = HEAP32[3144>>2]|0;
   $58 = (($57) + ($56<<2)|0);
   HEAP32[$58>>2] = $55;
   $59 = HEAP32[3152>>2]|0;
   $60 = (($59) + 1)|0;
   HEAP32[3152>>2] = $60;
   _eval();
   $61 = HEAP32[3152>>2]|0;
   $62 = (($61) - 1)|0;
   HEAP32[3152>>2] = $62;
  }
 }
 while(1) {
  $63 = $l;
  $64 = (($63) + 12|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = ($66|0)==(39);
  if (!($67)) {
   break;
  }
  $68 = $l;
  $69 = HEAP32[$68>>2]|0;
  $70 = $res;
  $71 = (_comparecell($69,$70)|0);
  $72 = ($71|0)>(0);
  if ($72) {
   $73 = $l;
   $74 = HEAP32[$73>>2]|0;
   $res = $74;
   $75 = HEAP32[3152>>2]|0;
   $76 = (($75) - 1)|0;
   $77 = HEAP32[3144>>2]|0;
   $78 = (($77) + ($76<<2)|0);
   HEAP32[$78>>2] = $74;
  }
  $79 = $l;
  $80 = (($79) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $l = $81;
  $82 = HEAP32[3152>>2]|0;
  $83 = (($82) - 2)|0;
  $84 = HEAP32[3144>>2]|0;
  $85 = (($84) + ($83<<2)|0);
  HEAP32[$85>>2] = $81;
  $86 = $l;
  $87 = (($86) + 12|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = ($89|0)>(8);
  if ($90) {
   $91 = $l;
   $92 = (($91) + 12|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = ($94|0)<(38);
   if ($95) {
    $96 = $l;
    $97 = HEAP32[3152>>2]|0;
    $98 = HEAP32[3144>>2]|0;
    $99 = (($98) + ($97<<2)|0);
    HEAP32[$99>>2] = $96;
    $100 = HEAP32[3152>>2]|0;
    $101 = (($100) + 1)|0;
    HEAP32[3152>>2] = $101;
    _eval();
    $102 = HEAP32[3152>>2]|0;
    $103 = (($102) - 1)|0;
    HEAP32[3152>>2] = $103;
   }
  }
 }
 _eval();
 STACKTOP = sp;return;
}
function _applyOR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $l = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 $5 = $l;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(8);
 if ($9) {
  $10 = $l;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)<(38);
  if ($14) {
   $15 = $l;
   $16 = HEAP32[3152>>2]|0;
   $17 = HEAP32[3144>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $15;
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[3152>>2] = $20;
   _eval();
   $21 = HEAP32[3152>>2]|0;
   $22 = (($21) - 1)|0;
   HEAP32[3152>>2] = $22;
  }
 }
 while(1) {
  $23 = $l;
  $24 = (($23) + 12|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = ($26|0)==(39);
  if (!($27)) {
   label = 15;
   break;
  }
  $28 = $l;
  $29 = HEAP32[$28>>2]|0;
  $temp = $29;
  $30 = $temp;
  $31 = (($30) + 12|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($33|0)>(8);
  if ($34) {
   $35 = $temp;
   $36 = (($35) + 12|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)<(38);
   if ($39) {
    $40 = $temp;
    $41 = HEAP32[3152>>2]|0;
    $42 = HEAP32[3144>>2]|0;
    $43 = (($42) + ($41<<2)|0);
    HEAP32[$43>>2] = $40;
    $44 = HEAP32[3152>>2]|0;
    $45 = (($44) + 1)|0;
    HEAP32[3152>>2] = $45;
    _eval();
    $46 = HEAP32[3152>>2]|0;
    $47 = (($46) - 1)|0;
    HEAP32[3152>>2] = $47;
   }
  }
  $48 = $temp;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0);
  if ($51) {
   label = 10;
   break;
  }
  $58 = $l;
  $59 = (($58) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $l = $60;
  $61 = HEAP32[3152>>2]|0;
  $62 = (($61) - 1)|0;
  $63 = HEAP32[3144>>2]|0;
  $64 = (($63) + ($62<<2)|0);
  HEAP32[$64>>2] = $60;
  $65 = $l;
  $66 = (($65) + 12|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = ($68|0)>(8);
  if ($69) {
   $70 = $l;
   $71 = (($70) + 12|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = ($73|0)<(38);
   if ($74) {
    $75 = $l;
    $76 = HEAP32[3152>>2]|0;
    $77 = HEAP32[3144>>2]|0;
    $78 = (($77) + ($76<<2)|0);
    HEAP32[$78>>2] = $75;
    $79 = HEAP32[3152>>2]|0;
    $80 = (($79) + 1)|0;
    HEAP32[3152>>2] = $80;
    _eval();
    $81 = HEAP32[3152>>2]|0;
    $82 = (($81) - 1)|0;
    HEAP32[3152>>2] = $82;
   }
  }
 }
 if ((label|0) == 10) {
  $52 = HEAP32[2944>>2]|0;
  $53 = HEAP32[3152>>2]|0;
  $54 = HEAP32[3144>>2]|0;
  $55 = (($54) + ($53<<2)|0);
  HEAP32[$55>>2] = $52;
  $56 = HEAP32[3152>>2]|0;
  $57 = (($56) + 1)|0;
  HEAP32[3152>>2] = $57;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 15) {
  $83 = HEAP32[2952>>2]|0;
  $84 = HEAP32[3152>>2]|0;
  $85 = HEAP32[3144>>2]|0;
  $86 = (($85) + ($84<<2)|0);
  HEAP32[$86>>2] = $83;
  $87 = HEAP32[3152>>2]|0;
  $88 = (($87) + 1)|0;
  HEAP32[3152>>2] = $88;
  STACKTOP = sp;return;
 }
}
function _applyPROD() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $l = 0, $temp = 0, $val_int = 0;
 var $val_real = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val_int = 1;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 while(1) {
  $5 = $l;
  $6 = (($5) + 12|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)>(8);
  if ($9) {
   $10 = $l;
   $11 = (($10) + 12|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = ($13|0)<(38);
   if ($14) {
    $15 = $l;
    $16 = HEAP32[3152>>2]|0;
    $17 = HEAP32[3144>>2]|0;
    $18 = (($17) + ($16<<2)|0);
    HEAP32[$18>>2] = $15;
    $19 = HEAP32[3152>>2]|0;
    $20 = (($19) + 1)|0;
    HEAP32[3152>>2] = $20;
    _eval();
    $21 = HEAP32[3152>>2]|0;
    $22 = (($21) - 1)|0;
    HEAP32[3152>>2] = $22;
   }
  }
  $23 = $l;
  $24 = (($23) + 12|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = ($26|0)!=(39);
  if ($27) {
   label = 6;
   break;
  }
  $40 = $l;
  $41 = HEAP32[$40>>2]|0;
  $temp = $41;
  $42 = $temp;
  $43 = (($42) + 12|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = ($45|0)>(8);
  if ($46) {
   $47 = $temp;
   $48 = (($47) + 12|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = ($50|0)<(38);
   if ($51) {
    $52 = $temp;
    $53 = HEAP32[3152>>2]|0;
    $54 = HEAP32[3144>>2]|0;
    $55 = (($54) + ($53<<2)|0);
    HEAP32[$55>>2] = $52;
    $56 = HEAP32[3152>>2]|0;
    $57 = (($56) + 1)|0;
    HEAP32[3152>>2] = $57;
    _eval();
    $58 = HEAP32[3152>>2]|0;
    $59 = (($58) - 1)|0;
    HEAP32[3152>>2] = $59;
   }
  }
  $60 = $l;
  $61 = (($60) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $l = $62;
  $63 = HEAP32[3152>>2]|0;
  $64 = (($63) - 1)|0;
  $65 = HEAP32[3144>>2]|0;
  $66 = (($65) + ($64<<2)|0);
  HEAP32[$66>>2] = $62;
  $67 = $temp;
  $68 = (($67) + 12|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = ($70|0)==(3);
  if (!($71)) {
   break;
  }
  $72 = $temp;
  $73 = HEAP32[$72>>2]|0;
  $74 = $val_int;
  $75 = Math_imul($74, $73)|0;
  $val_int = $75;
 }
 if ((label|0) == 6) {
  $28 = (_newcell(3)|0);
  $29 = HEAP32[3152>>2]|0;
  $30 = HEAP32[3144>>2]|0;
  $31 = (($30) + ($29<<2)|0);
  HEAP32[$31>>2] = $28;
  $32 = HEAP32[3152>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[3152>>2] = $33;
  $34 = $val_int;
  $35 = HEAP32[3152>>2]|0;
  $36 = (($35) - 1)|0;
  $37 = HEAP32[3144>>2]|0;
  $38 = (($37) + ($36<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$39>>2] = $34;
  STACKTOP = sp;return;
 }
 $76 = $val_int;
 $77 = (+($76|0));
 $78 = $temp;
 $79 = +HEAPF64[$78>>3];
 $80 = $77 * $79;
 $val_real = $80;
 while(1) {
  $81 = $l;
  $82 = (($81) + 12|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = ($84|0)>(8);
  if ($85) {
   $86 = $l;
   $87 = (($86) + 12|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = ($89|0)<(38);
   if ($90) {
    $91 = $l;
    $92 = HEAP32[3152>>2]|0;
    $93 = HEAP32[3144>>2]|0;
    $94 = (($93) + ($92<<2)|0);
    HEAP32[$94>>2] = $91;
    $95 = HEAP32[3152>>2]|0;
    $96 = (($95) + 1)|0;
    HEAP32[3152>>2] = $96;
    _eval();
    $97 = HEAP32[3152>>2]|0;
    $98 = (($97) - 1)|0;
    HEAP32[3152>>2] = $98;
   }
  }
  $99 = $l;
  $100 = (($99) + 12|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = ($102|0)!=(39);
  if ($103) {
   break;
  }
  $116 = $l;
  $117 = HEAP32[$116>>2]|0;
  $temp = $117;
  $118 = $temp;
  $119 = (($118) + 12|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $120&255;
  $122 = ($121|0)>(8);
  if ($122) {
   $123 = $temp;
   $124 = (($123) + 12|0);
   $125 = HEAP8[$124>>0]|0;
   $126 = $125&255;
   $127 = ($126|0)<(38);
   if ($127) {
    $128 = $temp;
    $129 = HEAP32[3152>>2]|0;
    $130 = HEAP32[3144>>2]|0;
    $131 = (($130) + ($129<<2)|0);
    HEAP32[$131>>2] = $128;
    $132 = HEAP32[3152>>2]|0;
    $133 = (($132) + 1)|0;
    HEAP32[3152>>2] = $133;
    _eval();
    $134 = HEAP32[3152>>2]|0;
    $135 = (($134) - 1)|0;
    HEAP32[3152>>2] = $135;
   }
  }
  $136 = $l;
  $137 = (($136) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  $l = $138;
  $139 = HEAP32[3152>>2]|0;
  $140 = (($139) - 1)|0;
  $141 = HEAP32[3144>>2]|0;
  $142 = (($141) + ($140<<2)|0);
  HEAP32[$142>>2] = $138;
  $143 = $temp;
  $144 = (($143) + 12|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = $145&255;
  $147 = ($146|0)==(3);
  if ($147) {
   $148 = $temp;
   $149 = HEAP32[$148>>2]|0;
   $150 = (+($149|0));
   $151 = $val_real;
   $152 = $151 * $150;
   $val_real = $152;
  } else {
   $153 = $temp;
   $154 = +HEAPF64[$153>>3];
   $155 = $val_real;
   $156 = $155 * $154;
   $val_real = $156;
  }
 }
 $104 = (_newcell(4)|0);
 $105 = HEAP32[3152>>2]|0;
 $106 = HEAP32[3144>>2]|0;
 $107 = (($106) + ($105<<2)|0);
 HEAP32[$107>>2] = $104;
 $108 = HEAP32[3152>>2]|0;
 $109 = (($108) + 1)|0;
 HEAP32[3152>>2] = $109;
 $110 = $val_real;
 $111 = HEAP32[3152>>2]|0;
 $112 = (($111) - 1)|0;
 $113 = HEAP32[3144>>2]|0;
 $114 = (($113) + ($112<<2)|0);
 $115 = HEAP32[$114>>2]|0;
 HEAPF64[$115>>3] = $110;
 STACKTOP = sp;return;
}
function _applyREVERSE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $l = 0, $rev = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 $5 = HEAP32[2576>>2]|0;
 $rev = $5;
 $6 = HEAP32[3152>>2]|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 HEAP32[$8>>2] = $5;
 $9 = HEAP32[3152>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[3152>>2] = $10;
 $11 = $l;
 $12 = (($11) + 12|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)>(8);
 if ($15) {
  $16 = $l;
  $17 = (($16) + 12|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($19|0)<(38);
  if ($20) {
   $21 = $l;
   $22 = HEAP32[3152>>2]|0;
   $23 = HEAP32[3144>>2]|0;
   $24 = (($23) + ($22<<2)|0);
   HEAP32[$24>>2] = $21;
   $25 = HEAP32[3152>>2]|0;
   $26 = (($25) + 1)|0;
   HEAP32[3152>>2] = $26;
   _eval();
   $27 = HEAP32[3152>>2]|0;
   $28 = (($27) - 1)|0;
   HEAP32[3152>>2] = $28;
  }
 }
 while(1) {
  $29 = $l;
  $30 = (($29) + 12|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = ($32|0)==(39);
  if (!($33)) {
   break;
  }
  $34 = (_newcell(39)|0);
  $temp = $34;
  $35 = $l;
  $36 = HEAP32[$35>>2]|0;
  $37 = $temp;
  HEAP32[$37>>2] = $36;
  $38 = $rev;
  $39 = $temp;
  $40 = (($39) + 4|0);
  HEAP32[$40>>2] = $38;
  $41 = $temp;
  $rev = $41;
  $42 = HEAP32[3152>>2]|0;
  $43 = (($42) - 1)|0;
  $44 = HEAP32[3144>>2]|0;
  $45 = (($44) + ($43<<2)|0);
  HEAP32[$45>>2] = $41;
  $46 = $l;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $l = $48;
  $49 = HEAP32[3152>>2]|0;
  $50 = (($49) - 2)|0;
  $51 = HEAP32[3144>>2]|0;
  $52 = (($51) + ($50<<2)|0);
  HEAP32[$52>>2] = $48;
  $53 = $l;
  $54 = (($53) + 12|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = ($56|0)>(8);
  if ($57) {
   $58 = $l;
   $59 = (($58) + 12|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = ($61|0)<(38);
   if ($62) {
    $63 = $l;
    $64 = HEAP32[3152>>2]|0;
    $65 = HEAP32[3144>>2]|0;
    $66 = (($65) + ($64<<2)|0);
    HEAP32[$66>>2] = $63;
    $67 = HEAP32[3152>>2]|0;
    $68 = (($67) + 1)|0;
    HEAP32[3152>>2] = $68;
    _eval();
    $69 = HEAP32[3152>>2]|0;
    $70 = (($69) - 1)|0;
    HEAP32[3152>>2] = $70;
   }
  }
 }
 STACKTOP = sp;return;
}
function _applySEQ() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _eval();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 2)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[3152>>2]|0;
 $6 = HEAP32[3144>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 HEAP32[$7>>2] = $4;
 $8 = HEAP32[3152>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[3152>>2] = $9;
 _eval();
 return;
}
function _applySUM() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $l = 0, $temp = 0, $val_int = 0;
 var $val_real = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val_int = 0;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 while(1) {
  $5 = $l;
  $6 = (($5) + 12|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)>(8);
  if ($9) {
   $10 = $l;
   $11 = (($10) + 12|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = ($13|0)<(38);
   if ($14) {
    $15 = $l;
    $16 = HEAP32[3152>>2]|0;
    $17 = HEAP32[3144>>2]|0;
    $18 = (($17) + ($16<<2)|0);
    HEAP32[$18>>2] = $15;
    $19 = HEAP32[3152>>2]|0;
    $20 = (($19) + 1)|0;
    HEAP32[3152>>2] = $20;
    _eval();
    $21 = HEAP32[3152>>2]|0;
    $22 = (($21) - 1)|0;
    HEAP32[3152>>2] = $22;
   }
  }
  $23 = $l;
  $24 = (($23) + 12|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = ($26|0)!=(39);
  if ($27) {
   label = 6;
   break;
  }
  $40 = $l;
  $41 = HEAP32[$40>>2]|0;
  $temp = $41;
  $42 = $temp;
  $43 = (($42) + 12|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = ($45|0)>(8);
  if ($46) {
   $47 = $temp;
   $48 = (($47) + 12|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = ($50|0)<(38);
   if ($51) {
    $52 = $temp;
    $53 = HEAP32[3152>>2]|0;
    $54 = HEAP32[3144>>2]|0;
    $55 = (($54) + ($53<<2)|0);
    HEAP32[$55>>2] = $52;
    $56 = HEAP32[3152>>2]|0;
    $57 = (($56) + 1)|0;
    HEAP32[3152>>2] = $57;
    _eval();
    $58 = HEAP32[3152>>2]|0;
    $59 = (($58) - 1)|0;
    HEAP32[3152>>2] = $59;
   }
  }
  $60 = $l;
  $61 = (($60) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $l = $62;
  $63 = HEAP32[3152>>2]|0;
  $64 = (($63) - 1)|0;
  $65 = HEAP32[3144>>2]|0;
  $66 = (($65) + ($64<<2)|0);
  HEAP32[$66>>2] = $62;
  $67 = $temp;
  $68 = (($67) + 12|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = ($70|0)==(3);
  if (!($71)) {
   break;
  }
  $72 = $temp;
  $73 = HEAP32[$72>>2]|0;
  $74 = $val_int;
  $75 = (($74) + ($73))|0;
  $val_int = $75;
 }
 if ((label|0) == 6) {
  $28 = (_newcell(3)|0);
  $29 = HEAP32[3152>>2]|0;
  $30 = HEAP32[3144>>2]|0;
  $31 = (($30) + ($29<<2)|0);
  HEAP32[$31>>2] = $28;
  $32 = HEAP32[3152>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[3152>>2] = $33;
  $34 = $val_int;
  $35 = HEAP32[3152>>2]|0;
  $36 = (($35) - 1)|0;
  $37 = HEAP32[3144>>2]|0;
  $38 = (($37) + ($36<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$39>>2] = $34;
  STACKTOP = sp;return;
 }
 $76 = $val_int;
 $77 = (+($76|0));
 $78 = $temp;
 $79 = +HEAPF64[$78>>3];
 $80 = $77 + $79;
 $val_real = $80;
 while(1) {
  $81 = $l;
  $82 = (($81) + 12|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = ($84|0)>(8);
  if ($85) {
   $86 = $l;
   $87 = (($86) + 12|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = ($89|0)<(38);
   if ($90) {
    $91 = $l;
    $92 = HEAP32[3152>>2]|0;
    $93 = HEAP32[3144>>2]|0;
    $94 = (($93) + ($92<<2)|0);
    HEAP32[$94>>2] = $91;
    $95 = HEAP32[3152>>2]|0;
    $96 = (($95) + 1)|0;
    HEAP32[3152>>2] = $96;
    _eval();
    $97 = HEAP32[3152>>2]|0;
    $98 = (($97) - 1)|0;
    HEAP32[3152>>2] = $98;
   }
  }
  $99 = $l;
  $100 = (($99) + 12|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = ($102|0)!=(39);
  if ($103) {
   break;
  }
  $116 = $l;
  $117 = HEAP32[$116>>2]|0;
  $temp = $117;
  $118 = $temp;
  $119 = (($118) + 12|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $120&255;
  $122 = ($121|0)>(8);
  if ($122) {
   $123 = $temp;
   $124 = (($123) + 12|0);
   $125 = HEAP8[$124>>0]|0;
   $126 = $125&255;
   $127 = ($126|0)<(38);
   if ($127) {
    $128 = $temp;
    $129 = HEAP32[3152>>2]|0;
    $130 = HEAP32[3144>>2]|0;
    $131 = (($130) + ($129<<2)|0);
    HEAP32[$131>>2] = $128;
    $132 = HEAP32[3152>>2]|0;
    $133 = (($132) + 1)|0;
    HEAP32[3152>>2] = $133;
    _eval();
    $134 = HEAP32[3152>>2]|0;
    $135 = (($134) - 1)|0;
    HEAP32[3152>>2] = $135;
   }
  }
  $136 = $l;
  $137 = (($136) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  $l = $138;
  $139 = HEAP32[3152>>2]|0;
  $140 = (($139) - 1)|0;
  $141 = HEAP32[3144>>2]|0;
  $142 = (($141) + ($140<<2)|0);
  HEAP32[$142>>2] = $138;
  $143 = $temp;
  $144 = (($143) + 12|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = $145&255;
  $147 = ($146|0)==(3);
  if ($147) {
   $148 = $temp;
   $149 = HEAP32[$148>>2]|0;
   $150 = (+($149|0));
   $151 = $val_real;
   $152 = $151 + $150;
   $val_real = $152;
  } else {
   $153 = $temp;
   $154 = +HEAPF64[$153>>3];
   $155 = $val_real;
   $156 = $155 + $154;
   $val_real = $156;
  }
 }
 $104 = (_newcell(4)|0);
 $105 = HEAP32[3152>>2]|0;
 $106 = HEAP32[3144>>2]|0;
 $107 = (($106) + ($105<<2)|0);
 HEAP32[$107>>2] = $104;
 $108 = HEAP32[3152>>2]|0;
 $109 = (($108) + 1)|0;
 HEAP32[3152>>2] = $109;
 $110 = $val_real;
 $111 = HEAP32[3152>>2]|0;
 $112 = (($111) - 1)|0;
 $113 = HEAP32[3144>>2]|0;
 $114 = (($113) + ($112<<2)|0);
 $115 = HEAP32[$114>>2]|0;
 HEAPF64[$115>>3] = $110;
 STACKTOP = sp;return;
}
function _applyUNTIL() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $fun = 0, $temp = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $cond = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $fun = $9;
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) - 3)|0;
 $12 = HEAP32[3144>>2]|0;
 $13 = (($12) + ($11<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $x = $14;
 $15 = $x;
 $16 = (($15) + 12|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)>(8);
 if ($19) {
  $20 = $x;
  $21 = (($20) + 12|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)<(38);
  if ($24) {
   $25 = $x;
   $26 = HEAP32[3152>>2]|0;
   $27 = HEAP32[3144>>2]|0;
   $28 = (($27) + ($26<<2)|0);
   HEAP32[$28>>2] = $25;
   $29 = HEAP32[3152>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[3152>>2] = $30;
   _eval();
   $31 = HEAP32[3152>>2]|0;
   $32 = (($31) - 1)|0;
   HEAP32[3152>>2] = $32;
  }
 }
 while(1) {
  $33 = (_newcell(22)|0);
  $temp = $33;
  $34 = HEAP32[3152>>2]|0;
  $35 = HEAP32[3144>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  HEAP32[$36>>2] = $33;
  $37 = HEAP32[3152>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[3152>>2] = $38;
  $39 = $cond;
  $40 = $temp;
  HEAP32[$40>>2] = $39;
  $41 = $x;
  $42 = $temp;
  $43 = (($42) + 4|0);
  HEAP32[$43>>2] = $41;
  _eval();
  $44 = HEAP32[3152>>2]|0;
  $45 = (($44) + -1)|0;
  HEAP32[3152>>2] = $45;
  $46 = HEAP32[3144>>2]|0;
  $47 = (($46) + ($45<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0);
  if ($51) {
   break;
  }
  $58 = (_newcell(22)|0);
  $temp = $58;
  $59 = $fun;
  $60 = $temp;
  HEAP32[$60>>2] = $59;
  $61 = $x;
  $62 = $temp;
  $63 = (($62) + 4|0);
  HEAP32[$63>>2] = $61;
  $64 = $temp;
  $x = $64;
  $65 = HEAP32[3152>>2]|0;
  $66 = (($65) - 3)|0;
  $67 = HEAP32[3144>>2]|0;
  $68 = (($67) + ($66<<2)|0);
  HEAP32[$68>>2] = $64;
 }
 $52 = $x;
 $53 = HEAP32[3152>>2]|0;
 $54 = HEAP32[3144>>2]|0;
 $55 = (($54) + ($53<<2)|0);
 HEAP32[$55>>2] = $52;
 $56 = HEAP32[3152>>2]|0;
 $57 = (($56) + 1)|0;
 HEAP32[3152>>2] = $57;
 STACKTOP = sp;return;
}
function _applyFOLDL() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fun = 0, $list = 0, $res = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $fun = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $res = $9;
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) - 3)|0;
 $12 = HEAP32[3144>>2]|0;
 $13 = (($12) + ($11<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $list = $14;
 $15 = $res;
 $16 = (($15) + 12|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)>(8);
 if ($19) {
  $20 = $res;
  $21 = (($20) + 12|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)<(38);
  if ($24) {
   $25 = $res;
   $26 = HEAP32[3152>>2]|0;
   $27 = HEAP32[3144>>2]|0;
   $28 = (($27) + ($26<<2)|0);
   HEAP32[$28>>2] = $25;
   $29 = HEAP32[3152>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[3152>>2] = $30;
   _eval();
   $31 = HEAP32[3152>>2]|0;
   $32 = (($31) - 1)|0;
   HEAP32[3152>>2] = $32;
  }
 }
 $33 = $list;
 $34 = (($33) + 12|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = ($36|0)>(8);
 if ($37) {
  $38 = $list;
  $39 = (($38) + 12|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = ($41|0)<(38);
  if ($42) {
   $43 = $list;
   $44 = HEAP32[3152>>2]|0;
   $45 = HEAP32[3144>>2]|0;
   $46 = (($45) + ($44<<2)|0);
   HEAP32[$46>>2] = $43;
   $47 = HEAP32[3152>>2]|0;
   $48 = (($47) + 1)|0;
   HEAP32[3152>>2] = $48;
   _eval();
   $49 = HEAP32[3152>>2]|0;
   $50 = (($49) - 1)|0;
   HEAP32[3152>>2] = $50;
  }
 }
 while(1) {
  $51 = $list;
  $52 = (($51) + 12|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)==(39);
  if (!($55)) {
   break;
  }
  $56 = (_newcell(22)|0);
  $temp = $56;
  $57 = HEAP32[3152>>2]|0;
  $58 = HEAP32[3144>>2]|0;
  $59 = (($58) + ($57<<2)|0);
  HEAP32[$59>>2] = $56;
  $60 = HEAP32[3152>>2]|0;
  $61 = (($60) + 1)|0;
  HEAP32[3152>>2] = $61;
  $62 = $list;
  $63 = HEAP32[$62>>2]|0;
  $64 = $temp;
  $65 = (($64) + 4|0);
  HEAP32[$65>>2] = $63;
  $66 = (_newcell(22)|0);
  $67 = $temp;
  HEAP32[$67>>2] = $66;
  $temp = $66;
  $68 = $res;
  $69 = $temp;
  $70 = (($69) + 4|0);
  HEAP32[$70>>2] = $68;
  $71 = $fun;
  $72 = $temp;
  HEAP32[$72>>2] = $71;
  _eval();
  $73 = HEAP32[3152>>2]|0;
  $74 = (($73) + -1)|0;
  HEAP32[3152>>2] = $74;
  $75 = HEAP32[3144>>2]|0;
  $76 = (($75) + ($74<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $res = $77;
  $78 = $res;
  $79 = HEAP32[3152>>2]|0;
  $80 = (($79) - 2)|0;
  $81 = HEAP32[3144>>2]|0;
  $82 = (($81) + ($80<<2)|0);
  HEAP32[$82>>2] = $78;
  $83 = $list;
  $84 = (($83) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $list = $85;
  $86 = HEAP32[3152>>2]|0;
  $87 = (($86) - 3)|0;
  $88 = HEAP32[3144>>2]|0;
  $89 = (($88) + ($87<<2)|0);
  HEAP32[$89>>2] = $85;
  $90 = $list;
  $91 = (($90) + 12|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = ($93|0)>(8);
  if ($94) {
   $95 = $list;
   $96 = (($95) + 12|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = ($98|0)<(38);
   if ($99) {
    $100 = $list;
    $101 = HEAP32[3152>>2]|0;
    $102 = HEAP32[3144>>2]|0;
    $103 = (($102) + ($101<<2)|0);
    HEAP32[$103>>2] = $100;
    $104 = HEAP32[3152>>2]|0;
    $105 = (($104) + 1)|0;
    HEAP32[3152>>2] = $105;
    _eval();
    $106 = HEAP32[3152>>2]|0;
    $107 = (($106) - 1)|0;
    HEAP32[3152>>2] = $107;
   }
  }
 }
 $108 = $res;
 $109 = HEAP32[3152>>2]|0;
 $110 = HEAP32[3144>>2]|0;
 $111 = (($110) + ($109<<2)|0);
 HEAP32[$111>>2] = $108;
 $112 = HEAP32[3152>>2]|0;
 $113 = (($112) + 1)|0;
 HEAP32[3152>>2] = $113;
 STACKTOP = sp;return;
}
function _applyFOLDL1() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $fun = 0, $list = 0, $res = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $fun = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $list = $9;
 $10 = $list;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>(8);
 if ($14) {
  $15 = $list;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)<(38);
  if ($19) {
   $20 = $list;
   $21 = HEAP32[3152>>2]|0;
   $22 = HEAP32[3144>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[3152>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[3152>>2] = $25;
   _eval();
   $26 = HEAP32[3152>>2]|0;
   $27 = (($26) - 1)|0;
   HEAP32[3152>>2] = $27;
  }
 }
 $28 = $list;
 $29 = (($28) + 12|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)!=(39);
 if ($32) {
  $33 = HEAP32[8240>>2]|0;
  $34 = (($33) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  _runtimeerror(39,$35);
 }
 $36 = $list;
 $37 = HEAP32[$36>>2]|0;
 $res = $37;
 $38 = HEAP32[3152>>2]|0;
 $39 = HEAP32[3144>>2]|0;
 $40 = (($39) + ($38<<2)|0);
 HEAP32[$40>>2] = $37;
 $41 = HEAP32[3152>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[3152>>2] = $42;
 $43 = $res;
 $44 = (($43) + 12|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = ($46|0)>(8);
 if ($47) {
  $48 = $res;
  $49 = (($48) + 12|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = ($51|0)<(38);
  if ($52) {
   $53 = $res;
   $54 = HEAP32[3152>>2]|0;
   $55 = HEAP32[3144>>2]|0;
   $56 = (($55) + ($54<<2)|0);
   HEAP32[$56>>2] = $53;
   $57 = HEAP32[3152>>2]|0;
   $58 = (($57) + 1)|0;
   HEAP32[3152>>2] = $58;
   _eval();
   $59 = HEAP32[3152>>2]|0;
   $60 = (($59) - 1)|0;
   HEAP32[3152>>2] = $60;
  }
 }
 $61 = $list;
 $62 = (($61) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $list = $63;
 $64 = HEAP32[3152>>2]|0;
 $65 = (($64) - 3)|0;
 $66 = HEAP32[3144>>2]|0;
 $67 = (($66) + ($65<<2)|0);
 HEAP32[$67>>2] = $63;
 $68 = $list;
 $69 = (($68) + 12|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = ($71|0)>(8);
 if ($72) {
  $73 = $list;
  $74 = (($73) + 12|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = ($76|0)<(38);
  if ($77) {
   $78 = $list;
   $79 = HEAP32[3152>>2]|0;
   $80 = HEAP32[3144>>2]|0;
   $81 = (($80) + ($79<<2)|0);
   HEAP32[$81>>2] = $78;
   $82 = HEAP32[3152>>2]|0;
   $83 = (($82) + 1)|0;
   HEAP32[3152>>2] = $83;
   _eval();
   $84 = HEAP32[3152>>2]|0;
   $85 = (($84) - 1)|0;
   HEAP32[3152>>2] = $85;
  }
 }
 while(1) {
  $86 = $list;
  $87 = (($86) + 12|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = ($89|0)==(39);
  if (!($90)) {
   break;
  }
  $91 = (_newcell(22)|0);
  $temp = $91;
  $92 = HEAP32[3152>>2]|0;
  $93 = HEAP32[3144>>2]|0;
  $94 = (($93) + ($92<<2)|0);
  HEAP32[$94>>2] = $91;
  $95 = HEAP32[3152>>2]|0;
  $96 = (($95) + 1)|0;
  HEAP32[3152>>2] = $96;
  $97 = $list;
  $98 = HEAP32[$97>>2]|0;
  $99 = $temp;
  $100 = (($99) + 4|0);
  HEAP32[$100>>2] = $98;
  $101 = (_newcell(22)|0);
  $102 = $temp;
  HEAP32[$102>>2] = $101;
  $temp = $101;
  $103 = $res;
  $104 = $temp;
  $105 = (($104) + 4|0);
  HEAP32[$105>>2] = $103;
  $106 = $fun;
  $107 = $temp;
  HEAP32[$107>>2] = $106;
  _eval();
  $108 = HEAP32[3152>>2]|0;
  $109 = (($108) + -1)|0;
  HEAP32[3152>>2] = $109;
  $110 = HEAP32[3144>>2]|0;
  $111 = (($110) + ($109<<2)|0);
  $112 = HEAP32[$111>>2]|0;
  $res = $112;
  $113 = $res;
  $114 = HEAP32[3152>>2]|0;
  $115 = (($114) - 1)|0;
  $116 = HEAP32[3144>>2]|0;
  $117 = (($116) + ($115<<2)|0);
  HEAP32[$117>>2] = $113;
  $118 = $list;
  $119 = (($118) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  $list = $120;
  $121 = HEAP32[3152>>2]|0;
  $122 = (($121) - 3)|0;
  $123 = HEAP32[3144>>2]|0;
  $124 = (($123) + ($122<<2)|0);
  HEAP32[$124>>2] = $120;
  $125 = $list;
  $126 = (($125) + 12|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = $127&255;
  $129 = ($128|0)>(8);
  if ($129) {
   $130 = $list;
   $131 = (($130) + 12|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132&255;
   $134 = ($133|0)<(38);
   if ($134) {
    $135 = $list;
    $136 = HEAP32[3152>>2]|0;
    $137 = HEAP32[3144>>2]|0;
    $138 = (($137) + ($136<<2)|0);
    HEAP32[$138>>2] = $135;
    $139 = HEAP32[3152>>2]|0;
    $140 = (($139) + 1)|0;
    HEAP32[3152>>2] = $140;
    _eval();
    $141 = HEAP32[3152>>2]|0;
    $142 = (($141) - 1)|0;
    HEAP32[3152>>2] = $142;
   }
  }
 }
 STACKTOP = sp;return;
}
function _applyFOLDR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $fun = 0, $l = 0, $temp = 0, $zero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $fun = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $zero = $9;
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) - 3)|0;
 $12 = HEAP32[3144>>2]|0;
 $13 = (($12) + ($11<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $l = $14;
 $15 = $l;
 $16 = (($15) + 12|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)>(8);
 if ($19) {
  $20 = $l;
  $21 = (($20) + 12|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)<(38);
  if ($24) {
   $25 = $l;
   $26 = HEAP32[3152>>2]|0;
   $27 = HEAP32[3144>>2]|0;
   $28 = (($27) + ($26<<2)|0);
   HEAP32[$28>>2] = $25;
   $29 = HEAP32[3152>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[3152>>2] = $30;
   _eval();
   $31 = HEAP32[3152>>2]|0;
   $32 = (($31) - 1)|0;
   HEAP32[3152>>2] = $32;
  }
 }
 $33 = $l;
 $34 = (($33) + 12|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = ($36|0)!=(39);
 if ($37) {
  $38 = $zero;
  $39 = HEAP32[3152>>2]|0;
  $40 = HEAP32[3144>>2]|0;
  $41 = (($40) + ($39<<2)|0);
  HEAP32[$41>>2] = $38;
  $42 = HEAP32[3152>>2]|0;
  $43 = (($42) + 1)|0;
  HEAP32[3152>>2] = $43;
  _eval();
  STACKTOP = sp;return;
 } else {
  $44 = (_newcell(22)|0);
  $temp = $44;
  $45 = HEAP32[3152>>2]|0;
  $46 = HEAP32[3144>>2]|0;
  $47 = (($46) + ($45<<2)|0);
  HEAP32[$47>>2] = $44;
  $48 = HEAP32[3152>>2]|0;
  $49 = (($48) + 1)|0;
  HEAP32[3152>>2] = $49;
  $50 = (_newcell(22)|0);
  $51 = $temp;
  HEAP32[$51>>2] = $50;
  $52 = $fun;
  $53 = $temp;
  $54 = HEAP32[$53>>2]|0;
  HEAP32[$54>>2] = $52;
  $55 = $l;
  $56 = HEAP32[$55>>2]|0;
  $57 = $temp;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + 4|0);
  HEAP32[$59>>2] = $56;
  $60 = (_newcell(24)|0);
  $61 = $temp;
  $62 = (($61) + 4|0);
  HEAP32[$62>>2] = $60;
  $temp = $60;
  $63 = HEAP32[8248>>2]|0;
  $64 = (($63) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $temp;
  $67 = (($66) + 8|0);
  HEAP32[$67>>2] = $65;
  $68 = $l;
  $69 = (($68) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $temp;
  HEAP32[$71>>2] = $70;
  $72 = (_newcell(24)|0);
  $73 = $temp;
  $74 = (($73) + 4|0);
  HEAP32[$74>>2] = $72;
  $temp = $72;
  $75 = $zero;
  $76 = $temp;
  HEAP32[$76>>2] = $75;
  $77 = $fun;
  $78 = $temp;
  $79 = (($78) + 4|0);
  HEAP32[$79>>2] = $77;
  STACKTOP = sp;return;
 }
}
function _applyFOLDR1() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fun = 0, $l = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $fun = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l = $9;
 $10 = $l;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>(8);
 if ($14) {
  $15 = $l;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)<(38);
  if ($19) {
   $20 = $l;
   $21 = HEAP32[3152>>2]|0;
   $22 = HEAP32[3144>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[3152>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[3152>>2] = $25;
   _eval();
   $26 = HEAP32[3152>>2]|0;
   $27 = (($26) - 1)|0;
   HEAP32[3152>>2] = $27;
  }
 }
 $28 = $l;
 $29 = (($28) + 12|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)!=(39);
 if ($32) {
  $33 = HEAP32[8256>>2]|0;
  $34 = (($33) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  _runtimeerror(39,$35);
 }
 $36 = $l;
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 12|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = ($41|0)>(8);
 if ($42) {
  $43 = $l;
  $44 = (($43) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 12|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = ($48|0)<(38);
  if ($49) {
   $50 = $l;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = HEAP32[3152>>2]|0;
   $54 = HEAP32[3144>>2]|0;
   $55 = (($54) + ($53<<2)|0);
   HEAP32[$55>>2] = $52;
   $56 = HEAP32[3152>>2]|0;
   $57 = (($56) + 1)|0;
   HEAP32[3152>>2] = $57;
   _eval();
   $58 = HEAP32[3152>>2]|0;
   $59 = (($58) - 1)|0;
   HEAP32[3152>>2] = $59;
  }
 }
 $60 = $l;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + 12|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = ($65|0)==(6);
 if ($66) {
  $67 = $l;
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[3152>>2]|0;
  $70 = HEAP32[3144>>2]|0;
  $71 = (($70) + ($69<<2)|0);
  HEAP32[$71>>2] = $68;
  $72 = HEAP32[3152>>2]|0;
  $73 = (($72) + 1)|0;
  HEAP32[3152>>2] = $73;
  _eval();
  STACKTOP = sp;return;
 } else {
  $74 = (_newcell(22)|0);
  $temp = $74;
  $75 = HEAP32[3152>>2]|0;
  $76 = HEAP32[3144>>2]|0;
  $77 = (($76) + ($75<<2)|0);
  HEAP32[$77>>2] = $74;
  $78 = HEAP32[3152>>2]|0;
  $79 = (($78) + 1)|0;
  HEAP32[3152>>2] = $79;
  $80 = (_newcell(22)|0);
  $81 = $temp;
  HEAP32[$81>>2] = $80;
  $82 = $fun;
  $83 = $temp;
  $84 = HEAP32[$83>>2]|0;
  HEAP32[$84>>2] = $82;
  $85 = $l;
  $86 = HEAP32[$85>>2]|0;
  $87 = $temp;
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + 4|0);
  HEAP32[$89>>2] = $86;
  $90 = (_newcell(24)|0);
  $91 = $temp;
  $92 = (($91) + 4|0);
  HEAP32[$92>>2] = $90;
  $temp = $90;
  $93 = HEAP32[8256>>2]|0;
  $94 = (($93) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $temp;
  $97 = (($96) + 8|0);
  HEAP32[$97>>2] = $95;
  $98 = $l;
  $99 = (($98) + 4|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $temp;
  HEAP32[$101>>2] = $100;
  $102 = $fun;
  $103 = $temp;
  $104 = (($103) + 4|0);
  HEAP32[$104>>2] = $102;
  STACKTOP = sp;return;
 }
}
function _applyCONCAT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $l = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 $5 = $l;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(8);
 if ($9) {
  $10 = $l;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)<(38);
  if ($14) {
   $15 = $l;
   $16 = HEAP32[3152>>2]|0;
   $17 = HEAP32[3144>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $15;
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[3152>>2] = $20;
   _eval();
   $21 = HEAP32[3152>>2]|0;
   $22 = (($21) - 1)|0;
   HEAP32[3152>>2] = $22;
  }
 }
 $23 = $l;
 $24 = (($23) + 12|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)!=(39);
 if ($27) {
  $28 = HEAP32[2576>>2]|0;
  $29 = HEAP32[3152>>2]|0;
  $30 = HEAP32[3144>>2]|0;
  $31 = (($30) + ($29<<2)|0);
  HEAP32[$31>>2] = $28;
  $32 = HEAP32[3152>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[3152>>2] = $33;
  STACKTOP = sp;return;
 } else {
  $34 = (_newcell(24)|0);
  $temp = $34;
  $35 = HEAP32[3152>>2]|0;
  $36 = HEAP32[3144>>2]|0;
  $37 = (($36) + ($35<<2)|0);
  HEAP32[$37>>2] = $34;
  $38 = HEAP32[3152>>2]|0;
  $39 = (($38) + 1)|0;
  HEAP32[3152>>2] = $39;
  $40 = HEAP32[8208>>2]|0;
  $41 = (($40) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $temp;
  $44 = (($43) + 8|0);
  HEAP32[$44>>2] = $42;
  $45 = $l;
  $46 = HEAP32[$45>>2]|0;
  $47 = $temp;
  $48 = (($47) + 4|0);
  HEAP32[$48>>2] = $46;
  $49 = (_newcell(24)|0);
  $50 = $temp;
  HEAP32[$50>>2] = $49;
  $temp = $49;
  $51 = HEAP32[8216>>2]|0;
  $52 = (($51) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $temp;
  $55 = (($54) + 8|0);
  HEAP32[$55>>2] = $53;
  $56 = $l;
  $57 = (($56) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $temp;
  $60 = (($59) + 4|0);
  HEAP32[$60>>2] = $58;
  STACKTOP = sp;return;
 }
}
function _applyFILTER() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $fun = 0, $l = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $fun = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l = $9;
 while(1) {
  $10 = $l;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)>(8);
  if ($14) {
   $15 = $l;
   $16 = (($15) + 12|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = ($18|0)<(38);
   if ($19) {
    $20 = $l;
    $21 = HEAP32[3152>>2]|0;
    $22 = HEAP32[3144>>2]|0;
    $23 = (($22) + ($21<<2)|0);
    HEAP32[$23>>2] = $20;
    $24 = HEAP32[3152>>2]|0;
    $25 = (($24) + 1)|0;
    HEAP32[3152>>2] = $25;
    _eval();
    $26 = HEAP32[3152>>2]|0;
    $27 = (($26) - 1)|0;
    HEAP32[3152>>2] = $27;
   }
  }
  $28 = $l;
  $29 = (($28) + 12|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)!=(39);
  if ($32) {
   label = 6;
   break;
  }
  $39 = (_newcell(22)|0);
  $temp = $39;
  $40 = HEAP32[3152>>2]|0;
  $41 = HEAP32[3144>>2]|0;
  $42 = (($41) + ($40<<2)|0);
  HEAP32[$42>>2] = $39;
  $43 = HEAP32[3152>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[3152>>2] = $44;
  $45 = $fun;
  $46 = $temp;
  HEAP32[$46>>2] = $45;
  $47 = $l;
  $48 = HEAP32[$47>>2]|0;
  $49 = $temp;
  $50 = (($49) + 4|0);
  HEAP32[$50>>2] = $48;
  _eval();
  $51 = HEAP32[3152>>2]|0;
  $52 = (($51) + -1)|0;
  HEAP32[3152>>2] = $52;
  $53 = HEAP32[3144>>2]|0;
  $54 = (($53) + ($52<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)!=(0);
  if ($58) {
   break;
  }
  $59 = $l;
  $60 = (($59) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $l = $61;
  $62 = HEAP32[3152>>2]|0;
  $63 = (($62) - 2)|0;
  $64 = HEAP32[3144>>2]|0;
  $65 = (($64) + ($63<<2)|0);
  HEAP32[$65>>2] = $61;
 }
 if ((label|0) == 6) {
  $33 = $l;
  $34 = HEAP32[3152>>2]|0;
  $35 = HEAP32[3144>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  HEAP32[$36>>2] = $33;
  $37 = HEAP32[3152>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[3152>>2] = $38;
  STACKTOP = sp;return;
 }
 $66 = (_newcell(39)|0);
 $temp = $66;
 $67 = HEAP32[3152>>2]|0;
 $68 = HEAP32[3144>>2]|0;
 $69 = (($68) + ($67<<2)|0);
 HEAP32[$69>>2] = $66;
 $70 = HEAP32[3152>>2]|0;
 $71 = (($70) + 1)|0;
 HEAP32[3152>>2] = $71;
 $72 = $l;
 $73 = HEAP32[$72>>2]|0;
 $74 = $temp;
 HEAP32[$74>>2] = $73;
 $75 = (_newcell(24)|0);
 $76 = $temp;
 $77 = (($76) + 4|0);
 HEAP32[$77>>2] = $75;
 $temp = $75;
 $78 = HEAP32[8224>>2]|0;
 $79 = (($78) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $temp;
 $82 = (($81) + 8|0);
 HEAP32[$82>>2] = $80;
 $83 = $l;
 $84 = (($83) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $temp;
 HEAP32[$86>>2] = $85;
 $87 = $fun;
 $88 = $temp;
 $89 = (($88) + 4|0);
 HEAP32[$89>>2] = $87;
 STACKTOP = sp;return;
}
function _applyMAP() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $fun = 0, $l = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $fun = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l = $9;
 $10 = $l;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>(8);
 if ($14) {
  $15 = $l;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)<(38);
  if ($19) {
   $20 = $l;
   $21 = HEAP32[3152>>2]|0;
   $22 = HEAP32[3144>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[3152>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[3152>>2] = $25;
   _eval();
   $26 = HEAP32[3152>>2]|0;
   $27 = (($26) - 1)|0;
   HEAP32[3152>>2] = $27;
  }
 }
 $28 = $l;
 $29 = (($28) + 12|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)!=(39);
 if ($32) {
  $33 = HEAP32[2576>>2]|0;
  $34 = HEAP32[3152>>2]|0;
  $35 = HEAP32[3144>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  HEAP32[$36>>2] = $33;
  $37 = HEAP32[3152>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[3152>>2] = $38;
  STACKTOP = sp;return;
 } else {
  $39 = (_newcell(39)|0);
  $temp = $39;
  $40 = HEAP32[3152>>2]|0;
  $41 = HEAP32[3144>>2]|0;
  $42 = (($41) + ($40<<2)|0);
  HEAP32[$42>>2] = $39;
  $43 = HEAP32[3152>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[3152>>2] = $44;
  $45 = (_newcell(22)|0);
  $46 = $temp;
  HEAP32[$46>>2] = $45;
  $47 = $fun;
  $48 = $temp;
  $49 = HEAP32[$48>>2]|0;
  HEAP32[$49>>2] = $47;
  $50 = $l;
  $51 = HEAP32[$50>>2]|0;
  $52 = $temp;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 4|0);
  HEAP32[$54>>2] = $51;
  $55 = (_newcell(24)|0);
  $56 = $temp;
  $57 = (($56) + 4|0);
  HEAP32[$57>>2] = $55;
  $temp = $55;
  $58 = HEAP32[8272>>2]|0;
  $59 = (($58) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $temp;
  $62 = (($61) + 8|0);
  HEAP32[$62>>2] = $60;
  $63 = $l;
  $64 = (($63) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $temp;
  HEAP32[$66>>2] = $65;
  $67 = $fun;
  $68 = $temp;
  $69 = (($68) + 4|0);
  HEAP32[$69>>2] = $67;
  STACKTOP = sp;return;
 }
}
function _applyNAT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $count = 0, $k = 0, $l = 0, $temp = 0, $val_k = 0, $val_l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $k = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l = $9;
 $10 = $k;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(3);
 if ($14) {
  $15 = $k;
  $16 = HEAP32[$15>>2]|0;
  $22 = $16;
 } else {
  $17 = $k;
  $18 = HEAP32[8280>>2]|0;
  $19 = (($18) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_evalint($17,$20)|0);
  $22 = $21;
 }
 $val_k = $22;
 $23 = $l;
 $24 = (($23) + 12|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)==(3);
 if ($27) {
  $28 = $l;
  $29 = HEAP32[$28>>2]|0;
  $35 = $29;
 } else {
  $30 = $l;
  $31 = HEAP32[8280>>2]|0;
  $32 = (($31) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_evalint($30,$33)|0);
  $35 = $34;
 }
 $val_l = $35;
 $36 = $val_k;
 $37 = $val_l;
 $38 = ($36|0)>($37|0);
 if ($38) {
  $39 = HEAP32[2576>>2]|0;
  $40 = HEAP32[3152>>2]|0;
  $41 = HEAP32[3144>>2]|0;
  $42 = (($41) + ($40<<2)|0);
  HEAP32[$42>>2] = $39;
  $43 = HEAP32[3152>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[3152>>2] = $44;
  STACKTOP = sp;return;
 }
 $45 = (_newcell(39)|0);
 $temp = $45;
 $46 = HEAP32[3152>>2]|0;
 $47 = HEAP32[3144>>2]|0;
 $48 = (($47) + ($46<<2)|0);
 HEAP32[$48>>2] = $45;
 $49 = HEAP32[3152>>2]|0;
 $50 = (($49) + 1)|0;
 HEAP32[3152>>2] = $50;
 $51 = $k;
 $52 = $temp;
 HEAP32[$52>>2] = $51;
 $count = 0;
 while(1) {
  $53 = $count;
  $54 = ($53|0)<(3);
  if (!($54)) {
   label = 15;
   break;
  }
  $55 = $val_k;
  $56 = (($55) + 1)|0;
  $val_k = $56;
  $57 = $val_l;
  $58 = ($56|0)>($57|0);
  if ($58) {
   label = 12;
   break;
  }
  $62 = (_newcell(39)|0);
  $63 = $temp;
  $64 = (($63) + 4|0);
  HEAP32[$64>>2] = $62;
  $temp = $62;
  $65 = (_newcell(3)|0);
  $66 = $temp;
  HEAP32[$66>>2] = $65;
  $67 = $val_k;
  $68 = $temp;
  $69 = HEAP32[$68>>2]|0;
  HEAP32[$69>>2] = $67;
  $70 = $count;
  $71 = (($70) + 1)|0;
  $count = $71;
 }
 if ((label|0) == 12) {
  $59 = HEAP32[2576>>2]|0;
  $60 = $temp;
  $61 = (($60) + 4|0);
  HEAP32[$61>>2] = $59;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 15) {
  $72 = (_newcell(24)|0);
  $73 = $temp;
  $74 = (($73) + 4|0);
  HEAP32[$74>>2] = $72;
  $temp = $72;
  $75 = HEAP32[8280>>2]|0;
  $76 = (($75) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $temp;
  $79 = (($78) + 8|0);
  HEAP32[$79>>2] = $77;
  $80 = $l;
  $81 = $temp;
  HEAP32[$81>>2] = $80;
  $82 = (_newcell(3)|0);
  $83 = $temp;
  $84 = (($83) + 4|0);
  HEAP32[$84>>2] = $82;
  $85 = $val_k;
  $86 = (($85) + 1)|0;
  $87 = $temp;
  $88 = (($87) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  HEAP32[$89>>2] = $86;
  STACKTOP = sp;return;
 }
}
function _applyNATS() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $k = 0, $temp = 0, $val_k = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $k = $4;
 $5 = $k;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(3);
 if ($9) {
  $10 = $k;
  $11 = HEAP32[$10>>2]|0;
  $17 = $11;
 } else {
  $12 = $k;
  $13 = HEAP32[8288>>2]|0;
  $14 = (($13) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_evalint($12,$15)|0);
  $17 = $16;
 }
 $val_k = $17;
 $18 = (_newcell(39)|0);
 $temp = $18;
 $19 = HEAP32[3152>>2]|0;
 $20 = HEAP32[3144>>2]|0;
 $21 = (($20) + ($19<<2)|0);
 HEAP32[$21>>2] = $18;
 $22 = HEAP32[3152>>2]|0;
 $23 = (($22) + 1)|0;
 HEAP32[3152>>2] = $23;
 $24 = $k;
 $25 = $temp;
 HEAP32[$25>>2] = $24;
 $count = 0;
 while(1) {
  $26 = $count;
  $27 = ($26|0)<(3);
  if (!($27)) {
   break;
  }
  $28 = (_newcell(39)|0);
  $29 = $temp;
  $30 = (($29) + 4|0);
  HEAP32[$30>>2] = $28;
  $temp = $28;
  $31 = (_newcell(3)|0);
  $32 = $temp;
  HEAP32[$32>>2] = $31;
  $33 = $val_k;
  $34 = (($33) + 1)|0;
  $val_k = $34;
  $35 = $temp;
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$36>>2] = $34;
  $37 = $count;
  $38 = (($37) + 1)|0;
  $count = $38;
 }
 $39 = (_newcell(24)|0);
 $40 = $temp;
 $41 = (($40) + 4|0);
 HEAP32[$41>>2] = $39;
 $temp = $39;
 $42 = HEAP32[8288>>2]|0;
 $43 = (($42) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $temp;
 $46 = (($45) + 8|0);
 HEAP32[$46>>2] = $44;
 $47 = (_newcell(3)|0);
 $48 = $temp;
 $49 = (($48) + 4|0);
 HEAP32[$49>>2] = $47;
 $50 = $val_k;
 $51 = (($50) + 1)|0;
 $52 = $temp;
 $53 = (($52) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 HEAP32[$54>>2] = $51;
 STACKTOP = sp;return;
}
function _applyGENNAT() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count = 0, $k = 0, $l = 0, $m = 0, $step = 0, $temp = 0, $val_k = 0, $val_l = 0, $val_m = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $k = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l = $9;
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) - 3)|0;
 $12 = HEAP32[3144>>2]|0;
 $13 = (($12) + ($11<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $m = $14;
 $15 = $k;
 $16 = (($15) + 12|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)==(3);
 if ($19) {
  $20 = $k;
  $21 = HEAP32[$20>>2]|0;
  $27 = $21;
 } else {
  $22 = $k;
  $23 = HEAP32[8296>>2]|0;
  $24 = (($23) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_evalint($22,$25)|0);
  $27 = $26;
 }
 $val_k = $27;
 $28 = $l;
 $29 = (($28) + 12|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)==(3);
 if ($32) {
  $33 = $l;
  $34 = HEAP32[$33>>2]|0;
  $40 = $34;
 } else {
  $35 = $l;
  $36 = HEAP32[8296>>2]|0;
  $37 = (($36) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (_evalint($35,$38)|0);
  $40 = $39;
 }
 $val_l = $40;
 $41 = $m;
 $42 = (($41) + 12|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = ($44|0)==(3);
 if ($45) {
  $46 = $m;
  $47 = HEAP32[$46>>2]|0;
  $53 = $47;
 } else {
  $48 = $m;
  $49 = HEAP32[8296>>2]|0;
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (_evalint($48,$51)|0);
  $53 = $52;
 }
 $val_m = $53;
 $54 = $val_l;
 $55 = $val_k;
 $56 = (($54) - ($55))|0;
 $step = $56;
 $57 = $step;
 $58 = ($57|0)>(0);
 if ($58) {
  $59 = $val_k;
  $60 = $val_m;
  $61 = ($59|0)>($60|0);
  if ($61) {
   $62 = HEAP32[2576>>2]|0;
   $63 = HEAP32[3152>>2]|0;
   $64 = HEAP32[3144>>2]|0;
   $65 = (($64) + ($63<<2)|0);
   HEAP32[$65>>2] = $62;
   $66 = HEAP32[3152>>2]|0;
   $67 = (($66) + 1)|0;
   HEAP32[3152>>2] = $67;
   STACKTOP = sp;return;
  }
 }
 $68 = $step;
 $69 = ($68|0)<(0);
 if ($69) {
  $70 = $val_k;
  $71 = $val_m;
  $72 = ($70|0)<($71|0);
  if ($72) {
   $73 = HEAP32[2576>>2]|0;
   $74 = HEAP32[3152>>2]|0;
   $75 = HEAP32[3144>>2]|0;
   $76 = (($75) + ($74<<2)|0);
   HEAP32[$76>>2] = $73;
   $77 = HEAP32[3152>>2]|0;
   $78 = (($77) + 1)|0;
   HEAP32[3152>>2] = $78;
  } else {
   label = 16;
  }
 } else {
  label = 16;
 }
 do {
  if ((label|0) == 16) {
   $79 = (_newcell(39)|0);
   $temp = $79;
   $80 = HEAP32[3152>>2]|0;
   $81 = HEAP32[3144>>2]|0;
   $82 = (($81) + ($80<<2)|0);
   HEAP32[$82>>2] = $79;
   $83 = HEAP32[3152>>2]|0;
   $84 = (($83) + 1)|0;
   HEAP32[3152>>2] = $84;
   $85 = $k;
   $86 = $temp;
   HEAP32[$86>>2] = $85;
   $count = 0;
   while(1) {
    $87 = $count;
    $88 = ($87|0)<(3);
    if (!($88)) {
     label = 30;
     break;
    }
    $89 = $val_l;
    $val_k = $89;
    $90 = $step;
    $91 = $val_l;
    $92 = (($91) + ($90))|0;
    $val_l = $92;
    $93 = $step;
    $94 = ($93|0)>(0);
    if ($94) {
     $95 = $val_k;
     $96 = $val_m;
     $97 = ($95|0)>($96|0);
     if ($97) {
      label = 20;
      break;
     }
    }
    $101 = $step;
    $102 = ($101|0)<(0);
    if ($102) {
     $103 = $val_k;
     $104 = $val_m;
     $105 = ($103|0)<($104|0);
     if ($105) {
      label = 23;
      break;
     }
    }
    $109 = (_newcell(39)|0);
    $110 = $temp;
    $111 = (($110) + 4|0);
    HEAP32[$111>>2] = $109;
    $temp = $109;
    $112 = $count;
    $113 = ($112|0)==(0);
    if ($113) {
     $114 = $l;
     $115 = $temp;
     HEAP32[$115>>2] = $114;
    } else {
     $116 = (_newcell(3)|0);
     $117 = $temp;
     HEAP32[$117>>2] = $116;
     $118 = $val_k;
     $119 = $temp;
     $120 = HEAP32[$119>>2]|0;
     HEAP32[$120>>2] = $118;
    }
    $121 = $count;
    $122 = (($121) + 1)|0;
    $count = $122;
   }
   if ((label|0) == 20) {
    $98 = HEAP32[2576>>2]|0;
    $99 = $temp;
    $100 = (($99) + 4|0);
    HEAP32[$100>>2] = $98;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 23) {
    $106 = HEAP32[2576>>2]|0;
    $107 = $temp;
    $108 = (($107) + 4|0);
    HEAP32[$108>>2] = $106;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 30) {
    $123 = (_newcell(24)|0);
    $124 = $temp;
    $125 = (($124) + 4|0);
    HEAP32[$125>>2] = $123;
    $temp = $123;
    $126 = HEAP32[8296>>2]|0;
    $127 = (($126) + 8|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = $temp;
    $130 = (($129) + 8|0);
    HEAP32[$130>>2] = $128;
    $131 = $m;
    $132 = $temp;
    HEAP32[$132>>2] = $131;
    $133 = (_newcell(24)|0);
    $134 = $temp;
    $135 = (($134) + 4|0);
    HEAP32[$135>>2] = $133;
    $temp = $133;
    $136 = (_newcell(3)|0);
    $137 = $temp;
    HEAP32[$137>>2] = $136;
    $138 = $val_l;
    $139 = $step;
    $140 = (($138) + ($139))|0;
    $141 = $temp;
    $142 = HEAP32[$141>>2]|0;
    HEAP32[$142>>2] = $140;
    $143 = (_newcell(3)|0);
    $144 = $temp;
    $145 = (($144) + 4|0);
    HEAP32[$145>>2] = $143;
    $146 = $val_l;
    $147 = $temp;
    $148 = (($147) + 4|0);
    $149 = HEAP32[$148>>2]|0;
    HEAP32[$149>>2] = $146;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _applyGENNATS() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $count = 0, $k = 0, $l = 0, $step = 0, $temp = 0, $val_k = 0, $val_l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $k = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l = $9;
 $10 = $k;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(3);
 if ($14) {
  $15 = $k;
  $16 = HEAP32[$15>>2]|0;
  $22 = $16;
 } else {
  $17 = $k;
  $18 = HEAP32[8304>>2]|0;
  $19 = (($18) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_evalint($17,$20)|0);
  $22 = $21;
 }
 $val_k = $22;
 $23 = $l;
 $24 = (($23) + 12|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)==(3);
 if ($27) {
  $28 = $l;
  $29 = HEAP32[$28>>2]|0;
  $35 = $29;
 } else {
  $30 = $l;
  $31 = HEAP32[8304>>2]|0;
  $32 = (($31) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_evalint($30,$33)|0);
  $35 = $34;
 }
 $val_l = $35;
 $36 = $val_l;
 $37 = $val_k;
 $38 = (($36) - ($37))|0;
 $step = $38;
 $39 = (_newcell(39)|0);
 $temp = $39;
 $40 = HEAP32[3152>>2]|0;
 $41 = HEAP32[3144>>2]|0;
 $42 = (($41) + ($40<<2)|0);
 HEAP32[$42>>2] = $39;
 $43 = HEAP32[3152>>2]|0;
 $44 = (($43) + 1)|0;
 HEAP32[3152>>2] = $44;
 $45 = $k;
 $46 = $temp;
 HEAP32[$46>>2] = $45;
 $count = 0;
 while(1) {
  $47 = $count;
  $48 = ($47|0)<(3);
  if (!($48)) {
   break;
  }
  $49 = $val_l;
  $val_k = $49;
  $50 = $step;
  $51 = $val_l;
  $52 = (($51) + ($50))|0;
  $val_l = $52;
  $53 = (_newcell(39)|0);
  $54 = $temp;
  $55 = (($54) + 4|0);
  HEAP32[$55>>2] = $53;
  $temp = $53;
  $56 = $count;
  $57 = ($56|0)==(0);
  if ($57) {
   $58 = $l;
   $59 = $temp;
   HEAP32[$59>>2] = $58;
  } else {
   $60 = (_newcell(3)|0);
   $61 = $temp;
   HEAP32[$61>>2] = $60;
   $62 = $val_k;
   $63 = $temp;
   $64 = HEAP32[$63>>2]|0;
   HEAP32[$64>>2] = $62;
  }
  $65 = $count;
  $66 = (($65) + 1)|0;
  $count = $66;
 }
 $67 = (_newcell(24)|0);
 $68 = $temp;
 $69 = (($68) + 4|0);
 HEAP32[$69>>2] = $67;
 $temp = $67;
 $70 = HEAP32[8304>>2]|0;
 $71 = (($70) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $temp;
 $74 = (($73) + 8|0);
 HEAP32[$74>>2] = $72;
 $75 = (_newcell(3)|0);
 $76 = $temp;
 HEAP32[$76>>2] = $75;
 $77 = $val_l;
 $78 = $step;
 $79 = (($77) + ($78))|0;
 $80 = $temp;
 $81 = HEAP32[$80>>2]|0;
 HEAP32[$81>>2] = $79;
 $82 = (_newcell(3)|0);
 $83 = $temp;
 $84 = (($83) + 4|0);
 HEAP32[$84>>2] = $82;
 $85 = $val_l;
 $86 = $temp;
 $87 = (($86) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 HEAP32[$88>>2] = $85;
 STACKTOP = sp;return;
}
function _applySPLIT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $copy = 0, $count = 0;
 var $l = 0, $pair = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[8152>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_evalint($4,$7)|0);
 $count = $8;
 $9 = HEAP32[3152>>2]|0;
 $10 = (($9) - 2)|0;
 $11 = HEAP32[3144>>2]|0;
 $12 = (($11) + ($10<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $l = $13;
 $14 = (_newcell(41)|0);
 $pair = $14;
 $15 = HEAP32[3152>>2]|0;
 $16 = HEAP32[3144>>2]|0;
 $17 = (($16) + ($15<<2)|0);
 HEAP32[$17>>2] = $14;
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[3152>>2] = $19;
 $20 = $pair;
 $21 = (($20) + 8|0);
 HEAP32[$21>>2] = 2;
 $22 = (_newcell(41)|0);
 $23 = $pair;
 $24 = (($23) + 4|0);
 HEAP32[$24>>2] = $22;
 $25 = HEAP32[2968>>2]|0;
 $26 = $pair;
 $27 = (($26) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 4|0);
 HEAP32[$29>>2] = $25;
 $30 = $pair;
 $copy = $30;
 $31 = $l;
 $32 = (($31) + 12|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = ($34|0)>(8);
 if ($35) {
  $36 = $l;
  $37 = (($36) + 12|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = ($39|0)<(38);
  if ($40) {
   $41 = $l;
   $42 = HEAP32[3152>>2]|0;
   $43 = HEAP32[3144>>2]|0;
   $44 = (($43) + ($42<<2)|0);
   HEAP32[$44>>2] = $41;
   $45 = HEAP32[3152>>2]|0;
   $46 = (($45) + 1)|0;
   HEAP32[3152>>2] = $46;
   _eval();
   $47 = HEAP32[3152>>2]|0;
   $48 = (($47) - 1)|0;
   HEAP32[3152>>2] = $48;
  }
 }
 while(1) {
  $49 = $count;
  $50 = (($49) + -1)|0;
  $count = $50;
  $51 = ($49|0)>(0);
  if ($51) {
   $52 = $l;
   $53 = (($52) + 12|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = ($55|0)==(39);
   $97 = $56;
  } else {
   $97 = 0;
  }
  if (!($97)) {
   break;
  }
  $57 = (_newcell(39)|0);
  $58 = $copy;
  HEAP32[$58>>2] = $57;
  $59 = $l;
  $60 = HEAP32[$59>>2]|0;
  $61 = $copy;
  $62 = HEAP32[$61>>2]|0;
  HEAP32[$62>>2] = $60;
  $63 = $copy;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + 4|0);
  $copy = $65;
  $66 = $l;
  $67 = (($66) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  $l = $68;
  $69 = HEAP32[3152>>2]|0;
  $70 = (($69) - 3)|0;
  $71 = HEAP32[3144>>2]|0;
  $72 = (($71) + ($70<<2)|0);
  HEAP32[$72>>2] = $68;
  $73 = $l;
  $74 = (($73) + 12|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = ($76|0)>(8);
  if ($77) {
   $78 = $l;
   $79 = (($78) + 12|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = ($81|0)<(38);
   if ($82) {
    $83 = $l;
    $84 = HEAP32[3152>>2]|0;
    $85 = HEAP32[3144>>2]|0;
    $86 = (($85) + ($84<<2)|0);
    HEAP32[$86>>2] = $83;
    $87 = HEAP32[3152>>2]|0;
    $88 = (($87) + 1)|0;
    HEAP32[3152>>2] = $88;
    _eval();
    $89 = HEAP32[3152>>2]|0;
    $90 = (($89) - 1)|0;
    HEAP32[3152>>2] = $90;
   }
  }
 }
 $91 = HEAP32[2576>>2]|0;
 $92 = $copy;
 HEAP32[$92>>2] = $91;
 $93 = $l;
 $94 = $pair;
 $95 = (($94) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 HEAP32[$96>>2] = $93;
 STACKTOP = sp;return;
}
function _applySPLITWHILE() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $copy = 0, $fun = 0, $l = 0, $pair = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $fun = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l = $9;
 $10 = (_newcell(41)|0);
 $pair = $10;
 $11 = HEAP32[3152>>2]|0;
 $12 = HEAP32[3144>>2]|0;
 $13 = (($12) + ($11<<2)|0);
 HEAP32[$13>>2] = $10;
 $14 = HEAP32[3152>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[3152>>2] = $15;
 $16 = $pair;
 $17 = (($16) + 8|0);
 HEAP32[$17>>2] = 2;
 $18 = (_newcell(41)|0);
 $19 = $pair;
 $20 = (($19) + 4|0);
 HEAP32[$20>>2] = $18;
 $21 = HEAP32[2968>>2]|0;
 $22 = $pair;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 4|0);
 HEAP32[$25>>2] = $21;
 $26 = $pair;
 $copy = $26;
 $27 = $l;
 $28 = (($27) + 12|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = ($30|0)>(8);
 if ($31) {
  $32 = $l;
  $33 = (($32) + 12|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = ($35|0)<(38);
  if ($36) {
   $37 = $l;
   $38 = HEAP32[3152>>2]|0;
   $39 = HEAP32[3144>>2]|0;
   $40 = (($39) + ($38<<2)|0);
   HEAP32[$40>>2] = $37;
   $41 = HEAP32[3152>>2]|0;
   $42 = (($41) + 1)|0;
   HEAP32[3152>>2] = $42;
   _eval();
   $43 = HEAP32[3152>>2]|0;
   $44 = (($43) - 1)|0;
   HEAP32[3152>>2] = $44;
  }
 }
 while(1) {
  $45 = $l;
  $46 = (($45) + 12|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = ($48|0)==(39);
  if (!($49)) {
   label = 12;
   break;
  }
  $50 = (_newcell(22)|0);
  $temp = $50;
  $51 = HEAP32[3152>>2]|0;
  $52 = HEAP32[3144>>2]|0;
  $53 = (($52) + ($51<<2)|0);
  HEAP32[$53>>2] = $50;
  $54 = HEAP32[3152>>2]|0;
  $55 = (($54) + 1)|0;
  HEAP32[3152>>2] = $55;
  $56 = $fun;
  $57 = $temp;
  HEAP32[$57>>2] = $56;
  $58 = $l;
  $59 = HEAP32[$58>>2]|0;
  $60 = $temp;
  $61 = (($60) + 4|0);
  HEAP32[$61>>2] = $59;
  _eval();
  $62 = HEAP32[3152>>2]|0;
  $63 = (($62) + -1)|0;
  HEAP32[3152>>2] = $63;
  $64 = HEAP32[3144>>2]|0;
  $65 = (($64) + ($63<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)!=(0);
  if (!($69)) {
   break;
  }
  $70 = (_newcell(39)|0);
  $71 = $copy;
  HEAP32[$71>>2] = $70;
  $72 = $l;
  $73 = HEAP32[$72>>2]|0;
  $74 = $copy;
  $75 = HEAP32[$74>>2]|0;
  HEAP32[$75>>2] = $73;
  $76 = $copy;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + 4|0);
  $copy = $78;
  $79 = $l;
  $80 = (($79) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $l = $81;
  $82 = HEAP32[3152>>2]|0;
  $83 = (($82) - 3)|0;
  $84 = HEAP32[3144>>2]|0;
  $85 = (($84) + ($83<<2)|0);
  HEAP32[$85>>2] = $81;
  $86 = $l;
  $87 = (($86) + 12|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = ($89|0)>(8);
  if ($90) {
   $91 = $l;
   $92 = (($91) + 12|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = ($94|0)<(38);
   if ($95) {
    $96 = $l;
    $97 = HEAP32[3152>>2]|0;
    $98 = HEAP32[3144>>2]|0;
    $99 = (($98) + ($97<<2)|0);
    HEAP32[$99>>2] = $96;
    $100 = HEAP32[3152>>2]|0;
    $101 = (($100) + 1)|0;
    HEAP32[3152>>2] = $101;
    _eval();
    $102 = HEAP32[3152>>2]|0;
    $103 = (($102) - 1)|0;
    HEAP32[3152>>2] = $103;
   }
  }
 }
 if ((label|0) == 12) {
  $104 = HEAP32[2576>>2]|0;
  $105 = $copy;
  HEAP32[$105>>2] = $104;
  $106 = $l;
  $107 = $pair;
  $108 = (($107) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  HEAP32[$109>>2] = $106;
  STACKTOP = sp;return;
 }
 $104 = HEAP32[2576>>2]|0;
 $105 = $copy;
 HEAP32[$105>>2] = $104;
 $106 = $l;
 $107 = $pair;
 $108 = (($107) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 HEAP32[$109>>2] = $106;
 STACKTOP = sp;return;
}
function _applyTAKE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $l = 0, $temp = 0, $val_n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 2)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 1)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[8328>>2]|0;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_evalint($9,$12)|0);
 $val_n = $13;
 $14 = $val_n;
 $15 = ($14|0)<=(0);
 if ($15) {
  $16 = HEAP32[2576>>2]|0;
  $17 = HEAP32[3152>>2]|0;
  $18 = HEAP32[3144>>2]|0;
  $19 = (($18) + ($17<<2)|0);
  HEAP32[$19>>2] = $16;
  $20 = HEAP32[3152>>2]|0;
  $21 = (($20) + 1)|0;
  HEAP32[3152>>2] = $21;
  STACKTOP = sp;return;
 }
 $22 = $l;
 $23 = (($22) + 12|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = ($25|0)>(8);
 if ($26) {
  $27 = $l;
  $28 = (($27) + 12|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = ($30|0)<(38);
  if ($31) {
   $32 = $l;
   $33 = HEAP32[3152>>2]|0;
   $34 = HEAP32[3144>>2]|0;
   $35 = (($34) + ($33<<2)|0);
   HEAP32[$35>>2] = $32;
   $36 = HEAP32[3152>>2]|0;
   $37 = (($36) + 1)|0;
   HEAP32[3152>>2] = $37;
   _eval();
   $38 = HEAP32[3152>>2]|0;
   $39 = (($38) - 1)|0;
   HEAP32[3152>>2] = $39;
  }
 }
 $40 = $l;
 $41 = (($40) + 12|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ($43|0)!=(39);
 if ($44) {
  $45 = HEAP32[2576>>2]|0;
  $46 = HEAP32[3152>>2]|0;
  $47 = HEAP32[3144>>2]|0;
  $48 = (($47) + ($46<<2)|0);
  HEAP32[$48>>2] = $45;
  $49 = HEAP32[3152>>2]|0;
  $50 = (($49) + 1)|0;
  HEAP32[3152>>2] = $50;
 } else {
  $51 = (_newcell(39)|0);
  $temp = $51;
  $52 = HEAP32[3152>>2]|0;
  $53 = HEAP32[3144>>2]|0;
  $54 = (($53) + ($52<<2)|0);
  HEAP32[$54>>2] = $51;
  $55 = HEAP32[3152>>2]|0;
  $56 = (($55) + 1)|0;
  HEAP32[3152>>2] = $56;
  $57 = $l;
  $58 = HEAP32[$57>>2]|0;
  $59 = $temp;
  HEAP32[$59>>2] = $58;
  $60 = (_newcell(24)|0);
  $61 = $temp;
  $62 = (($61) + 4|0);
  HEAP32[$62>>2] = $60;
  $temp = $60;
  $63 = HEAP32[8328>>2]|0;
  $64 = (($63) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $temp;
  $67 = (($66) + 8|0);
  HEAP32[$67>>2] = $65;
  $68 = $l;
  $69 = (($68) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $temp;
  HEAP32[$71>>2] = $70;
  $72 = (_newcell(3)|0);
  $73 = $temp;
  $74 = (($73) + 4|0);
  HEAP32[$74>>2] = $72;
  $75 = $val_n;
  $76 = (($75) - 1)|0;
  $77 = $temp;
  $78 = (($77) + 4|0);
  $79 = HEAP32[$78>>2]|0;
  HEAP32[$79>>2] = $76;
 }
 STACKTOP = sp;return;
}
function _applyTAKEWHILE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $fun = 0, $l = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $fun = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l = $9;
 $10 = $l;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>(8);
 if ($14) {
  $15 = $l;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)<(38);
  if ($19) {
   $20 = $l;
   $21 = HEAP32[3152>>2]|0;
   $22 = HEAP32[3144>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[3152>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[3152>>2] = $25;
   _eval();
   $26 = HEAP32[3152>>2]|0;
   $27 = (($26) - 1)|0;
   HEAP32[3152>>2] = $27;
  }
 }
 $28 = $l;
 $29 = (($28) + 12|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)!=(39);
 if ($32) {
  $33 = HEAP32[2576>>2]|0;
  $34 = HEAP32[3152>>2]|0;
  $35 = HEAP32[3144>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  HEAP32[$36>>2] = $33;
  $37 = HEAP32[3152>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[3152>>2] = $38;
  STACKTOP = sp;return;
 }
 $39 = (_newcell(22)|0);
 $temp = $39;
 $40 = HEAP32[3152>>2]|0;
 $41 = HEAP32[3144>>2]|0;
 $42 = (($41) + ($40<<2)|0);
 HEAP32[$42>>2] = $39;
 $43 = HEAP32[3152>>2]|0;
 $44 = (($43) + 1)|0;
 HEAP32[3152>>2] = $44;
 $45 = $fun;
 $46 = $temp;
 HEAP32[$46>>2] = $45;
 $47 = $l;
 $48 = HEAP32[$47>>2]|0;
 $49 = $temp;
 $50 = (($49) + 4|0);
 HEAP32[$50>>2] = $48;
 _eval();
 $51 = HEAP32[3152>>2]|0;
 $52 = (($51) + -1)|0;
 HEAP32[3152>>2] = $52;
 $53 = HEAP32[3144>>2]|0;
 $54 = (($53) + ($52<<2)|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)!=(0);
 if ($58) {
  $59 = (_newcell(39)|0);
  $temp = $59;
  $60 = HEAP32[3152>>2]|0;
  $61 = HEAP32[3144>>2]|0;
  $62 = (($61) + ($60<<2)|0);
  HEAP32[$62>>2] = $59;
  $63 = HEAP32[3152>>2]|0;
  $64 = (($63) + 1)|0;
  HEAP32[3152>>2] = $64;
  $65 = $l;
  $66 = HEAP32[$65>>2]|0;
  $67 = $temp;
  HEAP32[$67>>2] = $66;
  $68 = (_newcell(24)|0);
  $69 = $temp;
  $70 = (($69) + 4|0);
  HEAP32[$70>>2] = $68;
  $temp = $68;
  $71 = HEAP32[8336>>2]|0;
  $72 = (($71) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $temp;
  $75 = (($74) + 8|0);
  HEAP32[$75>>2] = $73;
  $76 = $l;
  $77 = (($76) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $temp;
  HEAP32[$79>>2] = $78;
  $80 = $fun;
  $81 = $temp;
  $82 = (($81) + 4|0);
  HEAP32[$82>>2] = $80;
 } else {
  $83 = HEAP32[2576>>2]|0;
  $84 = HEAP32[3152>>2]|0;
  $85 = HEAP32[3144>>2]|0;
  $86 = (($85) + ($84<<2)|0);
  HEAP32[$86>>2] = $83;
  $87 = HEAP32[3152>>2]|0;
  $88 = (($87) + 1)|0;
  HEAP32[3152>>2] = $88;
 }
 STACKTOP = sp;return;
}
function _applyZIP2() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $l1 = 0, $l2 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l1 = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l2 = $9;
 $10 = $l1;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>(8);
 if ($14) {
  $15 = $l1;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)<(38);
  if ($19) {
   $20 = $l1;
   $21 = HEAP32[3152>>2]|0;
   $22 = HEAP32[3144>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[3152>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[3152>>2] = $25;
   _eval();
   $26 = HEAP32[3152>>2]|0;
   $27 = (($26) - 1)|0;
   HEAP32[3152>>2] = $27;
  }
 }
 $28 = $l2;
 $29 = (($28) + 12|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)>(8);
 if ($32) {
  $33 = $l2;
  $34 = (($33) + 12|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($36|0)<(38);
  if ($37) {
   $38 = $l2;
   $39 = HEAP32[3152>>2]|0;
   $40 = HEAP32[3144>>2]|0;
   $41 = (($40) + ($39<<2)|0);
   HEAP32[$41>>2] = $38;
   $42 = HEAP32[3152>>2]|0;
   $43 = (($42) + 1)|0;
   HEAP32[3152>>2] = $43;
   _eval();
   $44 = HEAP32[3152>>2]|0;
   $45 = (($44) - 1)|0;
   HEAP32[3152>>2] = $45;
  }
 }
 $46 = $l1;
 $47 = (($46) + 12|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = ($49|0)!=(39);
 if (!($50)) {
  $51 = $l2;
  $52 = (($51) + 12|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)!=(39);
  if (!($55)) {
   $62 = (_newcell(39)|0);
   $temp = $62;
   $63 = HEAP32[3152>>2]|0;
   $64 = HEAP32[3144>>2]|0;
   $65 = (($64) + ($63<<2)|0);
   HEAP32[$65>>2] = $62;
   $66 = HEAP32[3152>>2]|0;
   $67 = (($66) + 1)|0;
   HEAP32[3152>>2] = $67;
   $68 = (_newcell(24)|0);
   $69 = $temp;
   $70 = (($69) + 4|0);
   HEAP32[$70>>2] = $68;
   $71 = HEAP32[8344>>2]|0;
   $72 = (($71) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $temp;
   $75 = (($74) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + 8|0);
   HEAP32[$77>>2] = $73;
   $78 = $l2;
   $79 = (($78) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $temp;
   $82 = (($81) + 4|0);
   $83 = HEAP32[$82>>2]|0;
   HEAP32[$83>>2] = $80;
   $84 = $l1;
   $85 = (($84) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $temp;
   $88 = (($87) + 4|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + 4|0);
   HEAP32[$90>>2] = $86;
   $91 = (_newcell(41)|0);
   $92 = $temp;
   HEAP32[$92>>2] = $91;
   $temp = $91;
   $93 = $temp;
   $94 = (($93) + 8|0);
   HEAP32[$94>>2] = 2;
   $95 = $l1;
   $96 = HEAP32[$95>>2]|0;
   $97 = $temp;
   HEAP32[$97>>2] = $96;
   $98 = (_newcell(41)|0);
   $99 = $temp;
   $100 = (($99) + 4|0);
   HEAP32[$100>>2] = $98;
   $temp = $98;
   $101 = $l2;
   $102 = HEAP32[$101>>2]|0;
   $103 = $temp;
   HEAP32[$103>>2] = $102;
   $104 = HEAP32[2968>>2]|0;
   $105 = $temp;
   $106 = (($105) + 4|0);
   HEAP32[$106>>2] = $104;
   STACKTOP = sp;return;
  }
 }
 $56 = HEAP32[2576>>2]|0;
 $57 = HEAP32[3152>>2]|0;
 $58 = HEAP32[3144>>2]|0;
 $59 = (($58) + ($57<<2)|0);
 HEAP32[$59>>2] = $56;
 $60 = HEAP32[3152>>2]|0;
 $61 = (($60) + 1)|0;
 HEAP32[3152>>2] = $61;
 STACKTOP = sp;return;
}
function _applyZIP3() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $l1 = 0, $l2 = 0, $l3 = 0, $temp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l1 = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l2 = $9;
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) - 3)|0;
 $12 = HEAP32[3144>>2]|0;
 $13 = (($12) + ($11<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $l3 = $14;
 $15 = $l1;
 $16 = (($15) + 12|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)>(8);
 if ($19) {
  $20 = $l1;
  $21 = (($20) + 12|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)<(38);
  if ($24) {
   $25 = $l1;
   $26 = HEAP32[3152>>2]|0;
   $27 = HEAP32[3144>>2]|0;
   $28 = (($27) + ($26<<2)|0);
   HEAP32[$28>>2] = $25;
   $29 = HEAP32[3152>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[3152>>2] = $30;
   _eval();
   $31 = HEAP32[3152>>2]|0;
   $32 = (($31) - 1)|0;
   HEAP32[3152>>2] = $32;
  }
 }
 $33 = $l2;
 $34 = (($33) + 12|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = ($36|0)>(8);
 if ($37) {
  $38 = $l2;
  $39 = (($38) + 12|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = ($41|0)<(38);
  if ($42) {
   $43 = $l2;
   $44 = HEAP32[3152>>2]|0;
   $45 = HEAP32[3144>>2]|0;
   $46 = (($45) + ($44<<2)|0);
   HEAP32[$46>>2] = $43;
   $47 = HEAP32[3152>>2]|0;
   $48 = (($47) + 1)|0;
   HEAP32[3152>>2] = $48;
   _eval();
   $49 = HEAP32[3152>>2]|0;
   $50 = (($49) - 1)|0;
   HEAP32[3152>>2] = $50;
  }
 }
 $51 = $l3;
 $52 = (($51) + 12|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = ($54|0)>(8);
 if ($55) {
  $56 = $l3;
  $57 = (($56) + 12|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = ($59|0)<(38);
  if ($60) {
   $61 = $l3;
   $62 = HEAP32[3152>>2]|0;
   $63 = HEAP32[3144>>2]|0;
   $64 = (($63) + ($62<<2)|0);
   HEAP32[$64>>2] = $61;
   $65 = HEAP32[3152>>2]|0;
   $66 = (($65) + 1)|0;
   HEAP32[3152>>2] = $66;
   _eval();
   $67 = HEAP32[3152>>2]|0;
   $68 = (($67) - 1)|0;
   HEAP32[3152>>2] = $68;
  }
 }
 $69 = $l1;
 $70 = (($69) + 12|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = ($72|0)!=(39);
 if (!($73)) {
  $74 = $l2;
  $75 = (($74) + 12|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = ($77|0)!=(39);
  if (!($78)) {
   $79 = $l3;
   $80 = (($79) + 12|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = ($82|0)!=(39);
   if (!($83)) {
    $90 = (_newcell(39)|0);
    $temp = $90;
    $91 = HEAP32[3152>>2]|0;
    $92 = HEAP32[3144>>2]|0;
    $93 = (($92) + ($91<<2)|0);
    HEAP32[$93>>2] = $90;
    $94 = HEAP32[3152>>2]|0;
    $95 = (($94) + 1)|0;
    HEAP32[3152>>2] = $95;
    $96 = (_newcell(24)|0);
    $97 = $temp;
    $98 = (($97) + 4|0);
    HEAP32[$98>>2] = $96;
    $99 = HEAP32[8352>>2]|0;
    $100 = (($99) + 8|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $temp;
    $103 = (($102) + 4|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + 8|0);
    HEAP32[$105>>2] = $101;
    $106 = $l3;
    $107 = (($106) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = $temp;
    $110 = (($109) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    HEAP32[$111>>2] = $108;
    $112 = (_newcell(24)|0);
    $113 = $temp;
    $114 = (($113) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($115) + 4|0);
    HEAP32[$116>>2] = $112;
    $117 = $l2;
    $118 = (($117) + 4|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $temp;
    $121 = (($120) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($122) + 4|0);
    $124 = HEAP32[$123>>2]|0;
    HEAP32[$124>>2] = $119;
    $125 = $l1;
    $126 = (($125) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $temp;
    $129 = (($128) + 4|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = (($130) + 4|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + 4|0);
    HEAP32[$133>>2] = $127;
    $134 = (_newcell(41)|0);
    $135 = $temp;
    HEAP32[$135>>2] = $134;
    $temp = $134;
    $136 = $temp;
    $137 = (($136) + 8|0);
    HEAP32[$137>>2] = 3;
    $138 = $l1;
    $139 = HEAP32[$138>>2]|0;
    $140 = $temp;
    HEAP32[$140>>2] = $139;
    $141 = (_newcell(41)|0);
    $142 = $temp;
    $143 = (($142) + 4|0);
    HEAP32[$143>>2] = $141;
    $temp = $141;
    $144 = $l2;
    $145 = HEAP32[$144>>2]|0;
    $146 = $temp;
    HEAP32[$146>>2] = $145;
    $147 = (_newcell(41)|0);
    $148 = $temp;
    $149 = (($148) + 4|0);
    HEAP32[$149>>2] = $147;
    $temp = $147;
    $150 = $l3;
    $151 = HEAP32[$150>>2]|0;
    $152 = $temp;
    HEAP32[$152>>2] = $151;
    $153 = HEAP32[2968>>2]|0;
    $154 = $temp;
    $155 = (($154) + 4|0);
    HEAP32[$155>>2] = $153;
    STACKTOP = sp;return;
   }
  }
 }
 $84 = HEAP32[2576>>2]|0;
 $85 = HEAP32[3152>>2]|0;
 $86 = HEAP32[3144>>2]|0;
 $87 = (($86) + ($85<<2)|0);
 HEAP32[$87>>2] = $84;
 $88 = HEAP32[3152>>2]|0;
 $89 = (($88) + 1)|0;
 HEAP32[3152>>2] = $89;
 STACKTOP = sp;return;
}
function _applyZIP() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $arg1 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $arg1 = $4;
 $5 = $arg1;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(8);
 if ($9) {
  $10 = $arg1;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)<(38);
  if ($14) {
   $15 = $arg1;
   $16 = HEAP32[3152>>2]|0;
   $17 = HEAP32[3144>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $15;
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[3152>>2] = $20;
   _eval();
   $21 = HEAP32[3152>>2]|0;
   $22 = (($21) - 1)|0;
   HEAP32[3152>>2] = $22;
  }
 }
 $23 = (_newcell(24)|0);
 $temp = $23;
 $24 = HEAP32[3152>>2]|0;
 $25 = HEAP32[3144>>2]|0;
 $26 = (($25) + ($24<<2)|0);
 HEAP32[$26>>2] = $23;
 $27 = HEAP32[3152>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[3152>>2] = $28;
 $29 = HEAP32[8344>>2]|0;
 $30 = (($29) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $temp;
 $33 = (($32) + 8|0);
 HEAP32[$33>>2] = $31;
 $34 = $arg1;
 $35 = (($34) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $38 = $temp;
 HEAP32[$38>>2] = $37;
 $39 = $arg1;
 $40 = HEAP32[$39>>2]|0;
 $41 = $temp;
 $42 = (($41) + 4|0);
 HEAP32[$42>>2] = $40;
 STACKTOP = sp;return;
}
function _applyCOMPOSE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_newcell(22)|0);
 $temp = $0;
 $1 = HEAP32[3152>>2]|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 HEAP32[$3>>2] = $0;
 $4 = HEAP32[3152>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[3152>>2] = $5;
 $6 = HEAP32[3152>>2]|0;
 $7 = (($6) - 2)|0;
 $8 = HEAP32[3144>>2]|0;
 $9 = (($8) + ($7<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $temp;
 HEAP32[$11>>2] = $10;
 $12 = (_newcell(22)|0);
 $13 = $temp;
 $14 = (($13) + 4|0);
 HEAP32[$14>>2] = $12;
 $temp = $12;
 $15 = HEAP32[3152>>2]|0;
 $16 = (($15) - 3)|0;
 $17 = HEAP32[3144>>2]|0;
 $18 = (($17) + ($16<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $temp;
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[3152>>2]|0;
 $22 = (($21) - 4)|0;
 $23 = HEAP32[3144>>2]|0;
 $24 = (($23) + ($22<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $temp;
 $27 = (($26) + 4|0);
 HEAP32[$27>>2] = $25;
 STACKTOP = sp;return;
}
function _applyCONS() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = (_newcell(39)|0);
 $temp = $0;
 $1 = HEAP32[3152>>2]|0;
 $2 = (($1) - 1)|0;
 $3 = HEAP32[3144>>2]|0;
 $4 = (($3) + ($2<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $temp;
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[3152>>2]|0;
 $8 = (($7) - 2)|0;
 $9 = HEAP32[3144>>2]|0;
 $10 = (($9) + ($8<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $temp;
 $13 = (($12) + 4|0);
 HEAP32[$13>>2] = $11;
 $14 = $temp;
 $15 = HEAP32[3152>>2]|0;
 $16 = HEAP32[3144>>2]|0;
 $17 = (($16) + ($15<<2)|0);
 HEAP32[$17>>2] = $14;
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[3152>>2] = $19;
 STACKTOP = sp;return;
}
function _applyINDEX() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $count = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[8160>>2]|0;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_evalint($9,$12)|0);
 $count = $13;
 $14 = $count;
 $15 = ($14|0)<(0);
 if ($15) {
  $16 = HEAP32[8160>>2]|0;
  $17 = (($16) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  _runtimeerror(13,$18);
 }
 $19 = $l;
 $20 = (($19) + 12|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = ($22|0)>(8);
 if ($23) {
  $24 = $l;
  $25 = (($24) + 12|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = ($27|0)<(38);
  if ($28) {
   $29 = $l;
   $30 = HEAP32[3152>>2]|0;
   $31 = HEAP32[3144>>2]|0;
   $32 = (($31) + ($30<<2)|0);
   HEAP32[$32>>2] = $29;
   $33 = HEAP32[3152>>2]|0;
   $34 = (($33) + 1)|0;
   HEAP32[3152>>2] = $34;
   _eval();
   $35 = HEAP32[3152>>2]|0;
   $36 = (($35) - 1)|0;
   HEAP32[3152>>2] = $36;
  }
 }
 while(1) {
  $37 = $count;
  $38 = (($37) + -1)|0;
  $count = $38;
  $39 = ($37|0)>(0);
  if ($39) {
   $40 = $l;
   $41 = (($40) + 12|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = ($43|0)==(39);
   $85 = $44;
  } else {
   $85 = 0;
  }
  if (!($85)) {
   break;
  }
  $45 = $l;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $l = $47;
  $48 = HEAP32[3152>>2]|0;
  $49 = (($48) - 1)|0;
  $50 = HEAP32[3144>>2]|0;
  $51 = (($50) + ($49<<2)|0);
  HEAP32[$51>>2] = $47;
  $52 = $l;
  $53 = (($52) + 12|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = ($55|0)>(8);
  if ($56) {
   $57 = $l;
   $58 = (($57) + 12|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = ($60|0)<(38);
   if ($61) {
    $62 = $l;
    $63 = HEAP32[3152>>2]|0;
    $64 = HEAP32[3144>>2]|0;
    $65 = (($64) + ($63<<2)|0);
    HEAP32[$65>>2] = $62;
    $66 = HEAP32[3152>>2]|0;
    $67 = (($66) + 1)|0;
    HEAP32[3152>>2] = $67;
    _eval();
    $68 = HEAP32[3152>>2]|0;
    $69 = (($68) - 1)|0;
    HEAP32[3152>>2] = $69;
   }
  }
 }
 $70 = $l;
 $71 = (($70) + 12|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = ($73|0)!=(39);
 if (!($74)) {
  $78 = $l;
  $79 = HEAP32[$78>>2]|0;
  $80 = HEAP32[3152>>2]|0;
  $81 = HEAP32[3144>>2]|0;
  $82 = (($81) + ($80<<2)|0);
  HEAP32[$82>>2] = $79;
  $83 = HEAP32[3152>>2]|0;
  $84 = (($83) + 1)|0;
  HEAP32[3152>>2] = $84;
  _eval();
  STACKTOP = sp;return;
 }
 $75 = HEAP32[8160>>2]|0;
 $76 = (($75) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 _runtimeerror(39,$77);
 $78 = $l;
 $79 = HEAP32[$78>>2]|0;
 $80 = HEAP32[3152>>2]|0;
 $81 = HEAP32[3144>>2]|0;
 $82 = (($81) + ($80<<2)|0);
 HEAP32[$82>>2] = $79;
 $83 = HEAP32[3152>>2]|0;
 $84 = (($83) + 1)|0;
 HEAP32[3152>>2] = $84;
 _eval();
 STACKTOP = sp;return;
}
function _applyAPPEND() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $l1 = 0, $l2 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l1 = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l2 = $9;
 $10 = $l1;
 $11 = (($10) + 12|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)>(8);
 if ($14) {
  $15 = $l1;
  $16 = (($15) + 12|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)<(38);
  if ($19) {
   $20 = $l1;
   $21 = HEAP32[3152>>2]|0;
   $22 = HEAP32[3144>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[3152>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[3152>>2] = $25;
   _eval();
   $26 = HEAP32[3152>>2]|0;
   $27 = (($26) - 1)|0;
   HEAP32[3152>>2] = $27;
  }
 }
 $28 = $l1;
 $29 = (($28) + 12|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)!=(39);
 if ($32) {
  $33 = $l2;
  $34 = HEAP32[3152>>2]|0;
  $35 = HEAP32[3144>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  HEAP32[$36>>2] = $33;
  $37 = HEAP32[3152>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[3152>>2] = $38;
  _eval();
  STACKTOP = sp;return;
 } else {
  $39 = (_newcell(39)|0);
  $temp = $39;
  $40 = HEAP32[3152>>2]|0;
  $41 = HEAP32[3144>>2]|0;
  $42 = (($41) + ($40<<2)|0);
  HEAP32[$42>>2] = $39;
  $43 = HEAP32[3152>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[3152>>2] = $44;
  $45 = $l1;
  $46 = HEAP32[$45>>2]|0;
  $47 = $temp;
  HEAP32[$47>>2] = $46;
  $48 = (_newcell(24)|0);
  $49 = $temp;
  $50 = (($49) + 4|0);
  HEAP32[$50>>2] = $48;
  $temp = $48;
  $51 = HEAP32[8208>>2]|0;
  $52 = (($51) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $temp;
  $55 = (($54) + 8|0);
  HEAP32[$55>>2] = $53;
  $56 = $l2;
  $57 = $temp;
  HEAP32[$57>>2] = $56;
  $58 = $l1;
  $59 = (($58) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $temp;
  $62 = (($61) + 4|0);
  HEAP32[$62>>2] = $60;
  STACKTOP = sp;return;
 }
}
function _applyREMOVE() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $copy = 0, $l1 = 0, $l2 = 0, $lastcopy = 0, $remove = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l1 = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l2 = $9;
 $lastcopy = 0;
 while(1) {
  $10 = $l1;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)>(8);
  if ($14) {
   $15 = $l1;
   $16 = (($15) + 12|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = ($18|0)<(38);
   if ($19) {
    $20 = $l1;
    $21 = HEAP32[3152>>2]|0;
    $22 = HEAP32[3144>>2]|0;
    $23 = (($22) + ($21<<2)|0);
    HEAP32[$23>>2] = $20;
    $24 = HEAP32[3152>>2]|0;
    $25 = (($24) + 1)|0;
    HEAP32[3152>>2] = $25;
    _eval();
    $26 = HEAP32[3152>>2]|0;
    $27 = (($26) - 1)|0;
    HEAP32[3152>>2] = $27;
   }
  }
  $28 = $l1;
  $29 = (($28) + 12|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($31|0)!=(39);
  if ($32) {
   label = 6;
   break;
  }
  $39 = $l2;
  $40 = (($39) + 12|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = ($42|0)>(8);
  if ($43) {
   $44 = $l2;
   $45 = (($44) + 12|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = ($47|0)<(38);
   if ($48) {
    $49 = $l2;
    $50 = HEAP32[3152>>2]|0;
    $51 = HEAP32[3144>>2]|0;
    $52 = (($51) + ($50<<2)|0);
    HEAP32[$52>>2] = $49;
    $53 = HEAP32[3152>>2]|0;
    $54 = (($53) + 1)|0;
    HEAP32[3152>>2] = $54;
    _eval();
    $55 = HEAP32[3152>>2]|0;
    $56 = (($55) - 1)|0;
    HEAP32[3152>>2] = $56;
   }
  }
  $57 = $l2;
  $58 = (($57) + 12|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = ($60|0)!=(39);
  if ($61) {
   label = 11;
   break;
  }
  $68 = $l2;
  $remove = $68;
  while(1) {
   $69 = $remove;
   $70 = (($69) + 12|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = ($72|0)==(39);
   if ($73) {
    $74 = $remove;
    $75 = HEAP32[$74>>2]|0;
    $76 = $l1;
    $77 = HEAP32[$76>>2]|0;
    $78 = (_comparecell($75,$77)|0);
    $79 = ($78|0)!=(0);
    $227 = $79;
   } else {
    $227 = 0;
   }
   if (!($227)) {
    break;
   }
   $80 = $remove;
   $81 = (($80) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $remove = $82;
   $83 = $remove;
   $84 = (($83) + 12|0);
   $85 = HEAP8[$84>>0]|0;
   $86 = $85&255;
   $87 = ($86|0)>(8);
   if ($87) {
    $88 = $remove;
    $89 = (($88) + 12|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $90&255;
    $92 = ($91|0)<(38);
    if ($92) {
     $93 = $remove;
     $94 = HEAP32[3152>>2]|0;
     $95 = HEAP32[3144>>2]|0;
     $96 = (($95) + ($94<<2)|0);
     HEAP32[$96>>2] = $93;
     $97 = HEAP32[3152>>2]|0;
     $98 = (($97) + 1)|0;
     HEAP32[3152>>2] = $98;
     _eval();
     $99 = HEAP32[3152>>2]|0;
     $100 = (($99) - 1)|0;
     HEAP32[3152>>2] = $100;
    }
   }
  }
  $101 = $remove;
  $102 = (($101) + 12|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = ($104|0)!=(39);
  if ($105) {
   label = 21;
   break;
  }
  $130 = $remove;
  $131 = $l2;
  $132 = ($130|0)==($131|0);
  if ($132) {
   $133 = $l1;
   $134 = (($133) + 4|0);
   $135 = HEAP32[$134>>2]|0;
   $l1 = $135;
   $136 = HEAP32[3152>>2]|0;
   $137 = (($136) - 1)|0;
   $138 = HEAP32[3144>>2]|0;
   $139 = (($138) + ($137<<2)|0);
   HEAP32[$139>>2] = $135;
   $140 = $l2;
   $141 = (($140) + 4|0);
   $142 = HEAP32[$141>>2]|0;
   $l2 = $142;
   $143 = HEAP32[3152>>2]|0;
   $144 = (($143) - 2)|0;
   $145 = HEAP32[3144>>2]|0;
   $146 = (($145) + ($144<<2)|0);
   HEAP32[$146>>2] = $142;
   $147 = $lastcopy;
   $148 = $remove;
   $149 = ($147|0)==($148|0);
   if ($149) {
    $lastcopy = 0;
   }
  } else {
   $150 = $lastcopy;
   $151 = ($150|0)!=(0|0);
   if ($151) {
    $152 = $l1;
    $153 = (($152) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $l1 = $154;
    $155 = HEAP32[3152>>2]|0;
    $156 = (($155) - 1)|0;
    $157 = HEAP32[3144>>2]|0;
    $158 = (($157) + ($156<<2)|0);
    HEAP32[$158>>2] = $154;
    $159 = $l2;
    $copy = $159;
    while(1) {
     $160 = $copy;
     $161 = (($160) + 4|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $remove;
     $164 = ($162|0)!=($163|0);
     if ($164) {
      $165 = $copy;
      $166 = $lastcopy;
      $167 = ($165|0)!=($166|0);
      $228 = $167;
     } else {
      $228 = 0;
     }
     if (!($228)) {
      break;
     }
     $168 = $copy;
     $169 = (($168) + 4|0);
     $170 = HEAP32[$169>>2]|0;
     $copy = $170;
    }
    while(1) {
     $171 = $copy;
     $172 = (($171) + 4|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = $remove;
     $175 = ($173|0)!=($174|0);
     if (!($175)) {
      break;
     }
     $176 = (_newcell(39)|0);
     $lastcopy = $176;
     $177 = $lastcopy;
     $178 = $copy;
     $179 = (($178) + 4|0);
     $180 = HEAP32[$179>>2]|0;
     ;HEAP32[$177+0>>2]=HEAP32[$180+0>>2]|0;HEAP32[$177+4>>2]=HEAP32[$180+4>>2]|0;HEAP32[$177+8>>2]=HEAP32[$180+8>>2]|0;HEAP32[$177+12>>2]=HEAP32[$180+12>>2]|0;
     $181 = $lastcopy;
     $182 = $copy;
     $183 = (($182) + 4|0);
     HEAP32[$183>>2] = $181;
     $copy = $181;
    }
    $184 = $lastcopy;
    $185 = $remove;
    $186 = ($184|0)==($185|0);
    if ($186) {
     $187 = $copy;
     $lastcopy = $187;
    }
    $188 = $remove;
    $189 = (($188) + 4|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = $copy;
    $192 = (($191) + 4|0);
    HEAP32[$192>>2] = $190;
   } else {
    $193 = (_newcell(39)|0);
    $lastcopy = $193;
    $194 = $lastcopy;
    $195 = $l2;
    ;HEAP32[$194+0>>2]=HEAP32[$195+0>>2]|0;HEAP32[$194+4>>2]=HEAP32[$195+4>>2]|0;HEAP32[$194+8>>2]=HEAP32[$195+8>>2]|0;HEAP32[$194+12>>2]=HEAP32[$195+12>>2]|0;
    $196 = $l1;
    $197 = (($196) + 4|0);
    $198 = HEAP32[$197>>2]|0;
    $l1 = $198;
    $199 = HEAP32[3152>>2]|0;
    $200 = (($199) - 1)|0;
    $201 = HEAP32[3144>>2]|0;
    $202 = (($201) + ($200<<2)|0);
    HEAP32[$202>>2] = $198;
    $203 = $lastcopy;
    $l2 = $203;
    $204 = HEAP32[3152>>2]|0;
    $205 = (($204) - 2)|0;
    $206 = HEAP32[3144>>2]|0;
    $207 = (($206) + ($205<<2)|0);
    HEAP32[$207>>2] = $203;
    $208 = $l2;
    $copy = $208;
    while(1) {
     $209 = $copy;
     $210 = (($209) + 4|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $remove;
     $213 = ($211|0)!=($212|0);
     if (!($213)) {
      break;
     }
     $214 = (_newcell(39)|0);
     $lastcopy = $214;
     $215 = $lastcopy;
     $216 = $copy;
     $217 = (($216) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     ;HEAP32[$215+0>>2]=HEAP32[$218+0>>2]|0;HEAP32[$215+4>>2]=HEAP32[$218+4>>2]|0;HEAP32[$215+8>>2]=HEAP32[$218+8>>2]|0;HEAP32[$215+12>>2]=HEAP32[$218+12>>2]|0;
     $219 = $lastcopy;
     $220 = $copy;
     $221 = (($220) + 4|0);
     HEAP32[$221>>2] = $219;
     $copy = $219;
    }
    $222 = $remove;
    $223 = (($222) + 4|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = $copy;
    $226 = (($225) + 4|0);
    HEAP32[$226>>2] = $224;
   }
  }
 }
 if ((label|0) == 6) {
  $33 = $l1;
  $34 = HEAP32[3152>>2]|0;
  $35 = HEAP32[3144>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  HEAP32[$36>>2] = $33;
  $37 = HEAP32[3152>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[3152>>2] = $38;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 11) {
  $62 = $l1;
  $63 = HEAP32[3152>>2]|0;
  $64 = HEAP32[3144>>2]|0;
  $65 = (($64) + ($63<<2)|0);
  HEAP32[$65>>2] = $62;
  $66 = HEAP32[3152>>2]|0;
  $67 = (($66) + 1)|0;
  HEAP32[3152>>2] = $67;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 21) {
  $106 = (_newcell(39)|0);
  $temp = $106;
  $107 = HEAP32[3152>>2]|0;
  $108 = HEAP32[3144>>2]|0;
  $109 = (($108) + ($107<<2)|0);
  HEAP32[$109>>2] = $106;
  $110 = HEAP32[3152>>2]|0;
  $111 = (($110) + 1)|0;
  HEAP32[3152>>2] = $111;
  $112 = $l1;
  $113 = HEAP32[$112>>2]|0;
  $114 = $temp;
  HEAP32[$114>>2] = $113;
  $115 = (_newcell(24)|0);
  $116 = $temp;
  $117 = (($116) + 4|0);
  HEAP32[$117>>2] = $115;
  $temp = $115;
  $118 = HEAP32[8312>>2]|0;
  $119 = (($118) + 8|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $temp;
  $122 = (($121) + 8|0);
  HEAP32[$122>>2] = $120;
  $123 = $l2;
  $124 = $temp;
  HEAP32[$124>>2] = $123;
  $125 = $l1;
  $126 = (($125) + 4|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $temp;
  $129 = (($128) + 4|0);
  HEAP32[$129>>2] = $127;
  STACKTOP = sp;return;
 }
}
function _apply_AND() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)>(8);
 if ($8) {
  $9 = HEAP32[3152>>2]|0;
  $10 = (($9) - 1)|0;
  $11 = HEAP32[3144>>2]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 12|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)<(38);
  if ($17) {
   _eval();
  }
 }
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) - 1)|0;
 $20 = HEAP32[3144>>2]|0;
 $21 = (($20) + ($19<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $54 = HEAP32[2952>>2]|0;
  $55 = HEAP32[3152>>2]|0;
  $56 = HEAP32[3144>>2]|0;
  $57 = (($56) + ($55<<2)|0);
  HEAP32[$57>>2] = $54;
  $58 = HEAP32[3152>>2]|0;
  $59 = (($58) + 1)|0;
  HEAP32[3152>>2] = $59;
  return;
 }
 $26 = HEAP32[3152>>2]|0;
 $27 = (($26) - 2)|0;
 $28 = HEAP32[3144>>2]|0;
 $29 = (($28) + ($27<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[3152>>2]|0;
 $32 = HEAP32[3144>>2]|0;
 $33 = (($32) + ($31<<2)|0);
 HEAP32[$33>>2] = $30;
 $34 = HEAP32[3152>>2]|0;
 $35 = (($34) + 1)|0;
 HEAP32[3152>>2] = $35;
 $36 = HEAP32[3152>>2]|0;
 $37 = (($36) - 1)|0;
 $38 = HEAP32[3144>>2]|0;
 $39 = (($38) + ($37<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + 12|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ($43|0)>(8);
 if ($44) {
  $45 = HEAP32[3152>>2]|0;
  $46 = (($45) - 1)|0;
  $47 = HEAP32[3144>>2]|0;
  $48 = (($47) + ($46<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 12|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = ($52|0)<(38);
  if ($53) {
   _eval();
  }
 }
 return;
}
function _apply_OR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)>(8);
 if ($8) {
  $9 = HEAP32[3152>>2]|0;
  $10 = (($9) - 1)|0;
  $11 = HEAP32[3144>>2]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 12|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)<(38);
  if ($17) {
   _eval();
  }
 }
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) - 1)|0;
 $20 = HEAP32[3144>>2]|0;
 $21 = (($20) + ($19<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = HEAP32[2944>>2]|0;
  $27 = HEAP32[3152>>2]|0;
  $28 = HEAP32[3144>>2]|0;
  $29 = (($28) + ($27<<2)|0);
  HEAP32[$29>>2] = $26;
  $30 = HEAP32[3152>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[3152>>2] = $31;
  return;
 }
 $32 = HEAP32[3152>>2]|0;
 $33 = (($32) - 2)|0;
 $34 = HEAP32[3144>>2]|0;
 $35 = (($34) + ($33<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[3152>>2]|0;
 $38 = HEAP32[3144>>2]|0;
 $39 = (($38) + ($37<<2)|0);
 HEAP32[$39>>2] = $36;
 $40 = HEAP32[3152>>2]|0;
 $41 = (($40) + 1)|0;
 HEAP32[3152>>2] = $41;
 $42 = HEAP32[3152>>2]|0;
 $43 = (($42) - 1)|0;
 $44 = HEAP32[3144>>2]|0;
 $45 = (($44) + ($43<<2)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 12|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = ($49|0)>(8);
 if ($50) {
  $51 = HEAP32[3152>>2]|0;
  $52 = (($51) - 1)|0;
  $53 = HEAP32[3144>>2]|0;
  $54 = (($53) + ($52<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 12|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = ($58|0)<(38);
  if ($59) {
   _eval();
  }
 }
 return;
}
function _applyLENGTH() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = 0;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 $5 = $l;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(8);
 if ($9) {
  $10 = $l;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)<(38);
  if ($14) {
   $15 = $l;
   $16 = HEAP32[3152>>2]|0;
   $17 = HEAP32[3144>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $15;
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[3152>>2] = $20;
   _eval();
   $21 = HEAP32[3152>>2]|0;
   $22 = (($21) - 1)|0;
   HEAP32[3152>>2] = $22;
  }
 }
 while(1) {
  $23 = $l;
  $24 = (($23) + 12|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = ($26|0)==(39);
  if (!($27)) {
   break;
  }
  $28 = $count;
  $29 = (($28) + 1)|0;
  $count = $29;
  $30 = $l;
  $31 = (($30) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $l = $32;
  $33 = HEAP32[3152>>2]|0;
  $34 = (($33) - 1)|0;
  $35 = HEAP32[3144>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  HEAP32[$36>>2] = $32;
  $37 = $l;
  $38 = (($37) + 12|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = ($40|0)>(8);
  if ($41) {
   $42 = $l;
   $43 = (($42) + 12|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = ($45|0)<(38);
   if ($46) {
    $47 = $l;
    $48 = HEAP32[3152>>2]|0;
    $49 = HEAP32[3144>>2]|0;
    $50 = (($49) + ($48<<2)|0);
    HEAP32[$50>>2] = $47;
    $51 = HEAP32[3152>>2]|0;
    $52 = (($51) + 1)|0;
    HEAP32[3152>>2] = $52;
    _eval();
    $53 = HEAP32[3152>>2]|0;
    $54 = (($53) - 1)|0;
    HEAP32[3152>>2] = $54;
   }
  }
 }
 $55 = (_newcell(3)|0);
 $56 = HEAP32[3152>>2]|0;
 $57 = HEAP32[3144>>2]|0;
 $58 = (($57) + ($56<<2)|0);
 HEAP32[$58>>2] = $55;
 $59 = HEAP32[3152>>2]|0;
 $60 = (($59) + 1)|0;
 HEAP32[3152>>2] = $60;
 $61 = $count;
 $62 = HEAP32[3152>>2]|0;
 $63 = (($62) - 1)|0;
 $64 = HEAP32[3144>>2]|0;
 $65 = (($64) + ($63<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$66>>2] = $61;
 STACKTOP = sp;return;
}
function _apply_NOT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)>(8);
 if ($8) {
  $9 = HEAP32[3152>>2]|0;
  $10 = (($9) - 1)|0;
  $11 = HEAP32[3144>>2]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 12|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)<(38);
  if ($17) {
   _eval();
  }
 }
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) - 1)|0;
 $20 = HEAP32[3144>>2]|0;
 $21 = (($20) + ($19<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = HEAP32[2952>>2]|0;
  $31 = $26;
 } else {
  $27 = HEAP32[2944>>2]|0;
  $31 = $27;
 }
 $28 = HEAP32[3152>>2]|0;
 $29 = HEAP32[3144>>2]|0;
 $30 = (($29) + ($28<<2)|0);
 HEAP32[$30>>2] = $31;
 $32 = HEAP32[3152>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[3152>>2] = $33;
 return;
}
function _applyFREAD() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $filenr = 0, $s = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 8|0;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 _fillstring449($4,$s,256);
 $5 = (_OpenIOFileRead($s)|0);
 $filenr = $5;
 $6 = $filenr;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = HEAP32[2576>>2]|0;
  $9 = HEAP32[3152>>2]|0;
  $10 = HEAP32[3144>>2]|0;
  $11 = (($10) + ($9<<2)|0);
  HEAP32[$11>>2] = $8;
  $12 = HEAP32[3152>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[3152>>2] = $13;
  STACKTOP = sp;return;
 } else {
  $14 = (_newcell(25)|0);
  $temp = $14;
  $15 = HEAP32[3152>>2]|0;
  $16 = HEAP32[3144>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  HEAP32[$17>>2] = $14;
  $18 = HEAP32[3152>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[3152>>2] = $19;
  $20 = HEAP32[2976>>2]|0;
  $21 = $temp;
  $22 = (($21) + 8|0);
  HEAP32[$22>>2] = $20;
  $23 = (_newcell(3)|0);
  $24 = $temp;
  HEAP32[$24>>2] = $23;
  $25 = $filenr;
  $26 = $temp;
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$27>>2] = $25;
  STACKTOP = sp;return;
 }
}
function _applyFWRITE() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $filenr = 0, $fname = 0, $l = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 16|0;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $fname = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l = $9;
 $10 = $fname;
 _fillstring449($10,$s,256);
 $11 = (_OpenIOFileWrite($s)|0);
 $filenr = $11;
 $12 = $filenr;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = HEAP32[2952>>2]|0;
  $15 = HEAP32[3152>>2]|0;
  $16 = HEAP32[3144>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  HEAP32[$17>>2] = $14;
  $18 = HEAP32[3152>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[3152>>2] = $19;
  STACKTOP = sp;return;
 }
 $20 = $l;
 $21 = (($20) + 12|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ($23|0)>(8);
 if ($24) {
  $25 = $l;
  $26 = (($25) + 12|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = ($28|0)<(38);
  if ($29) {
   $30 = $l;
   $31 = HEAP32[3152>>2]|0;
   $32 = HEAP32[3144>>2]|0;
   $33 = (($32) + ($31<<2)|0);
   HEAP32[$33>>2] = $30;
   $34 = HEAP32[3152>>2]|0;
   $35 = (($34) + 1)|0;
   HEAP32[3152>>2] = $35;
   _eval();
   $36 = HEAP32[3152>>2]|0;
   $37 = (($36) - 1)|0;
   HEAP32[3152>>2] = $37;
  }
 }
 while(1) {
  $38 = $l;
  $39 = (($38) + 12|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = ($41|0)==(39);
  if (!($42)) {
   break;
  }
  $43 = $l;
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 12|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = ($47|0)>(8);
  if ($48) {
   $49 = $l;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 12|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = ($53|0)<(38);
   if ($54) {
    $55 = $l;
    $56 = HEAP32[$55>>2]|0;
    $57 = HEAP32[3152>>2]|0;
    $58 = HEAP32[3144>>2]|0;
    $59 = (($58) + ($57<<2)|0);
    HEAP32[$59>>2] = $56;
    $60 = HEAP32[3152>>2]|0;
    $61 = (($60) + 1)|0;
    HEAP32[3152>>2] = $61;
    _eval();
    $62 = HEAP32[3152>>2]|0;
    $63 = (($62) - 1)|0;
    HEAP32[3152>>2] = $63;
   }
  }
  $64 = $filenr;
  $65 = $l;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $68&255;
  _WriteIOFile($64,$69);
  $70 = $l;
  $71 = (($70) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $l = $72;
  $73 = HEAP32[3152>>2]|0;
  $74 = (($73) - 2)|0;
  $75 = HEAP32[3144>>2]|0;
  $76 = (($75) + ($74<<2)|0);
  HEAP32[$76>>2] = $72;
  $77 = $l;
  $78 = (($77) + 12|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = ($80|0)>(8);
  if ($81) {
   $82 = $l;
   $83 = (($82) + 12|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = ($85|0)<(38);
   if ($86) {
    $87 = $l;
    $88 = HEAP32[3152>>2]|0;
    $89 = HEAP32[3144>>2]|0;
    $90 = (($89) + ($88<<2)|0);
    HEAP32[$90>>2] = $87;
    $91 = HEAP32[3152>>2]|0;
    $92 = (($91) + 1)|0;
    HEAP32[3152>>2] = $92;
    _eval();
    $93 = HEAP32[3152>>2]|0;
    $94 = (($93) - 1)|0;
    HEAP32[3152>>2] = $94;
   }
  }
 }
 $95 = $filenr;
 _CloseIOFile($95);
 $96 = HEAP32[2944>>2]|0;
 $97 = HEAP32[3152>>2]|0;
 $98 = HEAP32[3144>>2]|0;
 $99 = (($98) + ($97<<2)|0);
 HEAP32[$99>>2] = $96;
 $100 = HEAP32[3152>>2]|0;
 $101 = (($100) + 1)|0;
 HEAP32[3152>>2] = $101;
 STACKTOP = sp;return;
}
function _applyFAPPEND() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $filenr = 0, $fname = 0, $l = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 16|0;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $fname = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $l = $9;
 $10 = $fname;
 _fillstring449($10,$s,256);
 $11 = (_OpenIOFileAppend($s)|0);
 $filenr = $11;
 $12 = $filenr;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = HEAP32[2952>>2]|0;
  $15 = HEAP32[3152>>2]|0;
  $16 = HEAP32[3144>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  HEAP32[$17>>2] = $14;
  $18 = HEAP32[3152>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[3152>>2] = $19;
  STACKTOP = sp;return;
 }
 $20 = $l;
 $21 = (($20) + 12|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ($23|0)>(8);
 if ($24) {
  $25 = $l;
  $26 = (($25) + 12|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = ($28|0)<(38);
  if ($29) {
   $30 = $l;
   $31 = HEAP32[3152>>2]|0;
   $32 = HEAP32[3144>>2]|0;
   $33 = (($32) + ($31<<2)|0);
   HEAP32[$33>>2] = $30;
   $34 = HEAP32[3152>>2]|0;
   $35 = (($34) + 1)|0;
   HEAP32[3152>>2] = $35;
   _eval();
   $36 = HEAP32[3152>>2]|0;
   $37 = (($36) - 1)|0;
   HEAP32[3152>>2] = $37;
  }
 }
 while(1) {
  $38 = $l;
  $39 = (($38) + 12|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = ($41|0)==(39);
  if (!($42)) {
   break;
  }
  $43 = $l;
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 12|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = ($47|0)>(8);
  if ($48) {
   $49 = $l;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 12|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = ($53|0)<(38);
   if ($54) {
    $55 = $l;
    $56 = HEAP32[$55>>2]|0;
    $57 = HEAP32[3152>>2]|0;
    $58 = HEAP32[3144>>2]|0;
    $59 = (($58) + ($57<<2)|0);
    HEAP32[$59>>2] = $56;
    $60 = HEAP32[3152>>2]|0;
    $61 = (($60) + 1)|0;
    HEAP32[3152>>2] = $61;
    _eval();
    $62 = HEAP32[3152>>2]|0;
    $63 = (($62) - 1)|0;
    HEAP32[3152>>2] = $63;
   }
  }
  $64 = $filenr;
  $65 = $l;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $68&255;
  _WriteIOFile($64,$69);
  $70 = $l;
  $71 = (($70) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $l = $72;
  $73 = HEAP32[3152>>2]|0;
  $74 = (($73) - 2)|0;
  $75 = HEAP32[3144>>2]|0;
  $76 = (($75) + ($74<<2)|0);
  HEAP32[$76>>2] = $72;
  $77 = $l;
  $78 = (($77) + 12|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = ($80|0)>(8);
  if ($81) {
   $82 = $l;
   $83 = (($82) + 12|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = ($85|0)<(38);
   if ($86) {
    $87 = $l;
    $88 = HEAP32[3152>>2]|0;
    $89 = HEAP32[3144>>2]|0;
    $90 = (($89) + ($88<<2)|0);
    HEAP32[$90>>2] = $87;
    $91 = HEAP32[3152>>2]|0;
    $92 = (($91) + 1)|0;
    HEAP32[3152>>2] = $92;
    _eval();
    $93 = HEAP32[3152>>2]|0;
    $94 = (($93) - 1)|0;
    HEAP32[3152>>2] = $94;
   }
  }
 }
 $95 = $filenr;
 _CloseIOFile($95);
 $96 = HEAP32[2944>>2]|0;
 $97 = HEAP32[3152>>2]|0;
 $98 = HEAP32[3144>>2]|0;
 $99 = (($98) + ($97<<2)|0);
 HEAP32[$99>>2] = $96;
 $100 = HEAP32[3152>>2]|0;
 $101 = (($100) + 1)|0;
 HEAP32[3152>>2] = $101;
 STACKTOP = sp;return;
}
function _apply_FREAD() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch = 0, $nr = 0;
 var $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $nr = $4;
 $5 = $nr;
 $6 = HEAP32[$5>>2]|0;
 $7 = (_ReadIOFile($6)|0);
 $ch = $7;
 $8 = $ch;
 $9 = ($8|0)==(-1);
 if ($9) {
  $10 = $nr;
  $11 = HEAP32[$10>>2]|0;
  _CloseIOFile($11);
  $12 = HEAP32[2576>>2]|0;
  $13 = HEAP32[3152>>2]|0;
  $14 = HEAP32[3144>>2]|0;
  $15 = (($14) + ($13<<2)|0);
  HEAP32[$15>>2] = $12;
  $16 = HEAP32[3152>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[3152>>2] = $17;
  STACKTOP = sp;return;
 } else {
  $18 = (_newcell(39)|0);
  $temp = $18;
  $19 = HEAP32[3152>>2]|0;
  $20 = HEAP32[3144>>2]|0;
  $21 = (($20) + ($19<<2)|0);
  HEAP32[$21>>2] = $18;
  $22 = HEAP32[3152>>2]|0;
  $23 = (($22) + 1)|0;
  HEAP32[3152>>2] = $23;
  $24 = (_newcell(5)|0);
  $25 = $temp;
  HEAP32[$25>>2] = $24;
  $26 = $ch;
  $27 = $temp;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 8|0);
  HEAP32[$29>>2] = $26;
  $30 = (_newcell(25)|0);
  $31 = $temp;
  $32 = (($31) + 4|0);
  HEAP32[$32>>2] = $30;
  $temp = $30;
  $33 = HEAP32[2976>>2]|0;
  $34 = $temp;
  $35 = (($34) + 8|0);
  HEAP32[$35>>2] = $33;
  $36 = $nr;
  $37 = $temp;
  HEAP32[$37>>2] = $36;
  STACKTOP = sp;return;
 }
}
function _applyGRAPHDISPLAY() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $l = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 8|0;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $l = $4;
 $5 = $l;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(8);
 if ($9) {
  $10 = $l;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)<(38);
  if ($14) {
   $15 = $l;
   $16 = HEAP32[3152>>2]|0;
   $17 = HEAP32[3144>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $15;
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[3152>>2] = $20;
   _eval();
   $21 = HEAP32[3152>>2]|0;
   $22 = (($21) - 1)|0;
   HEAP32[3152>>2] = $22;
  }
 }
 while(1) {
  $23 = $l;
  $24 = (($23) + 12|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = ($26|0)==(39);
  if (!($27)) {
   break;
  }
  $28 = $l;
  $29 = HEAP32[$28>>2]|0;
  _fillstring449($29,$s,256);
  _GraphDisplay();
  $30 = $l;
  $31 = (($30) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $l = $32;
  $33 = HEAP32[3152>>2]|0;
  $34 = (($33) - 1)|0;
  $35 = HEAP32[3144>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  HEAP32[$36>>2] = $32;
  $37 = $l;
  $38 = (($37) + 12|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = ($40|0)>(8);
  if ($41) {
   $42 = $l;
   $43 = (($42) + 12|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = ($45|0)<(38);
   if ($46) {
    $47 = $l;
    $48 = HEAP32[3152>>2]|0;
    $49 = HEAP32[3144>>2]|0;
    $50 = (($49) + ($48<<2)|0);
    HEAP32[$50>>2] = $47;
    $51 = HEAP32[3152>>2]|0;
    $52 = (($51) + 1)|0;
    HEAP32[3152>>2] = $52;
    _eval();
    $53 = HEAP32[3152>>2]|0;
    $54 = (($53) - 1)|0;
    HEAP32[3152>>2] = $54;
   }
  }
 }
 $55 = HEAP32[2944>>2]|0;
 $56 = HEAP32[3152>>2]|0;
 $57 = HEAP32[3144>>2]|0;
 $58 = (($57) + ($56<<2)|0);
 HEAP32[$58>>2] = $55;
 $59 = HEAP32[3152>>2]|0;
 $60 = (($59) + 1)|0;
 HEAP32[3152>>2] = $60;
 STACKTOP = sp;return;
}
function _applyMIN2() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_comparecell($4,$9)|0);
 $11 = ($10|0)<(0);
 if ($11) {
  $12 = HEAP32[3152>>2]|0;
  $13 = (($12) - 1)|0;
  $14 = HEAP32[3144>>2]|0;
  $15 = (($14) + ($13<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $25 = $16;
 } else {
  $17 = HEAP32[3152>>2]|0;
  $18 = (($17) - 2)|0;
  $19 = HEAP32[3144>>2]|0;
  $20 = (($19) + ($18<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $25 = $21;
 }
 $22 = HEAP32[3152>>2]|0;
 $23 = HEAP32[3144>>2]|0;
 $24 = (($23) + ($22<<2)|0);
 HEAP32[$24>>2] = $25;
 $26 = HEAP32[3152>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[3152>>2] = $27;
 return;
}
function _applyMAX2() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_comparecell($4,$9)|0);
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = HEAP32[3152>>2]|0;
  $13 = (($12) - 1)|0;
  $14 = HEAP32[3144>>2]|0;
  $15 = (($14) + ($13<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $25 = $16;
 } else {
  $17 = HEAP32[3152>>2]|0;
  $18 = (($17) - 2)|0;
  $19 = HEAP32[3144>>2]|0;
  $20 = (($19) + ($18<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $25 = $21;
 }
 $22 = HEAP32[3152>>2]|0;
 $23 = HEAP32[3144>>2]|0;
 $24 = (($23) + ($22<<2)|0);
 HEAP32[$24>>2] = $25;
 $26 = HEAP32[3152>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[3152>>2] = $27;
 return;
}
function _applyITERATE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg1 = 0, $arg2 = 0, $temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $arg1 = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $arg2 = $9;
 $10 = (_newcell(39)|0);
 $temp = $10;
 $11 = HEAP32[3152>>2]|0;
 $12 = HEAP32[3144>>2]|0;
 $13 = (($12) + ($11<<2)|0);
 HEAP32[$13>>2] = $10;
 $14 = HEAP32[3152>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[3152>>2] = $15;
 $16 = $arg2;
 $17 = $temp;
 HEAP32[$17>>2] = $16;
 $18 = (_newcell(24)|0);
 $19 = $temp;
 $20 = (($19) + 4|0);
 HEAP32[$20>>2] = $18;
 $temp = $18;
 $21 = HEAP32[8264>>2]|0;
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $temp;
 $25 = (($24) + 8|0);
 HEAP32[$25>>2] = $23;
 $26 = $arg1;
 $27 = $temp;
 $28 = (($27) + 4|0);
 HEAP32[$28>>2] = $26;
 $29 = (_newcell(22)|0);
 $30 = $temp;
 HEAP32[$30>>2] = $29;
 $temp = $29;
 $31 = $arg2;
 $32 = $temp;
 $33 = (($32) + 4|0);
 HEAP32[$33>>2] = $31;
 $34 = $arg1;
 $35 = $temp;
 HEAP32[$35>>2] = $34;
 STACKTOP = sp;return;
}
function _applySCAN() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $arg1 = 0, $arg2 = 0, $arg3 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $arg1 = $4;
 $5 = HEAP32[3152>>2]|0;
 $6 = (($5) - 2)|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $arg2 = $9;
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) - 3)|0;
 $12 = HEAP32[3144>>2]|0;
 $13 = (($12) + ($11<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $arg3 = $14;
 $15 = $arg3;
 $16 = (($15) + 12|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)>(8);
 if ($19) {
  $20 = $arg3;
  $21 = (($20) + 12|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)<(38);
  if ($24) {
   $25 = $arg3;
   $26 = HEAP32[3152>>2]|0;
   $27 = HEAP32[3144>>2]|0;
   $28 = (($27) + ($26<<2)|0);
   HEAP32[$28>>2] = $25;
   $29 = HEAP32[3152>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[3152>>2] = $30;
   _eval();
   $31 = HEAP32[3152>>2]|0;
   $32 = (($31) - 1)|0;
   HEAP32[3152>>2] = $32;
  }
 }
 $33 = $arg3;
 $34 = (($33) + 12|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = ($36|0)!=(39);
 if ($37) {
  $38 = (_newcell(39)|0);
  $temp = $38;
  $39 = HEAP32[3152>>2]|0;
  $40 = HEAP32[3144>>2]|0;
  $41 = (($40) + ($39<<2)|0);
  HEAP32[$41>>2] = $38;
  $42 = HEAP32[3152>>2]|0;
  $43 = (($42) + 1)|0;
  HEAP32[3152>>2] = $43;
  $44 = $arg2;
  $45 = $temp;
  HEAP32[$45>>2] = $44;
  $46 = HEAP32[2576>>2]|0;
  $47 = $temp;
  $48 = (($47) + 4|0);
  HEAP32[$48>>2] = $46;
  STACKTOP = sp;return;
 } else {
  $49 = (_newcell(39)|0);
  $temp = $49;
  $50 = HEAP32[3152>>2]|0;
  $51 = HEAP32[3144>>2]|0;
  $52 = (($51) + ($50<<2)|0);
  HEAP32[$52>>2] = $49;
  $53 = HEAP32[3152>>2]|0;
  $54 = (($53) + 1)|0;
  HEAP32[3152>>2] = $54;
  $55 = $arg2;
  $56 = $temp;
  HEAP32[$56>>2] = $55;
  $57 = (_newcell(24)|0);
  $58 = $temp;
  $59 = (($58) + 4|0);
  HEAP32[$59>>2] = $57;
  $temp = $57;
  $60 = HEAP32[8320>>2]|0;
  $61 = (($60) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $temp;
  $64 = (($63) + 8|0);
  HEAP32[$64>>2] = $62;
  $65 = $arg3;
  $66 = (($65) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $temp;
  HEAP32[$68>>2] = $67;
  $69 = (_newcell(24)|0);
  $70 = $temp;
  $71 = (($70) + 4|0);
  HEAP32[$71>>2] = $69;
  $temp = $69;
  $72 = $arg1;
  $73 = $temp;
  $74 = (($73) + 4|0);
  HEAP32[$74>>2] = $72;
  $75 = (_newcell(22)|0);
  $76 = $temp;
  HEAP32[$76>>2] = $75;
  $temp = $75;
  $77 = $arg3;
  $78 = HEAP32[$77>>2]|0;
  $79 = $temp;
  $80 = (($79) + 4|0);
  HEAP32[$80>>2] = $78;
  $81 = (_newcell(22)|0);
  $82 = $temp;
  HEAP32[$82>>2] = $81;
  $temp = $81;
  $83 = $arg2;
  $84 = $temp;
  $85 = (($84) + 4|0);
  HEAP32[$85>>2] = $83;
  $86 = $arg1;
  $87 = $temp;
  HEAP32[$87>>2] = $86;
  STACKTOP = sp;return;
 }
}
function _applyITOA() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $s = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $s = sp + 8|0;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[8168>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_evalint($4,$7)|0);
 HEAP32[$vararg_buffer>>2] = $8;
 (_sprintf($s,8368,$vararg_buffer)|0);
 _buildstring450($s);
 STACKTOP = sp;return;
}
function _applyATOI() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 _fillstring449($4,$s,256);
 $5 = (_newcell(3)|0);
 $6 = HEAP32[3152>>2]|0;
 $7 = HEAP32[3144>>2]|0;
 $8 = (($7) + ($6<<2)|0);
 HEAP32[$8>>2] = $5;
 $9 = HEAP32[3152>>2]|0;
 $10 = (($9) + 1)|0;
 HEAP32[3152>>2] = $10;
 $11 = (_atol($s)|0);
 $12 = HEAP32[3152>>2]|0;
 $13 = (($12) - 1)|0;
 $14 = HEAP32[3144>>2]|0;
 $15 = (($14) + ($13<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$16>>2] = $11;
 STACKTOP = sp;return;
}
function _applyFTOA() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $s = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $s = sp + 8|0;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+_evalreal($4));
 HEAPF64[tempDoublePtr>>3]=$5;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_sprintf($s,8360,$vararg_buffer)|0);
 _buildstring450($s);
 STACKTOP = sp;return;
}
function _applyATOF() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $i = 0;
 var $r = 0.0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 16|0;
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 _fillstring449($4,$s,256);
 $5 = (+_atof($s));
 $r = $5;
 $6 = $r;
 $7 = $6 >= -2147483648.0;
 if ($7) {
  $8 = $r;
  $9 = $8 <= 2147483647.0;
  if ($9) {
   $10 = $r;
   $11 = $r;
   $12 = (~~(($11)));
   $i = $12;
   $13 = (+($12|0));
   $14 = $10 == $13;
   if ($14) {
    $15 = (_newcell(3)|0);
    $16 = HEAP32[3152>>2]|0;
    $17 = HEAP32[3144>>2]|0;
    $18 = (($17) + ($16<<2)|0);
    HEAP32[$18>>2] = $15;
    $19 = HEAP32[3152>>2]|0;
    $20 = (($19) + 1)|0;
    HEAP32[3152>>2] = $20;
    $21 = $i;
    $22 = HEAP32[3152>>2]|0;
    $23 = (($22) - 1)|0;
    $24 = HEAP32[3144>>2]|0;
    $25 = (($24) + ($23<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    HEAP32[$26>>2] = $21;
    STACKTOP = sp;return;
   }
  }
 }
 $27 = (_newcell(4)|0);
 $28 = HEAP32[3152>>2]|0;
 $29 = HEAP32[3144>>2]|0;
 $30 = (($29) + ($28<<2)|0);
 HEAP32[$30>>2] = $27;
 $31 = HEAP32[3152>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[3152>>2] = $32;
 $33 = $r;
 $34 = HEAP32[3152>>2]|0;
 $35 = (($34) - 1)|0;
 $36 = HEAP32[3144>>2]|0;
 $37 = (($36) + ($35<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 HEAPF64[$38>>3] = $33;
 STACKTOP = sp;return;
}
function _applyABS() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $temp = $4;
 $5 = $temp;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(8);
 if ($9) {
  $10 = $temp;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)<(38);
  if ($14) {
   $15 = $temp;
   $16 = HEAP32[3152>>2]|0;
   $17 = HEAP32[3144>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $15;
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[3152>>2] = $20;
   _eval();
   $21 = HEAP32[3152>>2]|0;
   $22 = (($21) - 1)|0;
   HEAP32[3152>>2] = $22;
  }
 }
 $23 = $temp;
 $24 = (($23) + 12|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)==(3);
 if ($27) {
  $28 = $temp;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)<(0);
  if ($30) {
   $31 = (_newcell(3)|0);
   $32 = HEAP32[3152>>2]|0;
   $33 = HEAP32[3144>>2]|0;
   $34 = (($33) + ($32<<2)|0);
   HEAP32[$34>>2] = $31;
   $35 = HEAP32[3152>>2]|0;
   $36 = (($35) + 1)|0;
   HEAP32[3152>>2] = $36;
   $37 = $temp;
   $38 = HEAP32[$37>>2]|0;
   $39 = (0 - ($38))|0;
   $40 = HEAP32[3152>>2]|0;
   $41 = (($40) - 1)|0;
   $42 = HEAP32[3144>>2]|0;
   $43 = (($42) + ($41<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   HEAP32[$44>>2] = $39;
  } else {
   $45 = $temp;
   $46 = HEAP32[3152>>2]|0;
   $47 = HEAP32[3144>>2]|0;
   $48 = (($47) + ($46<<2)|0);
   HEAP32[$48>>2] = $45;
   $49 = HEAP32[3152>>2]|0;
   $50 = (($49) + 1)|0;
   HEAP32[3152>>2] = $50;
  }
  STACKTOP = sp;return;
 } else {
  $51 = $temp;
  $52 = +HEAPF64[$51>>3];
  $53 = $52 < 0.0;
  if ($53) {
   $54 = (_newcell(4)|0);
   $55 = HEAP32[3152>>2]|0;
   $56 = HEAP32[3144>>2]|0;
   $57 = (($56) + ($55<<2)|0);
   HEAP32[$57>>2] = $54;
   $58 = HEAP32[3152>>2]|0;
   $59 = (($58) + 1)|0;
   HEAP32[3152>>2] = $59;
   $60 = $temp;
   $61 = +HEAPF64[$60>>3];
   $62 = -$61;
   $63 = HEAP32[3152>>2]|0;
   $64 = (($63) - 1)|0;
   $65 = HEAP32[3144>>2]|0;
   $66 = (($65) + ($64<<2)|0);
   $67 = HEAP32[$66>>2]|0;
   HEAPF64[$67>>3] = $62;
  } else {
   $68 = $temp;
   $69 = HEAP32[3152>>2]|0;
   $70 = HEAP32[3144>>2]|0;
   $71 = (($70) + ($69<<2)|0);
   HEAP32[$71>>2] = $68;
   $72 = HEAP32[3152>>2]|0;
   $73 = (($72) + 1)|0;
   HEAP32[3152>>2] = $73;
  }
  STACKTOP = sp;return;
 }
}
function _applyROUND() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+_evalreal($4));
 $r = $5;
 $6 = (_newcell(3)|0);
 $7 = HEAP32[3152>>2]|0;
 $8 = HEAP32[3144>>2]|0;
 $9 = (($8) + ($7<<2)|0);
 HEAP32[$9>>2] = $6;
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[3152>>2] = $11;
 $12 = $r;
 $13 = $12 >= 0.0;
 if ($13) {
  $14 = $r;
  $15 = $14 + 0.5;
  $19 = $15;
 } else {
  $16 = $r;
  $17 = $16 - 0.5;
  $19 = $17;
 }
 $18 = (~~(($19)));
 $20 = HEAP32[3152>>2]|0;
 $21 = (($20) - 1)|0;
 $22 = HEAP32[3144>>2]|0;
 $23 = (($22) + ($21<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$24>>2] = $18;
 STACKTOP = sp;return;
}
function _applyTRUNC() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+_evalreal($4));
 $r = $5;
 $6 = (_newcell(3)|0);
 $7 = HEAP32[3152>>2]|0;
 $8 = HEAP32[3144>>2]|0;
 $9 = (($8) + ($7<<2)|0);
 HEAP32[$9>>2] = $6;
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[3152>>2] = $11;
 $12 = $r;
 $13 = (~~(($12)));
 $14 = HEAP32[3152>>2]|0;
 $15 = (($14) - 1)|0;
 $16 = HEAP32[3144>>2]|0;
 $17 = (($16) + ($15<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$18>>2] = $13;
 STACKTOP = sp;return;
}
function _applyDECODE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[8184>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_evalint($4,$7)|0);
 $i = $8;
 $9 = (_newcell(5)|0);
 $10 = HEAP32[3152>>2]|0;
 $11 = HEAP32[3144>>2]|0;
 $12 = (($11) + ($10<<2)|0);
 HEAP32[$12>>2] = $9;
 $13 = HEAP32[3152>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[3152>>2] = $14;
 $15 = $i;
 $16 = HEAP32[3152>>2]|0;
 $17 = (($16) - 1)|0;
 $18 = HEAP32[3144>>2]|0;
 $19 = (($18) + ($17<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 8|0);
 HEAP32[$21>>2] = $15;
 STACKTOP = sp;return;
}
function _applyCODE() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $temp = $4;
 $5 = $temp;
 $6 = (($5) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)>(8);
 if ($9) {
  $10 = $temp;
  $11 = (($10) + 12|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($13|0)<(38);
  if ($14) {
   $15 = $temp;
   $16 = HEAP32[3152>>2]|0;
   $17 = HEAP32[3144>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAP32[$18>>2] = $15;
   $19 = HEAP32[3152>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[3152>>2] = $20;
   _eval();
   $21 = HEAP32[3152>>2]|0;
   $22 = (($21) - 1)|0;
   HEAP32[3152>>2] = $22;
  }
 }
 $23 = (_newcell(3)|0);
 $24 = HEAP32[3152>>2]|0;
 $25 = HEAP32[3144>>2]|0;
 $26 = (($25) + ($24<<2)|0);
 HEAP32[$26>>2] = $23;
 $27 = HEAP32[3152>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[3152>>2] = $28;
 $29 = $temp;
 $30 = (($29) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[3152>>2]|0;
 $33 = (($32) - 1)|0;
 $34 = HEAP32[3144>>2]|0;
 $35 = (($34) + ($33<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$36>>2] = $31;
 STACKTOP = sp;return;
}
function _applyRANDOM() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[8176>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_evalint($4,$7)|0);
 $r = $8;
 $9 = $r;
 $10 = ($9|0)<=(0);
 if ($10) {
  $11 = HEAP32[8176>>2]|0;
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  _runtimeerror(13,$13);
 }
 $14 = (_newcell(3)|0);
 $15 = HEAP32[3152>>2]|0;
 $16 = HEAP32[3144>>2]|0;
 $17 = (($16) + ($15<<2)|0);
 HEAP32[$17>>2] = $14;
 $18 = HEAP32[3152>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[3152>>2] = $19;
 $20 = (_rand()|0);
 $21 = $r;
 $22 = (($20|0) % ($21|0))&-1;
 $23 = HEAP32[3152>>2]|0;
 $24 = (($23) - 1)|0;
 $25 = HEAP32[3144>>2]|0;
 $26 = (($25) + ($24<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$27>>2] = $22;
 STACKTOP = sp;return;
}
function _applyCOS() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+_evalreal($4));
 $r = $5;
 $6 = (_newcell(4)|0);
 $7 = HEAP32[3152>>2]|0;
 $8 = HEAP32[3144>>2]|0;
 $9 = (($8) + ($7<<2)|0);
 HEAP32[$9>>2] = $6;
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[3152>>2] = $11;
 $12 = $r;
 $13 = (+Math_cos((+$12)));
 $14 = HEAP32[3152>>2]|0;
 $15 = (($14) - 1)|0;
 $16 = HEAP32[3144>>2]|0;
 $17 = (($16) + ($15<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 HEAPF64[$18>>3] = $13;
 STACKTOP = sp;return;
}
function _applySIN() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+_evalreal($4));
 $r = $5;
 $6 = (_newcell(4)|0);
 $7 = HEAP32[3152>>2]|0;
 $8 = HEAP32[3144>>2]|0;
 $9 = (($8) + ($7<<2)|0);
 HEAP32[$9>>2] = $6;
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[3152>>2] = $11;
 $12 = $r;
 $13 = (+Math_sin((+$12)));
 $14 = HEAP32[3152>>2]|0;
 $15 = (($14) - 1)|0;
 $16 = HEAP32[3144>>2]|0;
 $17 = (($16) + ($15<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 HEAPF64[$18>>3] = $13;
 STACKTOP = sp;return;
}
function _applyEXP() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+_evalreal($4));
 $r = $5;
 $6 = (_newcell(4)|0);
 $7 = HEAP32[3152>>2]|0;
 $8 = HEAP32[3144>>2]|0;
 $9 = (($8) + ($7<<2)|0);
 HEAP32[$9>>2] = $6;
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[3152>>2] = $11;
 $12 = $r;
 $13 = (+Math_exp((+$12)));
 $14 = HEAP32[3152>>2]|0;
 $15 = (($14) - 1)|0;
 $16 = HEAP32[3144>>2]|0;
 $17 = (($16) + ($15<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 HEAPF64[$18>>3] = $13;
 STACKTOP = sp;return;
}
function _applyLOG() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0.0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+_evalreal($4));
 $r = $5;
 $6 = $r;
 $7 = $6 <= 0.0;
 if ($7) {
  $8 = HEAP32[8192>>2]|0;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  _runtimeerror(13,$10);
 }
 $11 = (_newcell(4)|0);
 $12 = HEAP32[3152>>2]|0;
 $13 = HEAP32[3144>>2]|0;
 $14 = (($13) + ($12<<2)|0);
 HEAP32[$14>>2] = $11;
 $15 = HEAP32[3152>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[3152>>2] = $16;
 $17 = $r;
 $18 = (+Math_log((+$17)));
 $19 = HEAP32[3152>>2]|0;
 $20 = (($19) - 1)|0;
 $21 = HEAP32[3144>>2]|0;
 $22 = (($21) + ($20<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 HEAPF64[$23>>3] = $18;
 STACKTOP = sp;return;
}
function _applySQRT() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0.0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+_evalreal($4));
 $r = $5;
 $6 = $r;
 $7 = $6 < 0.0;
 if ($7) {
  $8 = HEAP32[8200>>2]|0;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  _runtimeerror(13,$10);
 }
 $11 = (_newcell(4)|0);
 $12 = HEAP32[3152>>2]|0;
 $13 = HEAP32[3144>>2]|0;
 $14 = (($13) + ($12<<2)|0);
 HEAP32[$14>>2] = $11;
 $15 = HEAP32[3152>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[3152>>2] = $16;
 $17 = $r;
 $18 = (+Math_sqrt((+$17)));
 $19 = HEAP32[3152>>2]|0;
 $20 = (($19) - 1)|0;
 $21 = HEAP32[3144>>2]|0;
 $22 = (($21) + ($20<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 HEAPF64[$23>>3] = $18;
 STACKTOP = sp;return;
}
function _applyATAN() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[3152>>2]|0;
 $1 = (($0) - 1)|0;
 $2 = HEAP32[3144>>2]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+_evalreal($4));
 $r = $5;
 $6 = (_newcell(4)|0);
 $7 = HEAP32[3152>>2]|0;
 $8 = HEAP32[3144>>2]|0;
 $9 = (($8) + ($7<<2)|0);
 HEAP32[$9>>2] = $6;
 $10 = HEAP32[3152>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[3152>>2] = $11;
 $12 = $r;
 $13 = (+Math_atan((+$12)));
 $14 = HEAP32[3152>>2]|0;
 $15 = (($14) - 1)|0;
 $16 = HEAP32[3144>>2]|0;
 $17 = (($16) + ($15<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 HEAPF64[$18>>3] = $13;
 STACKTOP = sp;return;
}
function _fillstring449($c,$s,$size) {
 $c = $c|0;
 $s = $s|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $s;
 $2 = $size;
 $3 = $1;
 $t = $3;
 $4 = $2;
 $5 = (($4) + -1)|0;
 $2 = $5;
 $6 = $0;
 $7 = (($6) + 12|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(8);
 if ($10) {
  $11 = $0;
  $12 = (($11) + 12|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)<(38);
  if ($15) {
   $16 = $0;
   $17 = HEAP32[3152>>2]|0;
   $18 = HEAP32[3144>>2]|0;
   $19 = (($18) + ($17<<2)|0);
   HEAP32[$19>>2] = $16;
   $20 = HEAP32[3152>>2]|0;
   $21 = (($20) + 1)|0;
   HEAP32[3152>>2] = $21;
   _eval();
   $22 = HEAP32[3152>>2]|0;
   $23 = (($22) - 1)|0;
   HEAP32[3152>>2] = $23;
  }
 }
 while(1) {
  $24 = $0;
  $25 = (($24) + 12|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = ($27|0)==(39);
  if (!($28)) {
   label = 15;
   break;
  }
  $29 = $0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 12|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($33|0)>(8);
  if ($34) {
   $35 = $0;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + 12|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)<(38);
   if ($40) {
    $41 = $0;
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[3152>>2]|0;
    $44 = HEAP32[3144>>2]|0;
    $45 = (($44) + ($43<<2)|0);
    HEAP32[$45>>2] = $42;
    $46 = HEAP32[3152>>2]|0;
    $47 = (($46) + 1)|0;
    HEAP32[3152>>2] = $47;
    _eval();
    $48 = HEAP32[3152>>2]|0;
    $49 = (($48) - 1)|0;
    HEAP32[3152>>2] = $49;
   }
  }
  $50 = $0;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $53&255;
  $55 = $t;
  $56 = (($55) + 1|0);
  $t = $56;
  HEAP8[$55>>0] = $54;
  $57 = $t;
  $58 = $1;
  $59 = $57;
  $60 = $58;
  $61 = (($59) - ($60))|0;
  $62 = $2;
  $63 = ($61|0)>=($62|0);
  if ($63) {
   break;
  }
  $64 = $0;
  $65 = (($64) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $0 = $66;
  $67 = $0;
  $68 = (($67) + 12|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = ($70|0)>(8);
  if ($71) {
   $72 = $0;
   $73 = (($72) + 12|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = ($75|0)<(38);
   if ($76) {
    $77 = $0;
    $78 = HEAP32[3152>>2]|0;
    $79 = HEAP32[3144>>2]|0;
    $80 = (($79) + ($78<<2)|0);
    HEAP32[$80>>2] = $77;
    $81 = HEAP32[3152>>2]|0;
    $82 = (($81) + 1)|0;
    HEAP32[3152>>2] = $82;
    _eval();
    $83 = HEAP32[3152>>2]|0;
    $84 = (($83) - 1)|0;
    HEAP32[3152>>2] = $84;
   }
  }
 }
 if ((label|0) == 15) {
  $85 = $t;
  HEAP8[$85>>0] = 0;
  STACKTOP = sp;return;
 }
 $85 = $t;
 HEAP8[$85>>0] = 0;
 STACKTOP = sp;return;
}
function _buildstring450($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[2576>>2]|0;
  $6 = HEAP32[3152>>2]|0;
  $7 = HEAP32[3144>>2]|0;
  $8 = (($7) + ($6<<2)|0);
  HEAP32[$8>>2] = $5;
  $9 = HEAP32[3152>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[3152>>2] = $10;
  STACKTOP = sp;return;
 }
 $11 = (_newcell(39)|0);
 $temp = $11;
 $12 = HEAP32[3152>>2]|0;
 $13 = HEAP32[3144>>2]|0;
 $14 = (($13) + ($12<<2)|0);
 HEAP32[$14>>2] = $11;
 $15 = HEAP32[3152>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[3152>>2] = $16;
 while(1) {
  $17 = (_newcell(5)|0);
  $18 = $temp;
  HEAP32[$18>>2] = $17;
  $19 = $0;
  $20 = (($19) + 1|0);
  $0 = $20;
  $21 = HEAP8[$19>>0]|0;
  $22 = $21 << 24 >> 24;
  $23 = $temp;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 8|0);
  HEAP32[$25>>2] = $22;
  $26 = $0;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)==(0);
  if ($29) {
   break;
  }
  $33 = (_newcell(39)|0);
  $34 = $temp;
  $35 = (($34) + 4|0);
  HEAP32[$35>>2] = $33;
  $temp = $33;
 }
 $30 = HEAP32[2576>>2]|0;
 $31 = $temp;
 $32 = (($31) + 4|0);
 HEAP32[$32>>2] = $30;
 STACKTOP = sp;return;
}
function _initlex() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAP32[8408>>2] = 2;
 HEAP32[8416>>2] = 0;
 HEAP32[((8416 + 268|0))>>2] = 0;
 HEAP32[((8416 + 272|0))>>2] = 0;
 while(1) {
  $0 = HEAP32[8696>>2]|0;
  $1 = (($0) + 268|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)!=(0|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[8696>>2]|0;
  $i = $4;
  $5 = HEAP32[8696>>2]|0;
  $6 = (($5) + 268|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[8696>>2] = $7;
  $8 = $i;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = $i;
   $12 = HEAP32[$11>>2]|0;
   (_fclose(($12|0))|0);
  }
  $13 = $i;
  _free($13);
 }
 $14 = HEAP32[8696>>2]|0;
 HEAP32[8704>>2] = $14;
 while(1) {
  $15 = HEAP32[8712>>2]|0;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   break;
  }
  $17 = HEAP32[8712>>2]|0;
  $s = $17;
  $18 = $s;
  $19 = (($18) + 516|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP32[8712>>2] = $20;
  $21 = $s;
  _free($21);
 }
 STACKTOP = sp;return;
}
function _closeinput() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8408>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  HEAP32[8408>>2] = 2;
  HEAP8[8720>>0] = 0;
  HEAP32[8976>>2] = 0;
  return;
 }
 $2 = HEAP32[8704>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[8704>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  (_fclose(($6|0))|0);
  $7 = HEAP32[8704>>2]|0;
  HEAP32[$7>>2] = 0;
 }
 $8 = HEAP32[8704>>2]|0;
 $9 = (($8) + 272|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = HEAP32[8704>>2]|0;
  $13 = (($12) + 272|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[8704>>2] = $14;
 } else {
  HEAP32[8408>>2] = 2;
 }
 HEAP8[8720>>0] = 0;
 HEAP32[8976>>2] = 0;
 return;
}
function _lexerror() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, $l = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $0 = HEAP32[8408>>2]|0;
 $1 = ($0|0)==(1);
 if (!($1)) {
  $2 = HEAP32[8704>>2]|0;
  $3 = (($2) + 4|0);
  $4 = (_strcmp($3,8984)|0);
  $5 = ($4|0)==(0);
  if (!($5)) {
   $17 = HEAP32[8704>>2]|0;
   $18 = (($17) + 4|0);
   HEAP32[$vararg_buffer3>>2] = $18;
   _Write(9024,$vararg_buffer3);
   $19 = HEAP32[8704>>2]|0;
   $20 = (($19) + 260|0);
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $21;
   _Write(9040,$vararg_buffer5);
   $22 = HEAP32[8704>>2]|0;
   $23 = (($22) + 264|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$vararg_buffer8>>2] = $24;
   _Write(9056,$vararg_buffer8);
   while(1) {
    $25 = HEAP32[8408>>2]|0;
    $26 = ($25|0)!=(2);
    if (!($26)) {
     break;
    }
    _closeinput();
   }
   STACKTOP = sp;return;
  }
 }
 $6 = HEAP32[8704>>2]|0;
 $7 = (($6) + 264|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_GetOption(8992)|0);
 $10 = (_strlen(($9|0))|0);
 $11 = (($8) + ($10))|0;
 $l = $11;
 $k = 1;
 while(1) {
  $12 = $k;
  $13 = $l;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  _Write(9008,$vararg_buffer);
  $15 = $k;
  $16 = (($15) + 1)|0;
  $k = $16;
 }
 _Write(9016,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _getPositionCode() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[8408>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $k = 0;
 $3 = HEAP32[8696>>2]|0;
 $i = $3;
 while(1) {
  $4 = $i;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = $i;
   $7 = HEAP32[8704>>2]|0;
   $8 = ($6|0)!=($7|0);
   $24 = $8;
  } else {
   $24 = 0;
  }
  if (!($24)) {
   break;
  }
  $9 = $i;
  $10 = (($9) + 268|0);
  $11 = HEAP32[$10>>2]|0;
  $i = $11;
  $12 = $k;
  $13 = (($12) + 1)|0;
  $k = $13;
 }
 $14 = $i;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $k;
  $17 = $i;
  $18 = (($17) + 260|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19*10)|0;
  $21 = (($16) + ($20))|0;
  $22 = $21;
 } else {
  $22 = 0;
 }
 $0 = $22;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _posCodeFileName($positionCode) {
 $positionCode = $positionCode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $k = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $positionCode;
 $k = 0;
 $1 = $0;
 $2 = (($1|0) % 10)&-1;
 $pos = $2;
 $3 = HEAP32[8696>>2]|0;
 $i = $3;
 while(1) {
  $4 = $i;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = $k;
   $7 = $pos;
   $8 = ($6|0)!=($7|0);
   $19 = $8;
  } else {
   $19 = 0;
  }
  if (!($19)) {
   break;
  }
  $9 = $i;
  $10 = (($9) + 268|0);
  $11 = HEAP32[$10>>2]|0;
  $i = $11;
  $12 = $k;
  $13 = (($12) + 1)|0;
  $k = $13;
 }
 $14 = $i;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $i;
  $17 = (($16) + 4|0);
  $18 = $17;
  STACKTOP = sp;return ($18|0);
 } else {
  $18 = 8984;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _posCodeLinenr($positionCode) {
 $positionCode = $positionCode|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $positionCode;
 $1 = $0;
 $2 = (($1|0) / 10)&-1;
 STACKTOP = sp;return ($2|0);
}
function _openfileinput($filename) {
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $filename;
 $1 = HEAP32[8408>>2]|0;
 $2 = ($1|0)!=(2);
 if ($2) {
  $3 = HEAP32[8408>>2]|0;
  $4 = ($3|0)!=(0);
  if ($4) {
   _parseerror(20);
  }
 }
 $5 = HEAP32[8408>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = (_malloc(276)|0);
  $i = $7;
  $8 = $i;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   _parseerror(21);
  }
  $10 = HEAP32[8704>>2]|0;
  $11 = $i;
  $12 = (($11) + 272|0);
  HEAP32[$12>>2] = $10;
  $13 = $i;
  HEAP32[8704>>2] = $13;
  $14 = HEAP32[8696>>2]|0;
  $15 = $i;
  $16 = (($15) + 268|0);
  HEAP32[$16>>2] = $14;
  $17 = $i;
  HEAP32[8696>>2] = $17;
 }
 HEAP32[8408>>2] = 0;
 $18 = HEAP32[8704>>2]|0;
 $19 = (($18) + 4|0);
 $20 = (_strcpy(($19|0),(8984|0))|0);
 $21 = $0;
 (_strncat($20,$21,255)|0);
 $22 = HEAP32[8704>>2]|0;
 $23 = (($22) + 264|0);
 HEAP32[$23>>2] = 0;
 $24 = HEAP32[8704>>2]|0;
 $25 = (($24) + 260|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[8704>>2]|0;
 $27 = (($26) + 4|0);
 $28 = (_fopen(($27|0),(9072|0))|0);
 $29 = HEAP32[8704>>2]|0;
 HEAP32[$29>>2] = $28;
 $30 = HEAP32[8704>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if (!($32)) {
  HEAP8[8720>>0] = 0;
  HEAP32[8976>>2] = 0;
  STACKTOP = sp;return;
 }
 $33 = HEAP32[8704>>2]|0;
 $34 = (($33) + 4|0);
 HEAP32[$vararg_buffer>>2] = $34;
 _Write(9080,$vararg_buffer);
 HEAP8[8720>>0] = 0;
 HEAP32[8976>>2] = 0;
 STACKTOP = sp;return;
}
function _openinput($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 while(1) {
  $1 = HEAP32[8408>>2]|0;
  $2 = ($1|0)!=(2);
  if (!($2)) {
   break;
  }
  _closeinput();
 }
 HEAP32[8408>>2] = 1;
 $3 = HEAP32[8704>>2]|0;
 $4 = (($3) + 4|0);
 (_strcpy(($4|0),(8984|0))|0);
 $5 = (_strcpy((8720|0),(8984|0))|0);
 $6 = $0;
 (_strncat($5,$6,255)|0);
 $7 = HEAP32[8704>>2]|0;
 $8 = (($7) + 264|0);
 HEAP32[$8>>2] = 0;
 HEAP32[8976>>2] = 0;
 STACKTOP = sp;return;
}
function _gettoken() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $syn = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _getprimarytoken();
 $0 = HEAP32[9112>>2]|0;
 $1 = ($0|0)!=(5);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[9112>>2]|0;
 $3 = ($2|0)!=(4);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[8712>>2]|0;
 $syn = $4;
 while(1) {
  $5 = $syn;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 9;
   break;
  }
  $7 = $syn;
  $8 = (_strcmp(9120,$7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   label = 6;
   break;
  }
  $15 = $syn;
  $16 = (($15) + 516|0);
  $17 = HEAP32[$16>>2]|0;
  $syn = $17;
 }
 if ((label|0) == 6) {
  $10 = $syn;
  $11 = (($10) + 256|0);
  (_strcpy((9120|0),($11|0))|0);
  $12 = $syn;
  $13 = (($12) + 512|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[9112>>2] = $14;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
}
function _getprimarytoken() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $ch = 0, $comments = 0, $count = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $count = 0;
 while(1) {
  $0 = (_getnext()|0);
  $ch = $0;
  $1 = (_isspace($0)|0);
  $2 = ($1|0)!=(0);
  if (!($2)) {
   break;
  }
 }
 $3 = HEAP32[8704>>2]|0;
 $4 = (($3) + 264|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[9376>>2] = $5;
 $6 = HEAP32[9376>>2]|0;
 $7 = HEAP32[9384>>2]|0;
 $8 = ($6|0)<($7|0);
 if ($8) {
  $9 = $ch;
  _ungetnext($9);
  HEAP32[9112>>2] = 27;
  $10 = $count;
  $11 = (($10) + 1)|0;
  $count = $11;
  $12 = (9120 + ($10)|0);
  HEAP8[$12>>0] = 0;
  STACKTOP = sp;return;
 }
 $13 = $ch;
 $14 = (_isdigit($13)|0);
 $15 = ($14|0)!=(0);
 if ($15) {
  HEAP32[9112>>2] = 0;
  while(1) {
   $16 = $ch;
   $17 = (_isdigit($16)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    break;
   }
   $19 = $ch;
   $20 = $19&255;
   $21 = $count;
   $22 = (($21) + 1)|0;
   $count = $22;
   $23 = (9120 + ($21)|0);
   HEAP8[$23>>0] = $20;
   $24 = (_getnext()|0);
   $ch = $24;
  }
  $25 = $ch;
  $26 = ($25|0)==(46);
  if ($26) {
   $27 = (_getnext()|0);
   $ch = $27;
   $28 = $ch;
   $29 = (_isdigit($28)|0);
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $count;
    $32 = (($31) + 1)|0;
    $count = $32;
    $33 = (9120 + ($31)|0);
    HEAP8[$33>>0] = 46;
   } else {
    $34 = $ch;
    _ungetnext($34);
    $ch = 46;
   }
   while(1) {
    $35 = $ch;
    $36 = (_isdigit($35)|0);
    $37 = ($36|0)!=(0);
    if (!($37)) {
     break;
    }
    $38 = $ch;
    $39 = $38&255;
    $40 = $count;
    $41 = (($40) + 1)|0;
    $count = $41;
    $42 = (9120 + ($40)|0);
    HEAP8[$42>>0] = $39;
    $43 = (_getnext()|0);
    $ch = $43;
   }
  }
  $44 = $count;
  $45 = (($44) + 1)|0;
  $count = $45;
  $46 = (9120 + ($44)|0);
  HEAP8[$46>>0] = 0;
  $47 = $ch;
  _ungetnext($47);
  STACKTOP = sp;return;
 }
 $48 = $ch;
 $49 = (_isalpha($48)|0);
 $50 = ($49|0)!=(0);
 if (!($50)) {
  $51 = $ch;
  $52 = ($51|0)==(95);
  if (!($52)) {
   $95 = $ch;
   $96 = ($95|0)==(36);
   if ($96) {
    $97 = (_getnext()|0);
    $ch = $97;
    $98 = $ch;
    $99 = (97)<=($98|0);
    if ($99) {
     $100 = $ch;
     $101 = ($100|0)<=(122);
     if ($101) {
      label = 54;
     } else {
      label = 53;
     }
    } else {
     label = 53;
    }
    if ((label|0) == 53) {
     $102 = $ch;
     $103 = ($102|0)==(95);
     if ($103) {
      label = 54;
     } else {
      _parseerror(25);
     }
    }
    if ((label|0) == 54) {
     HEAP32[9112>>2] = 3;
     while(1) {
      $104 = $ch;
      $105 = (_isalpha($104)|0);
      $106 = ($105|0)!=(0);
      if ($106) {
       $439 = 1;
      } else {
       $107 = $ch;
       $108 = (_isdigit($107)|0);
       $109 = ($108|0)!=(0);
       if ($109) {
        $439 = 1;
       } else {
        $110 = $ch;
        $111 = ($110|0)==(95);
        $439 = $111;
       }
      }
      if (!($439)) {
       break;
      }
      $112 = $ch;
      $113 = $112&255;
      $114 = $count;
      $115 = (($114) + 1)|0;
      $count = $115;
      $116 = (9120 + ($114)|0);
      HEAP8[$116>>0] = $113;
      $117 = (_getnext()|0);
      $ch = $117;
     }
     $118 = $count;
     $119 = (($118) + 1)|0;
     $count = $119;
     $120 = (9120 + ($118)|0);
     HEAP8[$120>>0] = 0;
     $121 = $ch;
     _ungetnext($121);
    }
    STACKTOP = sp;return;
   }
   $122 = $ch;
   $123 = ($122|0)==(39);
   if ($123) {
    HEAP32[9112>>2] = 4;
    $124 = (_getnext()|0);
    $ch = $124;
    $125 = $ch;
    $126 = (_isprint($125)|0);
    $127 = ($126|0)!=(0);
    if (!($127)) {
     _parseerror(26);
    }
    $128 = $ch;
    $129 = ($128|0)==(92);
    if ($129) {
     $130 = (_getnext()|0);
     $ch = $130;
     $131 = $ch;
     switch ($131|0) {
     case 120:  {
      $132 = (_getnext()|0);
      $133 = $132&255;
      $134 = (_makehex($133)|0);
      $135 = $134 << 24 >> 24;
      $136 = $135<<4;
      $137 = (_getnext()|0);
      $138 = $137&255;
      $139 = (_makehex($138)|0);
      $140 = $139 << 24 >> 24;
      $141 = (($136) + ($140))|0;
      $ch = $141;
      break;
     }
     case 101:  {
      $ch = 27;
      break;
     }
     case 110:  {
      $ch = 10;
      break;
     }
     case 97:  {
      $ch = 7;
      break;
     }
     case 116:  {
      $ch = 9;
      break;
     }
     case 118:  {
      $ch = 11;
      break;
     }
     case 114:  {
      $ch = 13;
      break;
     }
     case 98:  {
      $ch = 8;
      break;
     }
     case 102:  {
      $ch = 12;
      break;
     }
     default: {
     }
     }
    }
    $142 = $ch;
    $143 = $142&255;
    $144 = $count;
    $145 = (($144) + 1)|0;
    $count = $145;
    $146 = (9120 + ($144)|0);
    HEAP8[$146>>0] = $143;
    $147 = (_getnext()|0);
    $ch = $147;
    $148 = $ch;
    $149 = ($148|0)!=(39);
    if ($149) {
     _parseerror(27);
    }
    $150 = $count;
    $151 = (($150) + 1)|0;
    $count = $151;
    $152 = (9120 + ($150)|0);
    HEAP8[$152>>0] = 0;
    STACKTOP = sp;return;
   }
   $153 = $ch;
   $154 = ($153|0)==(34);
   if ($154) {
    HEAP32[9112>>2] = 5;
    $155 = (_getnext()|0);
    $ch = $155;
    while(1) {
     $156 = $ch;
     $157 = (_isprint($156)|0);
     $158 = ($157|0)!=(0);
     if ($158) {
      $159 = $ch;
      $160 = ($159|0)!=(34);
      $440 = $160;
     } else {
      $440 = 0;
     }
     if (!($440)) {
      break;
     }
     $161 = $ch;
     $162 = ($161|0)==(92);
     if ($162) {
      $163 = (_getnext()|0);
      $ch = $163;
      $164 = $ch;
      switch ($164|0) {
      case 114:  {
       $ch = 13;
       break;
      }
      case 118:  {
       $ch = 11;
       break;
      }
      case 110:  {
       $ch = 10;
       break;
      }
      case 102:  {
       $ch = 12;
       break;
      }
      case 98:  {
       $ch = 8;
       break;
      }
      case 116:  {
       $ch = 9;
       break;
      }
      case 97:  {
       $ch = 7;
       break;
      }
      case 120:  {
       $165 = (_getnext()|0);
       $166 = $165&255;
       $167 = (_makehex($166)|0);
       $168 = $167 << 24 >> 24;
       $169 = $168<<4;
       $170 = (_getnext()|0);
       $171 = $170&255;
       $172 = (_makehex($171)|0);
       $173 = $172 << 24 >> 24;
       $174 = (($169) + ($173))|0;
       $ch = $174;
       break;
      }
      case 101:  {
       $ch = 27;
       break;
      }
      default: {
      }
      }
     }
     $175 = $ch;
     $176 = $175&255;
     $177 = $count;
     $178 = (($177) + 1)|0;
     $count = $178;
     $179 = (9120 + ($177)|0);
     HEAP8[$179>>0] = $176;
     $180 = (_getnext()|0);
     $ch = $180;
    }
    $181 = $ch;
    $182 = ($181|0)!=(34);
    if ($182) {
     _parseerror(28);
    }
    $183 = $count;
    $184 = (($183) + 1)|0;
    $count = $184;
    $185 = (9120 + ($183)|0);
    HEAP8[$185>>0] = 0;
    STACKTOP = sp;return;
   }
   $186 = $ch;
   $187 = ($186|0)==(40);
   if ($187) {
    HEAP32[9112>>2] = 6;
    $188 = $ch;
    $189 = $188&255;
    $190 = $count;
    $191 = (($190) + 1)|0;
    $count = $191;
    $192 = (9120 + ($190)|0);
    HEAP8[$192>>0] = $189;
    $193 = $count;
    $194 = (($193) + 1)|0;
    $count = $194;
    $195 = (9120 + ($193)|0);
    HEAP8[$195>>0] = 0;
    STACKTOP = sp;return;
   }
   $196 = $ch;
   $197 = ($196|0)==(41);
   if ($197) {
    HEAP32[9112>>2] = 7;
    $198 = $ch;
    $199 = $198&255;
    $200 = $count;
    $201 = (($200) + 1)|0;
    $count = $201;
    $202 = (9120 + ($200)|0);
    HEAP8[$202>>0] = $199;
    $203 = $count;
    $204 = (($203) + 1)|0;
    $count = $204;
    $205 = (9120 + ($203)|0);
    HEAP8[$205>>0] = 0;
    STACKTOP = sp;return;
   }
   $206 = $ch;
   $207 = ($206|0)==(59);
   if ($207) {
    HEAP32[9112>>2] = 8;
    $208 = $ch;
    $209 = $208&255;
    $210 = $count;
    $211 = (($210) + 1)|0;
    $count = $211;
    $212 = (9120 + ($210)|0);
    HEAP8[$212>>0] = $209;
    $213 = $count;
    $214 = (($213) + 1)|0;
    $count = $214;
    $215 = (9120 + ($213)|0);
    HEAP8[$215>>0] = 0;
    STACKTOP = sp;return;
   }
   $216 = $ch;
   $217 = ($216|0)==(44);
   if ($217) {
    HEAP32[9112>>2] = 9;
    $218 = $ch;
    $219 = $218&255;
    $220 = $count;
    $221 = (($220) + 1)|0;
    $count = $221;
    $222 = (9120 + ($220)|0);
    HEAP8[$222>>0] = $219;
    $223 = $count;
    $224 = (($223) + 1)|0;
    $count = $224;
    $225 = (9120 + ($223)|0);
    HEAP8[$225>>0] = 0;
    STACKTOP = sp;return;
   }
   $226 = $ch;
   $227 = ($226|0)==(91);
   if ($227) {
    HEAP32[9112>>2] = 10;
    $228 = $ch;
    $229 = $228&255;
    $230 = $count;
    $231 = (($230) + 1)|0;
    $count = $231;
    $232 = (9120 + ($230)|0);
    HEAP8[$232>>0] = $229;
    $233 = $count;
    $234 = (($233) + 1)|0;
    $count = $234;
    $235 = (9120 + ($233)|0);
    HEAP8[$235>>0] = 0;
    STACKTOP = sp;return;
   }
   $236 = $ch;
   $237 = ($236|0)==(93);
   if ($237) {
    HEAP32[9112>>2] = 11;
    $238 = $ch;
    $239 = $238&255;
    $240 = $count;
    $241 = (($240) + 1)|0;
    $count = $241;
    $242 = (9120 + ($240)|0);
    HEAP8[$242>>0] = $239;
    $243 = $count;
    $244 = (($243) + 1)|0;
    $count = $244;
    $245 = (9120 + ($243)|0);
    HEAP8[$245>>0] = 0;
    STACKTOP = sp;return;
   }
   $246 = $ch;
   $247 = ($246|0)==(123);
   if ($247) {
    HEAP32[9112>>2] = 12;
    $248 = $ch;
    $249 = $248&255;
    $250 = $count;
    $251 = (($250) + 1)|0;
    $count = $251;
    $252 = (9120 + ($250)|0);
    HEAP8[$252>>0] = $249;
    $253 = $count;
    $254 = (($253) + 1)|0;
    $count = $254;
    $255 = (9120 + ($253)|0);
    HEAP8[$255>>0] = 0;
    STACKTOP = sp;return;
   }
   $256 = $ch;
   $257 = ($256|0)==(125);
   if ($257) {
    HEAP32[9112>>2] = 13;
    $258 = $ch;
    $259 = $258&255;
    $260 = $count;
    $261 = (($260) + 1)|0;
    $count = $261;
    $262 = (9120 + ($260)|0);
    HEAP8[$262>>0] = $259;
    $263 = $count;
    $264 = (($263) + 1)|0;
    $count = $264;
    $265 = (9120 + ($263)|0);
    HEAP8[$265>>0] = 0;
    STACKTOP = sp;return;
   }
   $266 = $ch;
   $267 = ($266|0)==(124);
   if ($267) {
    HEAP32[9112>>2] = 14;
    $268 = $ch;
    $269 = $268&255;
    $270 = $count;
    $271 = (($270) + 1)|0;
    $count = $271;
    $272 = (9120 + ($270)|0);
    HEAP8[$272>>0] = $269;
    $273 = (_getnext()|0);
    $ch = $273;
    $274 = $ch;
    $275 = ($274|0)==(124);
    if (!($275)) {
     $284 = $count;
     $285 = (($284) + 1)|0;
     $count = $285;
     $286 = (9120 + ($284)|0);
     HEAP8[$286>>0] = 0;
     $287 = $ch;
     _ungetnext($287);
     STACKTOP = sp;return;
    }
    while(1) {
     $276 = $ch;
     $277 = ($276|0)!=(10);
     if (!($277)) {
      label = 125;
      break;
     }
     $278 = (_getnext()|0);
     $ch = $278;
     $279 = $ch;
     $280 = ($279|0)==(-1);
     if ($280) {
      label = 123;
      break;
     }
    }
    if ((label|0) == 123) {
     HEAP32[9112>>2] = 28;
     $281 = $count;
     $282 = (($281) + 1)|0;
     $count = $282;
     $283 = (9120 + ($281)|0);
     HEAP8[$283>>0] = 0;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 125) {
     _gettoken();
     STACKTOP = sp;return;
    }
   }
   $288 = $ch;
   $289 = ($288|0)==(46);
   if ($289) {
    HEAP32[9112>>2] = 3;
    $290 = $ch;
    $291 = $290&255;
    $292 = $count;
    $293 = (($292) + 1)|0;
    $count = $293;
    $294 = (9120 + ($292)|0);
    HEAP8[$294>>0] = $291;
    $295 = (_getnext()|0);
    $ch = $295;
    $296 = $ch;
    $297 = ($296|0)==(46);
    if ($297) {
     HEAP32[9112>>2] = 19;
     $298 = $ch;
     $299 = $298&255;
     $300 = $count;
     $301 = (($300) + 1)|0;
     $count = $301;
     $302 = (9120 + ($300)|0);
     HEAP8[$302>>0] = $299;
     $303 = (_getnext()|0);
     $ch = $303;
    }
    $304 = $count;
    $305 = (($304) + 1)|0;
    $count = $305;
    $306 = (9120 + ($304)|0);
    HEAP8[$306>>0] = 0;
    $307 = $ch;
    _ungetnext($307);
    STACKTOP = sp;return;
   }
   $308 = $ch;
   $309 = ($308|0)==(47);
   if ($309) {
    $310 = (_getnext()|0);
    $ch = $310;
    $311 = $ch;
    $312 = ($311|0)==(42);
    if ($312) {
     $comments = 1;
     while(1) {
      $313 = $comments;
      $314 = ($313|0)>(0);
      if (!($314)) {
       break;
      }
      $315 = (_getnext()|0);
      $ch = $315;
      $316 = $ch;
      $317 = ($316|0)==(-1);
      if ($317) {
       _parseerror(29);
      } else {
       $318 = $ch;
       $319 = ($318|0)==(47);
       if ($319) {
        $320 = (_getnext()|0);
        $ch = $320;
        $321 = $ch;
        $322 = ($321|0)==(42);
        if ($322) {
         $323 = $comments;
         $324 = (($323) + 1)|0;
         $comments = $324;
        } else {
         $325 = $ch;
         _ungetnext($325);
        }
       } else {
        $326 = $ch;
        $327 = ($326|0)==(42);
        if ($327) {
         $328 = (_getnext()|0);
         $ch = $328;
         $329 = $ch;
         $330 = ($329|0)==(47);
         if ($330) {
          $331 = $comments;
          $332 = (($331) + -1)|0;
          $comments = $332;
         } else {
          $333 = $ch;
          _ungetnext($333);
         }
        }
       }
      }
     }
     _gettoken();
     STACKTOP = sp;return;
    } else {
     HEAP32[9112>>2] = 3;
     $334 = $count;
     $335 = (($334) + 1)|0;
     $count = $335;
     $336 = (9120 + ($334)|0);
     HEAP8[$336>>0] = 47;
     while(1) {
      $337 = $ch;
      $338 = (_ispunct($337)|0);
      $339 = ($338|0)!=(0);
      do {
       if ($339) {
        $340 = $ch;
        $341 = ($340|0)!=(40);
        if (!($341)) {
         $441 = 0;
         break;
        }
        $342 = $ch;
        $343 = ($342|0)!=(41);
        if (!($343)) {
         $441 = 0;
         break;
        }
        $344 = $ch;
        $345 = ($344|0)!=(91);
        if (!($345)) {
         $441 = 0;
         break;
        }
        $346 = $ch;
        $347 = ($346|0)!=(93);
        if (!($347)) {
         $441 = 0;
         break;
        }
        $348 = $ch;
        $349 = ($348|0)!=(123);
        if (!($349)) {
         $441 = 0;
         break;
        }
        $350 = $ch;
        $351 = ($350|0)!=(125);
        if (!($351)) {
         $441 = 0;
         break;
        }
        $352 = $ch;
        $353 = ($352|0)!=(124);
        if (!($353)) {
         $441 = 0;
         break;
        }
        $354 = $ch;
        $355 = ($354|0)!=(59);
        if (!($355)) {
         $441 = 0;
         break;
        }
        $356 = $ch;
        $357 = ($356|0)!=(44);
        if (!($357)) {
         $441 = 0;
         break;
        }
        $358 = $ch;
        $359 = ($358|0)!=(39);
        if (!($359)) {
         $441 = 0;
         break;
        }
        $360 = $ch;
        $361 = ($360|0)!=(34);
        if (!($361)) {
         $441 = 0;
         break;
        }
        $362 = $ch;
        $363 = ($362|0)!=(46);
        if (!($363)) {
         $441 = 0;
         break;
        }
        $364 = $ch;
        $365 = ($364|0)!=(95);
        $441 = $365;
       } else {
        $441 = 0;
       }
      } while(0);
      if (!($441)) {
       break;
      }
      $366 = $ch;
      $367 = $366&255;
      $368 = $count;
      $369 = (($368) + 1)|0;
      $count = $369;
      $370 = (9120 + ($368)|0);
      HEAP8[$370>>0] = $367;
      $371 = (_getnext()|0);
      $ch = $371;
     }
     $372 = $count;
     $373 = (($372) + 1)|0;
     $count = $373;
     $374 = (9120 + ($372)|0);
     HEAP8[$374>>0] = 0;
     $375 = $ch;
     _ungetnext($375);
     STACKTOP = sp;return;
    }
   }
   $376 = $ch;
   $377 = (_ispunct($376)|0);
   $378 = ($377|0)!=(0);
   if (!($378)) {
    HEAP32[9112>>2] = 28;
    $434 = $count;
    $435 = (($434) + 1)|0;
    $count = $435;
    $436 = (9120 + ($434)|0);
    HEAP8[$436>>0] = 0;
    $437 = $ch;
    _ungetnext($437);
    STACKTOP = sp;return;
   }
   HEAP32[9112>>2] = 3;
   while(1) {
    $379 = $ch;
    $380 = (_ispunct($379)|0);
    $381 = ($380|0)!=(0);
    do {
     if ($381) {
      $382 = $ch;
      $383 = ($382|0)!=(40);
      if (!($383)) {
       $442 = 0;
       break;
      }
      $384 = $ch;
      $385 = ($384|0)!=(41);
      if (!($385)) {
       $442 = 0;
       break;
      }
      $386 = $ch;
      $387 = ($386|0)!=(91);
      if (!($387)) {
       $442 = 0;
       break;
      }
      $388 = $ch;
      $389 = ($388|0)!=(93);
      if (!($389)) {
       $442 = 0;
       break;
      }
      $390 = $ch;
      $391 = ($390|0)!=(123);
      if (!($391)) {
       $442 = 0;
       break;
      }
      $392 = $ch;
      $393 = ($392|0)!=(125);
      if (!($393)) {
       $442 = 0;
       break;
      }
      $394 = $ch;
      $395 = ($394|0)!=(124);
      if (!($395)) {
       $442 = 0;
       break;
      }
      $396 = $ch;
      $397 = ($396|0)!=(59);
      if (!($397)) {
       $442 = 0;
       break;
      }
      $398 = $ch;
      $399 = ($398|0)!=(44);
      if (!($399)) {
       $442 = 0;
       break;
      }
      $400 = $ch;
      $401 = ($400|0)!=(39);
      if (!($401)) {
       $442 = 0;
       break;
      }
      $402 = $ch;
      $403 = ($402|0)!=(34);
      if (!($403)) {
       $442 = 0;
       break;
      }
      $404 = $ch;
      $405 = ($404|0)!=(46);
      if (!($405)) {
       $442 = 0;
       break;
      }
      $406 = $ch;
      $407 = ($406|0)!=(95);
      $442 = $407;
     } else {
      $442 = 0;
     }
    } while(0);
    if (!($442)) {
     break;
    }
    $408 = $ch;
    $409 = $408&255;
    $410 = $count;
    $411 = (($410) + 1)|0;
    $count = $411;
    $412 = (9120 + ($410)|0);
    HEAP8[$412>>0] = $409;
    $413 = (_getnext()|0);
    $ch = $413;
   }
   $414 = $count;
   $415 = (($414) + 1)|0;
   $count = $415;
   $416 = (9120 + ($414)|0);
   HEAP8[$416>>0] = 0;
   $417 = $ch;
   _ungetnext($417);
   $418 = (_strcmp(9120,9488)|0);
   $419 = ($418|0)==(0);
   if ($419) {
    HEAP32[9112>>2] = 17;
   } else {
    $420 = (_strcmp(9120,9496)|0);
    $421 = ($420|0)==(0);
    if ($421) {
     HEAP32[9112>>2] = 18;
    } else {
     $422 = (_strcmp(9120,9504)|0);
     $423 = ($422|0)==(0);
     if ($423) {
      HEAP32[9112>>2] = 23;
     } else {
      $424 = (_strcmp(9120,9512)|0);
      $425 = ($424|0)==(0);
      if ($425) {
       HEAP32[9112>>2] = 20;
      } else {
       $426 = (_strcmp(9120,9520)|0);
       $427 = ($426|0)==(0);
       if ($427) {
        HEAP32[9112>>2] = 21;
       } else {
        $428 = (_strcmp(9120,9528)|0);
        $429 = ($428|0)==(0);
        if ($429) {
         HEAP32[9112>>2] = 22;
        } else {
         $430 = (_strcmp(9120,9536)|0);
         $431 = ($430|0)==(0);
         if ($431) {
          HEAP32[9112>>2] = 1;
         } else {
          $432 = (_strcmp(9120,9544)|0);
          $433 = ($432|0)==(0);
          if ($433) {
           HEAP32[9112>>2] = 1;
          }
         }
        }
       }
      }
     }
    }
   }
   STACKTOP = sp;return;
  }
 }
 $53 = $ch;
 $54 = (65)<=($53|0);
 if ($54) {
  $55 = $ch;
  $56 = ($55|0)<=(90);
  if ($56) {
   HEAP32[9112>>2] = 2;
  } else {
   label = 24;
  }
 } else {
  label = 24;
 }
 if ((label|0) == 24) {
  HEAP32[9112>>2] = 1;
 }
 while(1) {
  $57 = $ch;
  $58 = (_isalpha($57)|0);
  $59 = ($58|0)!=(0);
  if ($59) {
   $438 = 1;
  } else {
   $60 = $ch;
   $61 = (_isdigit($60)|0);
   $62 = ($61|0)!=(0);
   if ($62) {
    $438 = 1;
   } else {
    $63 = $ch;
    $64 = ($63|0)==(95);
    $438 = $64;
   }
  }
  if (!($438)) {
   break;
  }
  $65 = $ch;
  $66 = $65&255;
  $67 = $count;
  $68 = (($67) + 1)|0;
  $count = $68;
  $69 = (9120 + ($67)|0);
  HEAP8[$69>>0] = $66;
  $70 = (_getnext()|0);
  $ch = $70;
 }
 $71 = $count;
 $72 = (($71) + 1)|0;
 $count = $72;
 $73 = (9120 + ($71)|0);
 HEAP8[$73>>0] = 0;
 $74 = $ch;
 _ungetnext($74);
 $75 = (_strcmp(9120,9400)|0);
 $76 = ($75|0)==(0);
 if ($76) {
  HEAP32[9112>>2] = 15;
 }
 $77 = (_strcmp(9120,9408)|0);
 $78 = ($77|0)==(0);
 if ($78) {
  HEAP32[9112>>2] = 16;
 }
 $79 = (_strcmp(9120,9424)|0);
 $80 = ($79|0)==(0);
 if ($80) {
  HEAP32[9112>>2] = 24;
 }
 $81 = (_strcmp(9120,9432)|0);
 $82 = ($81|0)==(0);
 if ($82) {
  HEAP32[9112>>2] = 25;
 }
 $83 = (_strcmp(9120,9440)|0);
 $84 = ($83|0)==(0);
 if ($84) {
  HEAP32[9112>>2] = 26;
 }
 $85 = (_strcmp(9120,9448)|0);
 $86 = ($85|0)==(0);
 if ($86) {
  HEAP32[9112>>2] = 1;
 }
 $87 = (_strcmp(9120,9456)|0);
 $88 = ($87|0)==(0);
 if ($88) {
  HEAP32[9112>>2] = 1;
 }
 $89 = (_strcmp(9120,9464)|0);
 $90 = ($89|0)==(0);
 if ($90) {
  HEAP32[9112>>2] = 1;
 }
 $91 = (_strcmp(9120,9472)|0);
 $92 = ($91|0)==(0);
 if ($92) {
  $93 = HEAP32[9392>>2]|0;
  $94 = (($93) + 1)|0;
  HEAP32[9392>>2] = $94;
  HEAP32[$vararg_buffer>>2] = $93;
  (_sprintf(9120,9480,$vararg_buffer)|0);
 }
 STACKTOP = sp;return;
}
function _getnext() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[8976>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = HEAP32[8976>>2]|0;
  $4 = (($3) + -1)|0;
  HEAP32[8976>>2] = $4;
  $5 = (9552 + ($4<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $ch = $6;
  $7 = HEAP32[8704>>2]|0;
  $8 = (($7) + 264|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[$8>>2] = $10;
  $11 = $ch;
  $0 = $11;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $12 = HEAP32[8408>>2]|0;
 $13 = ($12|0)==(2);
 if ($13) {
  _systemerror(9);
 }
 $14 = HEAP32[8704>>2]|0;
 $15 = (($14) + 264|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)>(0);
 do {
  if ($17) {
   $18 = HEAP32[8704>>2]|0;
   $19 = (($18) + 264|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) - 1)|0;
   $22 = (8720 + ($21)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = HEAP32[8408>>2]|0;
    $27 = ($26|0)==(1);
    if ($27) {
     $0 = -1;
     $58 = $0;
     STACKTOP = sp;return ($58|0);
    }
    $28 = HEAP32[8704>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0|0);
    if (!($30)) {
     $31 = HEAP32[8704>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $33 = (_fgets((8720|0),256,($32|0))|0);
     $34 = ($33|0)!=(0|0);
     if ($34) {
      $39 = HEAP32[8704>>2]|0;
      $40 = (($39) + 260|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($41) + 1)|0;
      HEAP32[$40>>2] = $42;
      $43 = HEAP32[8704>>2]|0;
      $44 = (($43) + 264|0);
      HEAP32[$44>>2] = 0;
      $45 = (_preprocess()|0);
      $46 = ($45|0)!=(0);
      if (!($46)) {
       break;
      }
      $47 = (_getnext()|0);
      $0 = $47;
      $58 = $0;
      STACKTOP = sp;return ($58|0);
     }
    }
    _closeinput();
    $35 = HEAP32[8408>>2]|0;
    $36 = ($35|0)==(0);
    if ($36) {
     $37 = (_getnext()|0);
     $38 = $37;
    } else {
     $38 = -1;
    }
    $0 = $38;
    $58 = $0;
    STACKTOP = sp;return ($58|0);
   }
  }
 } while(0);
 $48 = HEAP32[8704>>2]|0;
 $49 = (($48) + 264|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + 1)|0;
 HEAP32[$49>>2] = $51;
 $52 = (8720 + ($50)|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53 << 24 >> 24;
 $ch = $54;
 $55 = $ch;
 $56 = ($55|0)==(0);
 if ($56) {
  $ch = 10;
 }
 $57 = $ch;
 $0 = $57;
 $58 = $0;
 STACKTOP = sp;return ($58|0);
}
function _ungetnext($ch) {
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ch;
 $1 = HEAP32[8976>>2]|0;
 $2 = ($1|0)>=(20);
 if ($2) {
  _parseerror(23);
 }
 $3 = $0;
 $4 = HEAP32[8976>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[8976>>2] = $5;
 $6 = (9552 + ($4<<2)|0);
 HEAP32[$6>>2] = $3;
 $7 = HEAP32[8704>>2]|0;
 $8 = (($7) + 264|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -1)|0;
 HEAP32[$8>>2] = $10;
 STACKTOP = sp;return;
}
function _makehex($ch) {
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ch;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)>=(48);
 if ($4) {
  $5 = $1;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)<=(57);
  if ($7) {
   $8 = $1;
   $9 = $8 << 24 >> 24;
   $10 = (($9) - 48)|0;
   $11 = $10&255;
   $0 = $11;
   $35 = $0;
   STACKTOP = sp;return ($35|0);
  }
 }
 $12 = $1;
 $13 = $12 << 24 >> 24;
 $14 = ($13|0)>=(65);
 if ($14) {
  $15 = $1;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)<=(70);
  if ($17) {
   $18 = $1;
   $19 = $18 << 24 >> 24;
   $20 = (($19) - 65)|0;
   $21 = (($20) + 10)|0;
   $22 = $21&255;
   $0 = $22;
   $35 = $0;
   STACKTOP = sp;return ($35|0);
  }
 }
 $23 = $1;
 $24 = $23 << 24 >> 24;
 $25 = ($24|0)>=(97);
 if ($25) {
  $26 = $1;
  $27 = $26 << 24 >> 24;
  $28 = ($27|0)<=(102);
  if ($28) {
   $29 = $1;
   $30 = $29 << 24 >> 24;
   $31 = (($30) - 97)|0;
   $32 = (($31) + 10)|0;
   $33 = $32&255;
   $0 = $33;
   $35 = $0;
   STACKTOP = sp;return ($35|0);
  }
 }
 _parseerror(24);
 $34 = $1;
 $0 = $34;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function _preprocess() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $assoc = 0, $globaltokenoffside = 0, $i = 0, $k = 0, $prio = 0, $s = 0, $syn = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = HEAP32[9384>>2]|0;
 $globaltokenoffside = $1;
 $s = 8720;
 $2 = $s;
 $3 = (_strncmp($2,9632,4)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $t = 8720;
  $k = 0;
  $s = ((8720 + 4|0));
  while(1) {
   $5 = $s;
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)!=(0);
   if (!($7)) {
    break;
   }
   $8 = $s;
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 << 24 >> 24;
   $11 = (0)<($10|0);
   if ($11) {
    $12 = $s;
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = ($14|0)<=(26);
    if ($15) {
     $16 = $s;
     $17 = HEAP8[$16>>0]|0;
     $18 = $17 << 24 >> 24;
     $27 = $18;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    label = 0;
    $19 = $s;
    $20 = HEAP8[$19>>0]|0;
    $21 = $20 << 24 >> 24;
    $22 = (($21) - 1)|0;
    $23 = $k;
    $24 = (($23|0) % 10)&-1;
    $25 = (($22) - ($24))|0;
    $27 = $25;
   }
   $26 = $27&255;
   $28 = $t;
   HEAP8[$28>>0] = $26;
   $29 = $t;
   $30 = (($29) + 1|0);
   $t = $30;
   $31 = $s;
   $32 = (($31) + 1|0);
   $s = $32;
   $33 = $k;
   $34 = (($33) + 1)|0;
   $k = $34;
  }
  $35 = $t;
  HEAP8[$35>>0] = 0;
 }
 $s = 8720;
 while(1) {
  $36 = $s;
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = (_isspace($38)|0);
  $40 = ($39|0)!=(0);
  if (!($40)) {
   break;
  }
  $41 = $s;
  $42 = (($41) + 1|0);
  $s = $42;
 }
 $43 = $s;
 $44 = (_strncmp($43,9640,7)|0);
 $45 = ($44|0)==(0);
 if ($45) {
  $46 = HEAP32[8696>>2]|0;
  $i = $46;
  $47 = $s;
  $48 = $47;
  $49 = (($48) - (8720))|0;
  $50 = (($49) + 7)|0;
  $51 = HEAP32[8704>>2]|0;
  $52 = (($51) + 264|0);
  HEAP32[$52>>2] = $50;
  HEAP32[9384>>2] = $50;
  _gettoken();
  $53 = HEAP32[9112>>2]|0;
  $54 = ($53|0)!=(5);
  if ($54) {
   _parseerror(22);
  }
  $55 = $globaltokenoffside;
  HEAP32[9384>>2] = $55;
  HEAP8[8720>>0] = 0;
  $56 = HEAP32[8704>>2]|0;
  $57 = (($56) + 264|0);
  HEAP32[$57>>2] = 0;
  while(1) {
   $58 = $i;
   $59 = (($58) + 268|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)!=(0|0);
   if ($61) {
    $62 = $i;
    $63 = (($62) + 4|0);
    $64 = (_strcmp(9120,$63)|0);
    $65 = ($64|0)!=(0);
    $122 = $65;
   } else {
    $122 = 0;
   }
   if (!($122)) {
    break;
   }
   $66 = $i;
   $67 = (($66) + 268|0);
   $68 = HEAP32[$67>>2]|0;
   $i = $68;
  }
  $69 = $i;
  $70 = (($69) + 268|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71|0)!=(0|0);
  if (!($72)) {
   _openfileinput(9120);
  }
  $0 = 1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $73 = $s;
 $74 = (_strncmp($73,9648,8)|0);
 $75 = ($74|0)==(0);
 if ($75) {
  $76 = (_malloc(520)|0);
  $syn = $76;
  $77 = $syn;
  $78 = ($77|0)==(0|0);
  if ($78) {
   _systemerror(4);
  }
  $79 = HEAP32[8712>>2]|0;
  $80 = $syn;
  $81 = (($80) + 516|0);
  HEAP32[$81>>2] = $79;
  $82 = $syn;
  HEAP32[8712>>2] = $82;
  $83 = $s;
  $84 = $83;
  $85 = (($84) - (8720))|0;
  $86 = (($85) + 8)|0;
  $87 = HEAP32[8704>>2]|0;
  $88 = (($87) + 264|0);
  HEAP32[$88>>2] = $86;
  HEAP32[9384>>2] = $86;
  _getprimarytoken();
  $89 = $syn;
  (_strcpy(($89|0),(9120|0))|0);
  _gettoken();
  $90 = $syn;
  $91 = (($90) + 256|0);
  (_strcpy(($91|0),(9120|0))|0);
  $92 = HEAP32[9112>>2]|0;
  $93 = $syn;
  $94 = (($93) + 512|0);
  HEAP32[$94>>2] = $92;
  $95 = $globaltokenoffside;
  HEAP32[9384>>2] = $95;
  HEAP8[8720>>0] = 0;
  $96 = HEAP32[8704>>2]|0;
  $97 = (($96) + 264|0);
  HEAP32[$97>>2] = 0;
  $0 = 1;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $98 = $s;
 $99 = (_strncmp($98,9664,9)|0);
 $100 = ($99|0)==(0);
 if (!($100)) {
  $0 = 0;
  $121 = $0;
  STACKTOP = sp;return ($121|0);
 }
 $101 = $s;
 $102 = $101;
 $103 = (($102) - (8720))|0;
 $104 = (($103) + 9)|0;
 $105 = HEAP32[8704>>2]|0;
 $106 = (($105) + 264|0);
 HEAP32[$106>>2] = $104;
 HEAP32[9384>>2] = $104;
 _gettoken();
 $107 = (_strcmp(9120,9072)|0);
 $108 = ($107|0)==(0);
 if ($108) {
  $assoc = 1;
 } else {
  $109 = (_strcmp(9120,9680)|0);
  $110 = ($109|0)==(0);
  if ($110) {
   $assoc = 0;
  } else {
   _parseerror(34);
  }
 }
 _gettoken();
 $111 = HEAP32[9112>>2]|0;
 $112 = ($111|0)!=(0);
 if ($112) {
  _parseerror(34);
 }
 $113 = (_atoi(9120)|0);
 $prio = $113;
 _gettoken();
 $114 = HEAP32[9112>>2]|0;
 $115 = ($114|0)!=(3);
 if ($115) {
  _parseerror(34);
 }
 $116 = $prio;
 $117 = $assoc;
 _insertoperator(9120,$116,$117);
 $118 = $globaltokenoffside;
 HEAP32[9384>>2] = $118;
 HEAP8[8720>>0] = 0;
 $119 = HEAP32[8704>>2]|0;
 $120 = (($119) + 264|0);
 HEAP32[$120>>2] = 0;
 $0 = 1;
 $121 = $0;
 STACKTOP = sp;return ($121|0);
}
function _isalnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $3 = 1;
  $2 = $3&1;
  return ($2|0);
 }
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $3 = $isdigit;
 $2 = $3&1;
 return ($2|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _isgraph($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -33)|0;
 $1 = ($0>>>0)<(94);
 $2 = $1&1;
 return ($2|0);
}
function _isprint($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -32)|0;
 $1 = ($0>>>0)<(95);
 $2 = $1&1;
 return ($2|0);
}
function _ispunct($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isgraph($c)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $5 = 0;
 } else {
  $2 = (_isalnum($c)|0);
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0$be$i = 0, $$0$be$i20 = 0, $$0$i48 = 0, $$01$be$i = 0, $$01$be$i19 = 0, $$012$i = 0, $$012$i16 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$i3481 = 0, $$02$i82 = 0, $$02$us$i = 0, $$02$us$i32 = 0, $$03$i = 0, $$03$i15 = 0, $$67 = 0, $$68 = 0, $$be = 0, $$be94 = 0;
 var $$lcssa = 0, $$lcssa100 = 0, $$lcssa75 = 0, $$lcssa76 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$lcssa99 = 0, $$pre = 0, $$pre$i = 0, $$pre$i10 = 0, $$pre$i22 = 0, $$pre$i28 = 0, $$sum = 0, $$sum$i = 0, $$sum$i18 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i31 = 0, $head$0$lcssa = 0, $head$083 = 0, $head$179 = 0, $head$179$be = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i24 = 0, $i$01$us$i = 0, $i$01$us$i30 = 0, $i$04$i = 0, $i$04$i14 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0;
 var $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond69 = 0, $or$cond6978 = 0, $or$cond77 = 0, $pshift$0$lcssa = 0, $pshift$084 = 0, $pshift$1 = 0, $pshift$1$lcssa = 0, $pshift$280 = 0, $pshift$280$be = 0, $sum = 0, $sum$i = 0, $sum$i17 = 0, $tmp$i = 0, $tmp$i26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i26 = sp + 680|0;
 $tmp$i = sp + 424|0;
 $ar$i = sp;
 $lp = sp + 232|0;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = (($lp) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = ($width>>>0)>(256);
  $15 = $14 ? 256 : $width;
  $16 = ($15|0)==($width|0);
  $17 = $11;
  $19 = 1;$61 = 0;$head$083 = $base;$pshift$084 = 1;
  while(1) {
   $18 = $19 & 3;
   $20 = ($18|0)==(3);
   do {
    if ($20) {
     HEAP32[$ar$i>>2] = $head$083;
     $21 = ($pshift$084|0)>(1);
     do {
      if ($21) {
       $$012$i = $pshift$084;$$03$i = $head$083;$27 = $head$083;$i$04$i = 1;
       while(1) {
        $22 = (($$03$i) + ($10)|0);
        $23 = (($$012$i) + -2)|0;
        $24 = (($lp) + ($23<<2)|0);
        $25 = HEAP32[$24>>2]|0;
        $sum$i = (($25) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $26 = (($$03$i) + ($$sum$i)|0);
        $28 = (FUNCTION_TABLE_iii[$cmp & 31]($27,$26)|0);
        $29 = ($28|0)>(-1);
        if ($29) {
         $30 = (FUNCTION_TABLE_iii[$cmp & 31]($27,$22)|0);
         $31 = ($30|0)>(-1);
         if ($31) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $32 = (FUNCTION_TABLE_iii[$cmp & 31]($26,$22)|0);
        $33 = ($32|0)>(-1);
        $34 = (($i$04$i) + 1)|0;
        $35 = (($ar$i) + ($i$04$i<<2)|0);
        if ($33) {
         HEAP32[$35>>2] = $26;
         $36 = (($$012$i) + -1)|0;
         $$0$be$i = $26;$$01$be$i = $36;
        } else {
         HEAP32[$35>>2] = $22;
         $$0$be$i = $22;$$01$be$i = $23;
        }
        $37 = ($$01$be$i|0)>(1);
        if (!($37)) {
         $i$0$lcssa$i = $34;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$27 = $$pre$i;$i$04$i = $34;
       }
       $38 = ($i$0$lcssa$i|0)<(2);
       if (!($38)) {
        $39 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$39>>2] = $tmp$i;
        if (!($13)) {
         $40 = ($i$0$lcssa$i|0)>(0);
         if (!($40)) {
          $41 = HEAP32[$ar$i>>2]|0;
          _memcpy(($tmp$i|0),($41|0),($15|0))|0;
          if ($16) {
           break;
          }
          $$02$i82 = $width;$55 = $15;
          while(1) {
           $54 = (($$02$i82) - ($55))|0;
           $56 = ($54>>>0)>(256);
           $57 = $56 ? 256 : $54;
           _memcpy(($tmp$i|0),($41|0),($57|0))|0;
           $58 = ($54|0)==($57|0);
           if ($58) {
            break;
           } else {
            $$02$i82 = $54;$55 = $57;
           }
          }
          break;
         }
         $$02$us$i = $width;$53 = $tmp$i;
         while(1) {
          $51 = ($$02$us$i>>>0)>(256);
          $43 = $51 ? 256 : $$02$us$i;
          $52 = HEAP32[$ar$i>>2]|0;
          _memcpy(($53|0),($52|0),($43|0))|0;
          $49 = $52;$i$01$us$i = 0;
          while(1) {
           $45 = (($ar$i) + ($i$01$us$i<<2)|0);
           $46 = (($i$01$us$i) + 1)|0;
           $47 = (($ar$i) + ($46<<2)|0);
           $48 = HEAP32[$47>>2]|0;
           _memcpy(($49|0),($48|0),($43|0))|0;
           $50 = (($49) + ($43)|0);
           HEAP32[$45>>2] = $50;
           $exitcond$i = ($46|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $49 = $48;$i$01$us$i = $46;
           }
          }
          $42 = ($$02$us$i|0)==($43|0);
          if ($42) {
           break;
          }
          $44 = (($$02$us$i) - ($43))|0;
          $$pre$i10 = HEAP32[$39>>2]|0;
          $$02$us$i = $44;$53 = $$pre$i10;
         }
        }
       }
      }
     } while(0);
     $59 = $19 >>> 2;
     $60 = $61 << 30;
     $62 = $59 | $60;
     $63 = $61 >>> 2;
     $64 = (($pshift$084) + 2)|0;
     $122 = $62;$185 = $63;$pshift$1 = $64;
    } else {
     $65 = (($pshift$084) + -1)|0;
     $66 = (($lp) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $head$083;
     $69 = (($17) - ($68))|0;
     $70 = ($67>>>0)<($69>>>0);
     do {
      if ($70) {
       HEAP32[$ar$i>>2] = $head$083;
       $71 = ($pshift$084|0)>(1);
       if ($71) {
        $$012$i16 = $pshift$084;$$03$i15 = $head$083;$77 = $head$083;$i$04$i14 = 1;
        while(1) {
         $72 = (($$03$i15) + ($10)|0);
         $73 = (($$012$i16) + -2)|0;
         $74 = (($lp) + ($73<<2)|0);
         $75 = HEAP32[$74>>2]|0;
         $sum$i17 = (($75) + ($width))|0;
         $$sum$i18 = (0 - ($sum$i17))|0;
         $76 = (($$03$i15) + ($$sum$i18)|0);
         $78 = (FUNCTION_TABLE_iii[$cmp & 31]($77,$76)|0);
         $79 = ($78|0)>(-1);
         if ($79) {
          $80 = (FUNCTION_TABLE_iii[$cmp & 31]($77,$72)|0);
          $81 = ($80|0)>(-1);
          if ($81) {
           $i$0$lcssa$i24 = $i$04$i14;
           break;
          }
         }
         $82 = (FUNCTION_TABLE_iii[$cmp & 31]($76,$72)|0);
         $83 = ($82|0)>(-1);
         $84 = (($i$04$i14) + 1)|0;
         $85 = (($ar$i) + ($i$04$i14<<2)|0);
         if ($83) {
          HEAP32[$85>>2] = $76;
          $86 = (($$012$i16) + -1)|0;
          $$0$be$i20 = $76;$$01$be$i19 = $86;
         } else {
          HEAP32[$85>>2] = $72;
          $$0$be$i20 = $72;$$01$be$i19 = $73;
         }
         $87 = ($$01$be$i19|0)>(1);
         if (!($87)) {
          $i$0$lcssa$i24 = $84;
          break;
         }
         $$pre$i22 = HEAP32[$ar$i>>2]|0;
         $$012$i16 = $$01$be$i19;$$03$i15 = $$0$be$i20;$77 = $$pre$i22;$i$04$i14 = $84;
        }
        $88 = ($i$0$lcssa$i24|0)<(2);
        if (!($88)) {
         $89 = (($ar$i) + ($i$0$lcssa$i24<<2)|0);
         HEAP32[$89>>2] = $tmp$i26;
         if (!($13)) {
          $90 = ($i$0$lcssa$i24|0)>(0);
          if (!($90)) {
           $91 = HEAP32[$ar$i>>2]|0;
           _memcpy(($tmp$i26|0),($91|0),($15|0))|0;
           if ($16) {
            break;
           }
           $$02$i3481 = $width;$105 = $15;
           while(1) {
            $104 = (($$02$i3481) - ($105))|0;
            $106 = ($104>>>0)>(256);
            $107 = $106 ? 256 : $104;
            _memcpy(($tmp$i26|0),($91|0),($107|0))|0;
            $108 = ($104|0)==($107|0);
            if ($108) {
             break;
            } else {
             $$02$i3481 = $104;$105 = $107;
            }
           }
           break;
          }
          $$02$us$i32 = $width;$103 = $tmp$i26;
          while(1) {
           $101 = ($$02$us$i32>>>0)>(256);
           $93 = $101 ? 256 : $$02$us$i32;
           $102 = HEAP32[$ar$i>>2]|0;
           _memcpy(($103|0),($102|0),($93|0))|0;
           $99 = $102;$i$01$us$i30 = 0;
           while(1) {
            $95 = (($ar$i) + ($i$01$us$i30<<2)|0);
            $96 = (($i$01$us$i30) + 1)|0;
            $97 = (($ar$i) + ($96<<2)|0);
            $98 = HEAP32[$97>>2]|0;
            _memcpy(($99|0),($98|0),($93|0))|0;
            $100 = (($99) + ($93)|0);
            HEAP32[$95>>2] = $100;
            $exitcond$i31 = ($96|0)==($i$0$lcssa$i24|0);
            if ($exitcond$i31) {
             break;
            } else {
             $99 = $98;$i$01$us$i30 = $96;
            }
           }
           $92 = ($$02$us$i32|0)==($93|0);
           if ($92) {
            break;
           }
           $94 = (($$02$us$i32) - ($93))|0;
           $$pre$i28 = HEAP32[$89>>2]|0;
           $$02$us$i32 = $94;$103 = $$pre$i28;
          }
         }
        }
       }
      } else {
       _trinkle($head$083,$width,$cmp,$19,$61,$pshift$084,0,$lp);
      }
     } while(0);
     $109 = ($pshift$084|0)==(1);
     if ($109) {
      $110 = $61 << 1;
      $111 = $19 >>> 31;
      $112 = $111 | $110;
      $113 = $19 << 1;
      $122 = $113;$185 = $112;$pshift$1 = 0;
      break;
     } else {
      $114 = ($65>>>0)>(31);
      $115 = (($pshift$084) + -33)|0;
      $$ = $114 ? 0 : $19;
      $$67 = $114 ? $19 : $61;
      $$68 = $114 ? $115 : $65;
      $116 = $$67 << $$68;
      $117 = (32 - ($$68))|0;
      $118 = $$ >>> $117;
      $119 = $118 | $116;
      $120 = $$ << $$68;
      $122 = $120;$185 = $119;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $121 = $122 | 1;
   $123 = (($head$083) + ($width)|0);
   $124 = ($123>>>0)<($11>>>0);
   if ($124) {
    $19 = $121;$61 = $185;$head$083 = $123;$pshift$084 = $pshift$1;
   } else {
    $$lcssa100 = $123;$$lcssa98 = $185;$$lcssa99 = $121;$pshift$1$lcssa = $pshift$1;
    break;
   }
  }
  $$lcssa75 = $$lcssa98;$$lcssa76 = $$lcssa99;$head$0$lcssa = $$lcssa100;$pshift$0$lcssa = $pshift$1$lcssa;
 } else {
  $$lcssa75 = 0;$$lcssa76 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa76,$$lcssa75,$pshift$0$lcssa,0,$lp);
 $125 = ($pshift$0$lcssa|0)==(1);
 $126 = ($$lcssa76|0)==(1);
 $or$cond77 = $125 & $126;
 $127 = ($$lcssa75|0)==(0);
 $or$cond6978 = $or$cond77 & $127;
 if ($or$cond6978) {
  STACKTOP = sp;return;
 }
 $130 = $$lcssa76;$139 = $$lcssa75;$head$179 = $head$0$lcssa;$pshift$280 = $pshift$0$lcssa;
 while(1) {
  $128 = ($pshift$280|0)<(2);
  if ($128) {
   $129 = (($130) + -1)|0;
   $131 = ($129|0)==(0);
   do {
    if ($131) {
     $152 = 32;
     label = 73;
    } else {
     $132 = $129 & 1;
     $133 = ($132|0)==(0);
     if ($133) {
      $$02$i$i = $129;$nTrailingZeros$03$i$i = 0;
      while(1) {
       $134 = (($nTrailingZeros$03$i$i) + 1)|0;
       $135 = $$02$i$i >>> 1;
       $136 = $135 & 1;
       $137 = ($136|0)==(0);
       if ($137) {
        $$02$i$i = $135;$nTrailingZeros$03$i$i = $134;
       } else {
        $$lcssa = $134;
        break;
       }
      }
      $138 = ($$lcssa|0)==(0);
      if ($138) {
       label = 67;
      } else {
       $149 = $$lcssa;
      }
     } else {
      label = 67;
     }
     if ((label|0) == 67) {
      label = 0;
      $140 = ($139|0)==(0);
      if ($140) {
       $152 = 64;
       label = 73;
       break;
      }
      $141 = $139 & 1;
      $142 = ($141|0)==(0);
      if (!($142)) {
       $$0$i48 = 0;$174 = $130;$177 = $139;$181 = 0;
       break;
      }
      $$02$i3$i = $139;$nTrailingZeros$03$i2$i = 0;
      while(1) {
       $143 = (($nTrailingZeros$03$i2$i) + 1)|0;
       $144 = $$02$i3$i >>> 1;
       $145 = $144 & 1;
       $146 = ($145|0)==(0);
       if ($146) {
        $$02$i3$i = $144;$nTrailingZeros$03$i2$i = $143;
       } else {
        $$lcssa97 = $143;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
        break;
       }
      }
      $147 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
      $148 = ($$lcssa97|0)==(0);
      if ($148) {
       $$0$i48 = 0;$174 = $130;$177 = $139;$181 = 0;
       break;
      } else {
       $149 = $147;
      }
     }
     $150 = ($149>>>0)>(31);
     if ($150) {
      $152 = $149;
      label = 73;
     } else {
      $$0$i48 = $149;$174 = $130;$177 = $139;$181 = $149;
     }
    }
   } while(0);
   if ((label|0) == 73) {
    label = 0;
    $151 = (($152) + -32)|0;
    $$0$i48 = $151;$174 = $139;$177 = 0;$181 = $152;
   }
   $173 = $174 >>> $$0$i48;
   $175 = (32 - ($$0$i48))|0;
   $176 = $177 << $175;
   $178 = $176 | $173;
   $179 = $177 >>> $$0$i48;
   $180 = (($181) + ($pshift$280))|0;
   $$pre = (($head$179) + ($10)|0);
   $182 = ($180|0)==(1);
   $183 = ($178|0)==(1);
   $or$cond = $182 & $183;
   $184 = ($179|0)==(0);
   $or$cond69 = $or$cond & $184;
   if ($or$cond69) {
    break;
   } else {
    $$be = $178;$$be94 = $179;$head$179$be = $$pre;$pshift$280$be = $180;
   }
  } else {
   $153 = $139 << 2;
   $154 = $130 >>> 30;
   $155 = $154 | $153;
   $156 = (($pshift$280) + -2)|0;
   $157 = $130 << 1;
   $158 = $157 & 2147483646;
   $159 = $154 << 31;
   $160 = $158 | $159;
   $161 = $160 ^ 3;
   $162 = $155 >>> 1;
   $163 = (($lp) + ($156<<2)|0);
   $164 = HEAP32[$163>>2]|0;
   $sum = (($164) + ($width))|0;
   $$sum2 = (0 - ($sum))|0;
   $165 = (($head$179) + ($$sum2)|0);
   $166 = (($pshift$280) + -1)|0;
   _trinkle($165,$width,$cmp,$161,$162,$166,1,$lp);
   $167 = $162 << 1;
   $168 = $154 & 1;
   $169 = $167 | $168;
   $170 = $161 << 1;
   $171 = $170 | 1;
   $172 = (($head$179) + ($10)|0);
   _trinkle($172,$width,$cmp,$171,$169,$156,1,$lp);
   $$be = $171;$$be94 = $169;$head$179$be = $172;$pshift$280$be = $156;
  }
  $130 = $$be;$139 = $$be94;$head$179 = $head$179$be;$pshift$280 = $pshift$280$be;
 }
 STACKTOP = sp;return;
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$0211$lcssa = 0, $$1 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$0$lcssa$ph = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$0211 = $s;
   while(1) {
    $12 = HEAP8[$$0211>>0]|0;
    $13 = ($12<<24>>24)==(0);
    $14 = ($12<<24>>24)==($5<<24>>24);
    $or$cond = $13 | $14;
    $8 = (($$0211) + 1|0);
    if ($or$cond) {
     $$0211$lcssa = $$0211;
     break;
    }
    $9 = $8;
    $10 = $9 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa20 = $8;
     label = 7;
     break;
    } else {
     $$0211 = $8;
    }
   }
   if ((label|0) == 7) {
    $$02$lcssa = $$lcssa20;
    break;
   }
   $$0 = $$0211$lcssa;
   return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 if ($21) {
  $30 = $16;$w$08 = $$02$lcssa;
  while(1) {
   $29 = $30 ^ $15;
   $31 = (($29) + -16843009)|0;
   $32 = $29 & -2139062144;
   $33 = $32 ^ -2139062144;
   $34 = $33 & $31;
   $35 = ($34|0)==(0);
   $23 = (($w$08) + 4|0);
   if (!($35)) {
    $w$0$lcssa$ph = $w$08;
    break;
   }
   $22 = HEAP32[$23>>2]|0;
   $24 = (($22) + -16843009)|0;
   $25 = $22 & -2139062144;
   $26 = $25 ^ -2139062144;
   $27 = $26 & $24;
   $28 = ($27|0)==(0);
   if ($28) {
    $30 = $22;$w$08 = $23;
   } else {
    $w$0$lcssa$ph = $23;
    break;
   }
  }
  $w$0$lcssa = $w$0$lcssa$ph;
 } else {
  $w$0$lcssa = $$02$lcssa;
 }
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond5 = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond5) {
   $$1$lcssa = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 $$0 = $$1$lcssa;
 return ($$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($2|0),($s|0),($1|0))|0;
 $$0 = $2;
 return ($$0|0);
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa$ph = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($d|0))|0);
 $1 = (($d) + ($0)|0);
 $2 = ($n|0)==(0);
 if ($2) {
  $$0$lcssa = $1;
  HEAP8[$$0$lcssa>>0] = 0;
  return ($d|0);
 }
 $$014 = $n;$$023 = $s;$$05 = $1;
 while(1) {
  $3 = HEAP8[$$023>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   $$0$lcssa$ph = $$05;
   break;
  }
  $5 = (($$014) + -1)|0;
  $6 = (($$023) + 1|0);
  $7 = (($$05) + 1|0);
  HEAP8[$$05>>0] = $3;
  $8 = ($5|0)==(0);
  if ($8) {
   $$0$lcssa$ph = $7;
   break;
  } else {
   $$014 = $5;$$023 = $6;$$05 = $7;
  }
 }
 $$0$lcssa = $$0$lcssa$ph;
 HEAP8[$$0$lcssa>>0] = 0;
 return ($d|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$$i = 0, $$$i15 = 0, $$$i7 = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i14 = 0, $$01$i = 0, $$02$i = 0, $$02$i10 = 0, $$03$i = 0, $$03$i$be = 0, $$03$i$lcssa136 = 0, $$03$us$i = 0, $$03$us$i$be = 0, $$03$us$i$lcssa138 = 0, $$lcssa = 0, $$lcssa$i = 0, $$lcssa$i13 = 0, $$lcssa$i6 = 0, $$lcssa132 = 0;
 var $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa139 = 0, $$lcssa142 = 0, $$lcssa145 = 0, $$lcssa155 = 0, $$lcssa159 = 0, $$lcssa162 = 0, $$lcssa165 = 0, $$lcssa175 = 0, $$lcssa180 = 0, $$mem$0$us$i = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $27$phi = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $div$i = 0, $div$us$i = 0;
 var $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i9 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa147$i = 0, $ip$0$ph76$i = 0, $ip$0$ph76$i$lcssa176 = 0, $ip$0$ph76$i$lcssa177 = 0, $ip$0$ph76$i$lcssa178 = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $ip$1$ph55$i$lcssa156 = 0, $ip$1$ph55$i$lcssa157 = 0, $ip$1$ph55$i$lcssa158 = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0;
 var $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0, $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$us$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$338$us$i = 0, $k$338$us$i$lcssa = 0, $k$4$i = 0, $k$4$us$i = 0, $l$080$i = 0, $l$080$i$lcssa179 = 0;
 var $mem$0$us$i = 0, $mem$0$us$i$be = 0, $or$cond$i = 0, $or$cond$i11 = 0, $or$cond5$us$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32151$i = 0, $p$0$ph$ph71$i = 0, $p$0$ph$ph71$i$lcssa171 = 0, $p$0$ph$ph71$i$lcssa172 = 0, $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$1$ph$ph50$i$lcssa151 = 0, $p$1$ph$ph50$i$lcssa152 = 0, $p$3155$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0;
 var $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($n) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($3) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($n) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $19 << 8;
  $21 = $9&255;
  $22 = $20 | $21;
  $$01$i = $8;$27 = $3;$275 = $9;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$lcssa$i = $27;$32 = $275;
    break;
   }
   $25 = $23 << 8;
   $26 = (($27) + 2|0);
   $28 = HEAP8[$26>>0]|0;
   $29 = $28&255;
   $30 = $29 | $25;
   $31 = ($28<<24>>24)==(0);
   if ($31) {
    $$lcssa$i = $$01$i;$32 = 0;
    break;
   } else {
    $27$phi = $$01$i;$$01$i = $26;$275 = $28;$hw$0$in2$i = $30;$27 = $27$phi;
   }
  }
  $33 = ($32<<24>>24)==(0);
  $$$i = $33 ? 0 : $$lcssa$i;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($3) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($n) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i = $34;$$lcssa$i6 = 0;
  } else {
   $$02$i = $34;$hw$03$i = $56;
   while(1) {
    $58 = (($$02$i) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$lcssa = $58;$$lcssa132 = $63;
     break;
    } else {
     $$02$i = $58;$hw$03$i = $62;
    }
   }
   $$0$lcssa$i = $$lcssa;$$lcssa$i6 = $$lcssa132;
  }
  $65 = (($$0$lcssa$i) + -2|0);
  $$$i7 = $$lcssa$i6 ? 0 : $65;
  $$0 = $$$i7;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($3) + 3|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = (($n) + 4|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  $72 = $0&255;
  $73 = $72 << 24;
  $74 = $6&255;
  $75 = $74 << 16;
  $76 = $75 | $73;
  $77 = $12&255;
  $78 = $77 << 8;
  $79 = $76 | $78;
  $80 = $38&255;
  $81 = $79 | $80;
  $82 = HEAP8[$3>>0]|0;
  $83 = $82&255;
  $84 = $83 << 24;
  $85 = $9&255;
  $86 = $85 << 16;
  $87 = $35&255;
  $88 = $87 << 8;
  $89 = $67&255;
  $90 = $88 | $86;
  $91 = $90 | $89;
  $92 = $91 | $84;
  $93 = ($92|0)==($81|0);
  if ($93) {
   $$0$lcssa$i14 = $66;$$lcssa$i13 = 0;
  } else {
   $$02$i10 = $66;$hw$03$i9 = $92;
   while(1) {
    $94 = $hw$03$i9 << 8;
    $95 = (($$02$i10) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 | $94;
    $99 = ($96<<24>>24)==(0);
    $100 = ($98|0)==($81|0);
    $or$cond$i11 = $99 | $100;
    if ($or$cond$i11) {
     $$lcssa133 = $95;$$lcssa134 = $99;
     break;
    } else {
     $$02$i10 = $95;$hw$03$i9 = $98;
    }
   }
   $$0$lcssa$i14 = $$lcssa133;$$lcssa$i13 = $$lcssa134;
  }
  $101 = (($$0$lcssa$i14) + -3|0);
  $$$i15 = $$lcssa$i13 ? 0 : $101;
  $$0 = $$$i15;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $106 = $0;$l$080$i = 0;
 while(1) {
  $102 = (($3) + ($l$080$i)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = ($103<<24>>24)==(0);
  if ($104) {
   label = 105;
   break;
  }
  $105 = $106 & 31;
  $107 = $105&255;
  $108 = 1 << $107;
  $div4$i = ($106&255) >>> 5;
  $109 = $div4$i&255;
  $110 = (($byteset$i) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | $108;
  HEAP32[$110>>2] = $112;
  $113 = (($l$080$i) + 1)|0;
  $114 = $106&255;
  $115 = (($shift$i) + ($114<<2)|0);
  HEAP32[$115>>2] = $113;
  $116 = (($n) + ($113)|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = ($117<<24>>24)==(0);
  if ($118) {
   $$lcssa180 = $113;$l$080$i$lcssa179 = $l$080$i;
   break;
  } else {
   $106 = $117;$l$080$i = $113;
  }
 }
 if ((label|0) == 105) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $119 = ($$lcssa180>>>0)>(1);
 do {
  if ($119) {
   $276 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
   L56: while(1) {
    $277 = $276;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
    while(1) {
     $278 = $277;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
     L60: while(1) {
      $129 = $278;$k$059$i = 1;
      while(1) {
       $125 = (($k$059$i) + ($ip$0$ph76$i))|0;
       $126 = (($n) + ($125)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = (($n) + ($129)|0);
       $130 = HEAP8[$128>>0]|0;
       $131 = ($127<<24>>24)==($130<<24>>24);
       if (!($131)) {
        $$lcssa159 = $129;$$lcssa162 = $127;$$lcssa165 = $130;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
        break L60;
       }
       $132 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
       $123 = (($k$059$i) + 1)|0;
       if ($132) {
        break;
       }
       $122 = (($123) + ($jp$0$ph1365$i))|0;
       $124 = ($122>>>0)<($$lcssa180>>>0);
       if ($124) {
        $129 = $122;$k$059$i = $123;
       } else {
        $ip$0$ph76$i$lcssa177 = $ip$0$ph76$i;$p$0$ph$ph71$i$lcssa171 = $p$0$ph$ph71$i;
        label = 34;
        break L56;
       }
      }
      $133 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
      $134 = (($133) + 1)|0;
      $135 = ($134>>>0)<($$lcssa180>>>0);
      if ($135) {
       $278 = $134;$jp$0$ph1365$i = $133;
      } else {
       $ip$0$ph76$i$lcssa178 = $ip$0$ph76$i;$p$0$ph$ph71$i$lcssa172 = $p$0$ph$ph71$i;
       label = 35;
       break L56;
      }
     }
     $136 = ($$lcssa162&255)>($$lcssa165&255);
     $137 = (($$lcssa159) - ($ip$0$ph76$i))|0;
     if (!($136)) {
      $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
      break;
     }
     $120 = (($$lcssa159) + 1)|0;
     $121 = ($120>>>0)<($$lcssa180>>>0);
     if ($121) {
      $277 = $120;$jp$0$ph13$ph70$i = $$lcssa159;$p$0$ph$ph71$i = $137;
     } else {
      $$lcssa175 = $137;$ip$0$ph76$i$lcssa176 = $ip$0$ph76$i;
      label = 36;
      break L56;
     }
    }
    $138 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
    $139 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
    $140 = ($139>>>0)<($$lcssa180>>>0);
    if ($140) {
     $276 = $139;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $138;
    } else {
     $jp$0$ph1365$i$lcssa$lcssa$lcssa = $jp$0$ph1365$i$lcssa$lcssa;
     label = 37;
     break;
    }
   }
   if ((label|0) == 34) {
    $ip$0$ph$lcssa$i = $ip$0$ph76$i$lcssa177;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i$lcssa171;
   }
   else if ((label|0) == 35) {
    $ip$0$ph$lcssa$i = $ip$0$ph76$i$lcssa178;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i$lcssa172;
   }
   else if ((label|0) == 36) {
    $ip$0$ph$lcssa$i = $ip$0$ph76$i$lcssa176;$p$0$ph$ph$lcssa32$i = $$lcssa175;
   }
   else if ((label|0) == 37) {
    $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
   }
   $279 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
   L76: while(1) {
    $281 = $279;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
    while(1) {
     $280 = $281;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
     L80: while(1) {
      $148 = $280;$k$139$i = 1;
      while(1) {
       $144 = (($k$139$i) + ($ip$1$ph55$i))|0;
       $145 = (($n) + ($144)|0);
       $146 = HEAP8[$145>>0]|0;
       $147 = (($n) + ($148)|0);
       $149 = HEAP8[$147>>0]|0;
       $150 = ($146<<24>>24)==($149<<24>>24);
       if (!($150)) {
        $$lcssa139 = $148;$$lcssa142 = $146;$$lcssa145 = $149;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
        break L80;
       }
       $151 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
       $142 = (($k$139$i) + 1)|0;
       if ($151) {
        break;
       }
       $141 = (($142) + ($jp$1$ph944$i))|0;
       $143 = ($141>>>0)<($$lcssa180>>>0);
       if ($143) {
        $148 = $141;$k$139$i = $142;
       } else {
        $ip$1$ph55$i$lcssa157 = $ip$1$ph55$i;$p$1$ph$ph50$i$lcssa151 = $p$1$ph$ph50$i;
        label = 54;
        break L76;
       }
      }
      $152 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
      $153 = (($152) + 1)|0;
      $154 = ($153>>>0)<($$lcssa180>>>0);
      if ($154) {
       $280 = $153;$jp$1$ph944$i = $152;
      } else {
       $ip$1$ph55$i$lcssa158 = $ip$1$ph55$i;$p$1$ph$ph50$i$lcssa152 = $p$1$ph$ph50$i;
       label = 55;
       break L76;
      }
     }
     $155 = ($$lcssa142&255)<($$lcssa145&255);
     $156 = (($$lcssa139) - ($ip$1$ph55$i))|0;
     if (!($155)) {
      $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
      break;
     }
     $160 = (($$lcssa139) + 1)|0;
     $161 = ($160>>>0)<($$lcssa180>>>0);
     if ($161) {
      $281 = $160;$jp$1$ph9$ph49$i = $$lcssa139;$p$1$ph$ph50$i = $156;
     } else {
      $$lcssa155 = $156;$ip$1$ph55$i$lcssa156 = $ip$1$ph55$i;
      label = 56;
      break L76;
     }
    }
    $157 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
    $158 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
    $159 = ($158>>>0)<($$lcssa180>>>0);
    if ($159) {
     $279 = $158;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $157;
    } else {
     $jp$1$ph944$i$lcssa$lcssa$lcssa = $jp$1$ph944$i$lcssa$lcssa;
     label = 57;
     break;
    }
   }
   if ((label|0) == 54) {
    $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i$lcssa157;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i$lcssa151;
    break;
   }
   else if ((label|0) == 55) {
    $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i$lcssa158;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i$lcssa152;
    break;
   }
   else if ((label|0) == 56) {
    $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i$lcssa156;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $$lcssa155;
    break;
   }
   else if ((label|0) == 57) {
    $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa$lcssa;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
    break;
   }
  } else {
   $ip$0$ph$lcssa147$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32151$i = 1;$p$1$ph$ph$lcssa23$i = 1;
  }
 } while(0);
 $162 = (($ip$1$ph$lcssa$i) + 1)|0;
 $163 = (($ip$0$ph$lcssa147$i) + 1)|0;
 $164 = ($162>>>0)>($163>>>0);
 $p$1$p$0$i = $164 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32151$i;
 $ip$1$ip$0$i = $164 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa147$i;
 $165 = (($n) + ($p$1$p$0$i)|0);
 $166 = (($ip$1$ip$0$i) + 1)|0;
 $167 = (_memcmp($n,$165,$166)|0);
 $168 = ($167|0)==(0);
 if ($168) {
  $174 = (($$lcssa180) - ($p$1$p$0$i))|0;
  $175 = $$lcssa180 | 63;
  $176 = ($$lcssa180|0)==($p$1$p$0$i|0);
  if ($176) {
   $232 = $175;$p$3155$i = $$lcssa180;
  } else {
   $$03$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
   L99: while(1) {
    $178 = $z$0$us$i;
    $179 = $$03$us$i;
    $180 = (($178) - ($179))|0;
    $181 = ($180>>>0)<($$lcssa180>>>0);
    do {
     if ($181) {
      $182 = (_memchr($z$0$us$i,0,$175)|0);
      $183 = ($182|0)==(0|0);
      if ($183) {
       $187 = (($z$0$us$i) + ($175)|0);
       $z$1$us$i = $187;
       break;
      } else {
       $184 = $182;
       $185 = (($184) - ($179))|0;
       $186 = ($185>>>0)<($$lcssa180>>>0);
       if ($186) {
        label = 104;
        break L99;
       } else {
        $z$1$us$i = $182;
        break;
       }
      }
     } else {
      $z$1$us$i = $z$0$us$i;
     }
    } while(0);
    $188 = (($$03$us$i) + ($l$080$i$lcssa179)|0);
    $189 = HEAP8[$188>>0]|0;
    $div$us$i = ($189&255) >>> 5;
    $190 = $div$us$i&255;
    $191 = (($byteset$i) + ($190<<2)|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $189 & 31;
    $194 = $193&255;
    $195 = 1 << $194;
    $196 = $195 & $192;
    $197 = ($196|0)==(0);
    L107: do {
     if ($197) {
      $227 = (($$03$us$i) + ($$lcssa180)|0);
      $$03$us$i$be = $227;$mem$0$us$i$be = 0;
     } else {
      $198 = $189&255;
      $199 = (($shift$i) + ($198<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($$lcssa180) - ($200))|0;
      $202 = ($$lcssa180|0)==($200|0);
      if (!($202)) {
       $203 = ($mem$0$us$i|0)!=(0);
       $204 = ($201>>>0)<($p$1$p$0$i>>>0);
       $or$cond5$us$i = $203 & $204;
       $k$2$us$i = $or$cond5$us$i ? $174 : $201;
       $205 = (($$03$us$i) + ($k$2$us$i)|0);
       $$03$us$i$be = $205;$mem$0$us$i$be = 0;
       break;
      }
      $206 = ($166>>>0)>($mem$0$us$i>>>0);
      $$mem$0$us$i = $206 ? $166 : $mem$0$us$i;
      $207 = (($n) + ($$mem$0$us$i)|0);
      $208 = HEAP8[$207>>0]|0;
      $209 = ($208<<24>>24)==(0);
      do {
       if (!($209)) {
        $$pr$us$i = $208;$k$338$us$i = $$mem$0$us$i;
        while(1) {
         $214 = (($$03$us$i) + ($k$338$us$i)|0);
         $215 = HEAP8[$214>>0]|0;
         $216 = ($$pr$us$i<<24>>24)==($215<<24>>24);
         $211 = (($k$338$us$i) + 1)|0;
         if (!($216)) {
          $k$338$us$i$lcssa = $k$338$us$i;
          label = 77;
          break;
         }
         $210 = (($n) + ($211)|0);
         $212 = HEAP8[$210>>0]|0;
         $213 = ($212<<24>>24)==(0);
         if ($213) {
          label = 73;
          break;
         } else {
          $$pr$us$i = $212;$k$338$us$i = $211;
         }
        }
        if ((label|0) == 73) {
         label = 0;
         break;
        }
        else if ((label|0) == 77) {
         label = 0;
         $217 = (($k$338$us$i$lcssa) - ($ip$1$ip$0$i))|0;
         $218 = (($$03$us$i) + ($217)|0);
         $$03$us$i$be = $218;$mem$0$us$i$be = 0;
         break L107;
        }
       }
      } while(0);
      $k$4$us$i = $166;
      while(1) {
       $219 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
       if (!($219)) {
        $$03$us$i$lcssa138 = $$03$us$i;
        label = 103;
        break L99;
       }
       $220 = (($k$4$us$i) + -1)|0;
       $221 = (($n) + ($220)|0);
       $222 = HEAP8[$221>>0]|0;
       $223 = (($$03$us$i) + ($220)|0);
       $224 = HEAP8[$223>>0]|0;
       $225 = ($222<<24>>24)==($224<<24>>24);
       if ($225) {
        $k$4$us$i = $220;
       } else {
        break;
       }
      }
      $226 = (($$03$us$i) + ($p$1$p$0$i)|0);
      $$03$us$i$be = $226;$mem$0$us$i$be = $174;
     }
    } while(0);
    $$03$us$i = $$03$us$i$be;$mem$0$us$i = $mem$0$us$i$be;$z$0$us$i = $z$1$us$i;
   }
   if ((label|0) == 103) {
    $$0 = $$03$us$i$lcssa138;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 104) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } else {
  $169 = (($$lcssa180) - ($ip$1$ip$0$i))|0;
  $170 = (($169) + -1)|0;
  $171 = ($ip$1$ip$0$i>>>0)>($170>>>0);
  $ip$1$ip$0$$i = $171 ? $ip$1$ip$0$i : $170;
  $172 = (($ip$1$ip$0$$i) + 1)|0;
  $173 = $$lcssa180 | 63;
  $232 = $173;$p$3155$i = $172;
 }
 $177 = (($n) + ($166)|0);
 $$03$i = $3;$z$0$i = $3;
 L134: while(1) {
  $228 = $z$0$i;
  $229 = $$03$i;
  $230 = (($228) - ($229))|0;
  $231 = ($230>>>0)<($$lcssa180>>>0);
  do {
   if ($231) {
    $233 = (_memchr($z$0$i,0,$232)|0);
    $234 = ($233|0)==(0|0);
    if ($234) {
     $238 = (($z$0$i) + ($232)|0);
     $z$1$i = $238;
     break;
    } else {
     $235 = $233;
     $236 = (($235) - ($229))|0;
     $237 = ($236>>>0)<($$lcssa180>>>0);
     if ($237) {
      label = 102;
      break L134;
     } else {
      $z$1$i = $233;
      break;
     }
    }
   } else {
    $z$1$i = $z$0$i;
   }
  } while(0);
  $239 = (($$03$i) + ($l$080$i$lcssa179)|0);
  $240 = HEAP8[$239>>0]|0;
  $div$i = ($240&255) >>> 5;
  $241 = $div$i&255;
  $242 = (($byteset$i) + ($241<<2)|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = $240 & 31;
  $245 = $244&255;
  $246 = 1 << $245;
  $247 = $246 & $243;
  $248 = ($247|0)==(0);
  L142: do {
   if ($248) {
    $255 = (($$03$i) + ($$lcssa180)|0);
    $$03$i$be = $255;
   } else {
    $249 = $240&255;
    $250 = (($shift$i) + ($249<<2)|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ($$lcssa180|0)==($251|0);
    if (!($252)) {
     $253 = (($$lcssa180) - ($251))|0;
     $254 = (($$03$i) + ($253)|0);
     $$03$i$be = $254;
     break;
    }
    $256 = HEAP8[$177>>0]|0;
    $257 = ($256<<24>>24)==(0);
    do {
     if (!($257)) {
      $$pr$i = $256;$k$338$i = $166;
      while(1) {
       $262 = (($$03$i) + ($k$338$i)|0);
       $263 = HEAP8[$262>>0]|0;
       $264 = ($$pr$i<<24>>24)==($263<<24>>24);
       $259 = (($k$338$i) + 1)|0;
       if (!($264)) {
        $k$338$i$lcssa = $k$338$i;
        label = 97;
        break;
       }
       $258 = (($n) + ($259)|0);
       $260 = HEAP8[$258>>0]|0;
       $261 = ($260<<24>>24)==(0);
       if ($261) {
        label = 93;
        break;
       } else {
        $$pr$i = $260;$k$338$i = $259;
       }
      }
      if ((label|0) == 93) {
       label = 0;
       break;
      }
      else if ((label|0) == 97) {
       label = 0;
       $265 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
       $266 = (($$03$i) + ($265)|0);
       $$03$i$be = $266;
       break L142;
      }
     }
    } while(0);
    $k$4$i = $166;
    while(1) {
     $267 = ($k$4$i|0)==(0);
     if ($267) {
      $$03$i$lcssa136 = $$03$i;
      label = 101;
      break L134;
     }
     $268 = (($k$4$i) + -1)|0;
     $269 = (($n) + ($268)|0);
     $270 = HEAP8[$269>>0]|0;
     $271 = (($$03$i) + ($268)|0);
     $272 = HEAP8[$271>>0]|0;
     $273 = ($270<<24>>24)==($272<<24>>24);
     if ($273) {
      $k$4$i = $268;
     } else {
      break;
     }
    }
    $274 = (($$03$i) + ($p$3155$i)|0);
    $$03$i$be = $274;
   }
  } while(0);
  $$03$i = $$03$i$be;$z$0$i = $z$1$i;
 }
 if ((label|0) == 101) {
  $$0 = $$03$i$lcssa136;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 102) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa54 = 0, $$0$lcssa54$ph = 0, $$01$be$i = 0, $$012$i = 0, $$017 = 0, $$017$lcssa = 0, $$02$i$i = 0, $$02$i1610 = 0, $$02$i3$i = 0, $$02$i9 = 0, $$02$lcssa = 0, $$02$lcssa56 = 0, $$02$lcssa56$ph = 0, $$02$us$i = 0, $$02$us$i14 = 0, $$0215 = 0, $$0215$lcssa = 0;
 var $$03$i = 0, $$03$lcssa = 0, $$0314 = 0, $$0314$lcssa = 0, $$lcssa = 0, $$lcssa59 = 0, $$pre = 0, $$pre$i = 0, $$pre$i10 = 0, $$pre$i6 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar = 0, $ar$i = 0;
 var $exitcond$i = 0, $exitcond$i13 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa55 = 0, $i$0$lcssa55$ph = 0, $i$01$us$i = 0, $i$01$us$i12 = 0, $i$016 = 0, $i$016$lcssa = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond5 = 0, $or$cond511 = 0, $pp$val112 = 0, $sum = 0, $sum$i = 0;
 var $tmp$i = 0, $tmp$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i8 = sp + 712|0;
 $tmp$i = sp + 456|0;
 $ar$i = sp;
 $ar = sp + 228|0;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)==(1);
 $2 = ($pp$1$val|0)==(0);
 $or$cond511 = $1 & $2;
 do {
  if ($or$cond511) {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 22;
  } else {
   $$017 = $head;$$0215 = $pshift;$$0314 = $trusty;$124 = $2;$33 = $pp$1$val;$7 = $head;$i$016 = 1;$pp$val112 = $pp$val;
   while(1) {
    $3 = (($lp) + ($$0215<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (0 - ($4))|0;
    $6 = (($$017) + ($5)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 31]($6,$7)|0);
    $9 = ($8|0)<(1);
    if ($9) {
     $$017$lcssa = $$017;$$0215$lcssa = $$0215;$$0314$lcssa = $$0314;$i$016$lcssa = $i$016;
     label = 21;
     break;
    }
    $10 = ($$0314|0)==(0);
    $11 = ($$0215|0)>(1);
    $or$cond = $10 & $11;
    if ($or$cond) {
     $12 = (($$017) + ($0)|0);
     $13 = (($$0215) + -2)|0;
     $14 = (($lp) + ($13<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_iii[$cmp & 31]($12,$6)|0);
     $17 = ($16|0)>(-1);
     if ($17) {
      $$0$lcssa54$ph = $$017;$$02$lcssa56$ph = $$0215;$i$0$lcssa55$ph = $i$016;
      label = 23;
      break;
     }
     $sum = (($15) + ($width))|0;
     $$sum = (0 - ($sum))|0;
     $18 = (($$017) + ($$sum)|0);
     $19 = (FUNCTION_TABLE_iii[$cmp & 31]($18,$6)|0);
     $20 = ($19|0)>(-1);
     if ($20) {
      $$0$lcssa54$ph = $$017;$$02$lcssa56$ph = $$0215;$i$0$lcssa55$ph = $i$016;
      label = 23;
      break;
     }
    }
    $21 = (($i$016) + 1)|0;
    $22 = (($ar) + ($i$016<<2)|0);
    HEAP32[$22>>2] = $6;
    $23 = (($pp$val112) + -1)|0;
    $24 = ($23|0)==(0);
    do {
     if ($24) {
      $44 = 32;
      label = 18;
     } else {
      $25 = $23 & 1;
      $26 = ($25|0)==(0);
      if ($26) {
       $$02$i$i = $23;$nTrailingZeros$03$i$i = 0;
       while(1) {
        $27 = (($nTrailingZeros$03$i$i) + 1)|0;
        $28 = $$02$i$i >>> 1;
        $29 = $28 & 1;
        $30 = ($29|0)==(0);
        if ($30) {
         $$02$i$i = $28;$nTrailingZeros$03$i$i = $27;
        } else {
         $$lcssa = $27;
         break;
        }
       }
       $31 = ($$lcssa|0)==(0);
       if ($31) {
        label = 12;
       } else {
        $41 = $$lcssa;
       }
      } else {
       label = 12;
      }
      if ((label|0) == 12) {
       label = 0;
       if ($124) {
        $44 = 64;
        label = 18;
        break;
       }
       $32 = $33 & 1;
       $34 = ($32|0)==(0);
       if (!($34)) {
        $$0$i = 0;$46 = $pp$val112;$49 = $33;$53 = 0;
        break;
       }
       $$02$i3$i = $33;$nTrailingZeros$03$i2$i = 0;
       while(1) {
        $35 = (($nTrailingZeros$03$i2$i) + 1)|0;
        $36 = $$02$i3$i >>> 1;
        $37 = $36 & 1;
        $38 = ($37|0)==(0);
        if ($38) {
         $$02$i3$i = $36;$nTrailingZeros$03$i2$i = $35;
        } else {
         $$lcssa59 = $35;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
         break;
        }
       }
       $39 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
       $40 = ($$lcssa59|0)==(0);
       if ($40) {
        $$0$i = 0;$46 = $pp$val112;$49 = $33;$53 = 0;
        break;
       } else {
        $41 = $39;
       }
      }
      $42 = ($41>>>0)>(31);
      if ($42) {
       $44 = $41;
       label = 18;
      } else {
       $$0$i = $41;$46 = $pp$val112;$49 = $33;$53 = $41;
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     $43 = (($44) + -32)|0;
     $$0$i = $43;$46 = $33;$49 = 0;$53 = $44;
    }
    $45 = $46 >>> $$0$i;
    $47 = (32 - ($$0$i))|0;
    $48 = $49 << $47;
    $50 = $48 | $45;
    $51 = $49 >>> $$0$i;
    $52 = (($53) + ($$0215))|0;
    $54 = ($50|0)==(1);
    $55 = ($51|0)==(0);
    $or$cond5 = $54 & $55;
    if ($or$cond5) {
     $$0$lcssa54$ph = $6;$$02$lcssa56$ph = $52;$i$0$lcssa55$ph = $21;
     label = 23;
     break;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$017 = $6;$$0215 = $52;$$0314 = 0;$124 = $55;$33 = $51;$7 = $$pre;$i$016 = $21;$pp$val112 = $50;
   }
   if ((label|0) == 21) {
    $$0$lcssa = $$017$lcssa;$$02$lcssa = $$0215$lcssa;$$03$lcssa = $$0314$lcssa;$i$0$lcssa = $i$016$lcssa;
    label = 22;
    break;
   }
   else if ((label|0) == 23) {
    $$0$lcssa54 = $$0$lcssa54$ph;$$02$lcssa56 = $$02$lcssa56$ph;$i$0$lcssa55 = $i$0$lcssa55$ph;
    break;
   }
  }
 } while(0);
 if ((label|0) == 22) {
  $56 = ($$03$lcssa|0)==(0);
  if ($56) {
   $$0$lcssa54 = $$0$lcssa;$$02$lcssa56 = $$02$lcssa;$i$0$lcssa55 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $57 = ($i$0$lcssa55|0)<(2);
 do {
  if (!($57)) {
   $58 = (($ar) + ($i$0$lcssa55<<2)|0);
   HEAP32[$58>>2] = $tmp$i8;
   $59 = ($width|0)==(0);
   if (!($59)) {
    $60 = ($i$0$lcssa55|0)>(0);
    if (!($60)) {
     $61 = ($width>>>0)>(256);
     $62 = $61 ? 256 : $width;
     $63 = HEAP32[$ar>>2]|0;
     _memcpy(($tmp$i8|0),($63|0),($62|0))|0;
     $64 = ($62|0)==($width|0);
     if ($64) {
      break;
     }
     $$02$i1610 = $width;$78 = $62;
     while(1) {
      $77 = (($$02$i1610) - ($78))|0;
      $79 = ($77>>>0)>(256);
      $80 = $79 ? 256 : $77;
      _memcpy(($tmp$i8|0),($63|0),($80|0))|0;
      $81 = ($77|0)==($80|0);
      if ($81) {
       break;
      } else {
       $$02$i1610 = $77;$78 = $80;
      }
     }
     break;
    }
    $$02$us$i14 = $width;$76 = $tmp$i8;
    while(1) {
     $74 = ($$02$us$i14>>>0)>(256);
     $66 = $74 ? 256 : $$02$us$i14;
     $75 = HEAP32[$ar>>2]|0;
     _memcpy(($76|0),($75|0),($66|0))|0;
     $72 = $75;$i$01$us$i12 = 0;
     while(1) {
      $68 = (($ar) + ($i$01$us$i12<<2)|0);
      $69 = (($i$01$us$i12) + 1)|0;
      $70 = (($ar) + ($69<<2)|0);
      $71 = HEAP32[$70>>2]|0;
      _memcpy(($72|0),($71|0),($66|0))|0;
      $73 = (($72) + ($66)|0);
      HEAP32[$68>>2] = $73;
      $exitcond$i13 = ($69|0)==($i$0$lcssa55|0);
      if ($exitcond$i13) {
       break;
      } else {
       $72 = $71;$i$01$us$i12 = $69;
      }
     }
     $65 = ($$02$us$i14|0)==($66|0);
     if ($65) {
      break;
     }
     $67 = (($$02$us$i14) - ($66))|0;
     $$pre$i10 = HEAP32[$58>>2]|0;
     $$02$us$i14 = $67;$76 = $$pre$i10;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa54;
 $82 = ($$02$lcssa56|0)>(1);
 do {
  if ($82) {
   $$012$i = $$02$lcssa56;$$03$i = $$0$lcssa54;$88 = $$0$lcssa54;$i$04$i = 1;
   while(1) {
    $83 = (($$03$i) + ($0)|0);
    $84 = (($$012$i) + -2)|0;
    $85 = (($lp) + ($84<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $sum$i = (($86) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $87 = (($$03$i) + ($$sum$i)|0);
    $89 = (FUNCTION_TABLE_iii[$cmp & 31]($88,$87)|0);
    $90 = ($89|0)>(-1);
    if ($90) {
     $91 = (FUNCTION_TABLE_iii[$cmp & 31]($88,$83)|0);
     $92 = ($91|0)>(-1);
     if ($92) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $93 = (FUNCTION_TABLE_iii[$cmp & 31]($87,$83)|0);
    $94 = ($93|0)>(-1);
    $95 = (($i$04$i) + 1)|0;
    $96 = (($ar$i) + ($i$04$i<<2)|0);
    if ($94) {
     HEAP32[$96>>2] = $87;
     $97 = (($$012$i) + -1)|0;
     $$0$be$i = $87;$$01$be$i = $97;
    } else {
     HEAP32[$96>>2] = $83;
     $$0$be$i = $83;$$01$be$i = $84;
    }
    $98 = ($$01$be$i|0)>(1);
    if (!($98)) {
     $i$0$lcssa$i = $95;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$88 = $$pre$i;$i$04$i = $95;
   }
   $99 = ($i$0$lcssa$i|0)<(2);
   if ($99) {
    $125 = $tmp$i;
   } else {
    $100 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$100>>2] = $tmp$i;
    $101 = ($width|0)==(0);
    if ($101) {
     $125 = $tmp$i;
    } else {
     $102 = ($i$0$lcssa$i|0)>(0);
     if (!($102)) {
      $103 = ($width>>>0)>(256);
      $104 = $103 ? 256 : $width;
      $105 = HEAP32[$ar$i>>2]|0;
      _memcpy(($tmp$i|0),($105|0),($104|0))|0;
      $106 = ($104|0)==($width|0);
      if ($106) {
       $125 = $tmp$i;
       break;
      }
      $$02$i9 = $width;$120 = $104;
      while(1) {
       $119 = (($$02$i9) - ($120))|0;
       $121 = ($119>>>0)>(256);
       $122 = $121 ? 256 : $119;
       _memcpy(($tmp$i|0),($105|0),($122|0))|0;
       $123 = ($119|0)==($122|0);
       if ($123) {
        break;
       } else {
        $$02$i9 = $119;$120 = $122;
       }
      }
      $125 = $tmp$i;
      break;
     }
     $$02$us$i = $width;$118 = $tmp$i;
     while(1) {
      $116 = ($$02$us$i>>>0)>(256);
      $108 = $116 ? 256 : $$02$us$i;
      $117 = HEAP32[$ar$i>>2]|0;
      _memcpy(($118|0),($117|0),($108|0))|0;
      $114 = $117;$i$01$us$i = 0;
      while(1) {
       $110 = (($ar$i) + ($i$01$us$i<<2)|0);
       $111 = (($i$01$us$i) + 1)|0;
       $112 = (($ar$i) + ($111<<2)|0);
       $113 = HEAP32[$112>>2]|0;
       _memcpy(($114|0),($113|0),($108|0))|0;
       $115 = (($114) + ($108)|0);
       HEAP32[$110>>2] = $115;
       $exitcond$i = ($111|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $114 = $113;$i$01$us$i = $111;
       }
      }
      $107 = ($$02$us$i|0)==($108|0);
      if ($107) {
       break;
      }
      $109 = (($$02$us$i) - ($108))|0;
      $$pre$i6 = HEAP32[$100>>2]|0;
      $$02$us$i = $109;$118 = $$pre$i6;
     }
     $125 = $tmp$i;
    }
   }
  } else {
   $125 = $tmp$i;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$lcssa = 0, $$lcssa110 = 0, $$lcssa112 = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa127 = 0, $$lcssa130 = 0, $$lcssa132 = 0, $$lcssa134 = 0, $$lcssa137 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$rsize$3$i$lcssa = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0, $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0;
 var $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0;
 var $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0;
 var $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0;
 var $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0;
 var $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$be = 0, $R$0$i$i = 0, $R$0$i$i$be = 0;
 var $R$0$i$i$lcssa = 0, $R$0$i$i$ph = 0, $R$0$i$lcssa = 0, $R$0$i$ph = 0, $R$0$i18 = 0, $R$0$i18$be = 0, $R$0$i18$lcssa = 0, $R$0$i18$ph = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$be = 0, $RP$0$i$i = 0, $RP$0$i$i$be = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$i$ph = 0, $RP$0$i$lcssa = 0, $RP$0$i$ph = 0, $RP$0$i17 = 0;
 var $RP$0$i17$be = 0, $RP$0$i17$lcssa = 0, $RP$0$i17$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$014$i$i$lcssa = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0;
 var $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0;
 var $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$2$i$ph = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0$i$i$lcssa = 0, $sp$074$i = 0, $sp$074$i$lcssa = 0, $sp$173$i = 0, $sp$173$i$lcssa = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0;
 var $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$1$i$ph = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$2$v$3$i$lcssa = 0, $t$230$i = 0, $t$230$i$be = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$2$i$ph = 0, $v$3$lcssa$i = 0;
 var $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[9688>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((9688 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((9688 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[9688>>2] = $22;
     } else {
      $23 = HEAP32[((9688 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[((9688 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((9688 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((9688 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[9688>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((9688 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((9688 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((9688 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((9688 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[9688>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[9688>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((9688 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((9688 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((9688 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((9688 + 8|0))>>2] = $81;
     HEAP32[((9688 + 20|0))>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[((9688 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((9688 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((9688 + 16|0))>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($5)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i$lcssa) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i$lcssa) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = (($v$0$i$lcssa) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i$lcssa) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i$ph = $171;$RP$0$i$ph = $170;
        }
       } else {
        $R$0$i$ph = $168;$RP$0$i$ph = $167;
       }
       $R$0$i = $R$0$i$ph;$RP$0$i = $RP$0$i$ph;
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if ($175) {
         $176 = (($R$0$i) + 16|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ($177|0)==(0|0);
         if ($178) {
          $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
          break;
         } else {
          $R$0$i$be = $177;$RP$0$i$be = $176;
         }
        } else {
         $R$0$i$be = $174;$RP$0$i$be = $173;
        }
        $R$0$i = $R$0$i$be;$RP$0$i = $RP$0$i$be;
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = (($v$0$i$lcssa) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i$lcssa) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((9688 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((9688 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((9688 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((9688 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((9688 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i$lcssa) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i$lcssa) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((9688 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($5))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[((9688 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((9688 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((9688 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[9688>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[9688>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((9688 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((9688 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((9688 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((9688 + 8|0))>>2] = $rsize$0$i$lcssa;
      HEAP32[((9688 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i$lcssa) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((9688 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((9688 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     if ($277) {
      $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
     } else {
      $278 = ($idx$0$i|0)==(31);
      if ($278) {
       $282 = 0;
      } else {
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $282 = $280;
      }
      $281 = $246 << $282;
      $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
      while(1) {
       $283 = (($t$0$i14) + 4|0);
       $284 = HEAP32[$283>>2]|0;
       $285 = $284 & -8;
       $286 = (($285) - ($246))|0;
       $287 = ($286>>>0)<($rsize$0$i15>>>0);
       if ($287) {
        $288 = ($285|0)==($246|0);
        if ($288) {
         $rsize$2$i$ph = $286;$t$1$i$ph = $t$0$i14;$v$2$i$ph = $t$0$i14;
         break;
        } else {
         $rsize$1$i = $286;$v$1$i = $t$0$i14;
        }
       } else {
        $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
       }
       $289 = (($t$0$i14) + 20|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = $sizebits$0$i >>> 31;
       $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = ($290|0)==(0|0);
       $295 = ($290|0)==($293|0);
       $or$cond19$i = $294 | $295;
       $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
       $296 = ($293|0)==(0|0);
       $297 = $sizebits$0$i << 1;
       if ($296) {
        $rsize$2$i$ph = $rsize$1$i;$t$1$i$ph = $rst$1$i;$v$2$i$ph = $v$1$i;
        break;
       } else {
        $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
       }
      }
      $rsize$2$i = $rsize$2$i$ph;$t$1$i = $t$1$i$ph;$v$2$i = $v$2$i$ph;
     }
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((9688 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if ($338) {
        $339 = (($t$230$i) + 20|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = ($340|0)==(0|0);
        if ($341) {
         $$rsize$3$i$lcssa = $$rsize$3$i;$t$2$v$3$i$lcssa = $t$2$v$3$i;
         break;
        } else {
         $t$230$i$be = $340;
        }
       } else {
        $t$230$i$be = $337;
       }
       $rsize$331$i = $$rsize$3$i;$t$230$i = $t$230$i$be;$v$332$i = $t$2$v$3$i;
      }
      $rsize$3$lcssa$i = $$rsize$3$i$lcssa;$v$3$lcssa$i = $t$2$v$3$i$lcssa;
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((9688 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((9688 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18$ph = $368;$RP$0$i17$ph = $367;
          }
         } else {
          $R$0$i18$ph = $365;$RP$0$i17$ph = $364;
         }
         $R$0$i18 = $R$0$i18$ph;$RP$0$i17 = $RP$0$i17$ph;
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = (($R$0$i18) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
            break;
           } else {
            $R$0$i18$be = $374;$RP$0$i17$be = $373;
           }
          } else {
           $R$0$i18$be = $371;$RP$0$i17$be = $370;
          }
          $R$0$i18 = $R$0$i18$be;$RP$0$i17 = $RP$0$i17$be;
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((9688 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((9688 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((9688 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((9688 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((9688 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((9688 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L215: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((9688 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[9688>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[9688>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((9688 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((9688 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((9688 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((9688 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((9688 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((9688 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$029$i = $483;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = ((($T$028$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa134 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $$lcssa137 = $487;
             label = 163;
             break;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           if ((label|0) == 163) {
            $T$0$lcssa$i = $$lcssa137;
            break;
           }
           $494 = HEAP32[((9688 + 16|0))>>2]|0;
           $495 = ($$lcssa134>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa134>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L215;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((9688 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((9688 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((9688 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((9688 + 20|0))>>2] = $514;
   HEAP32[((9688 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((9688 + 8|0))>>2] = 0;
   HEAP32[((9688 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[((9688 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((9688 + 12|0))>>2] = $528;
  $529 = HEAP32[((9688 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((9688 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[10160>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((10160 + 8|0))>>2] = $538;
    HEAP32[((10160 + 4|0))>>2] = $538;
    HEAP32[((10160 + 12|0))>>2] = -1;
    HEAP32[((10160 + 16|0))>>2] = -1;
    HEAP32[((10160 + 20|0))>>2] = 0;
    HEAP32[((9688 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[10160>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((10160 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[((9688 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((9688 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[((9688 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L279: do {
  if ($560) {
   $561 = HEAP32[((9688 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   do {
    if ($562) {
     label = 191;
    } else {
     $sp$0$i$i = ((9688 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa130 = $sp$0$i$i;$$lcssa132 = $565;$sp$0$i$i$lcssa = $sp$0$i$i;
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 190;
       break;
      } else {
       $sp$0$i$i = $570;
      }
     }
     if ((label|0) == 190) {
      label = 191;
      break;
     }
     $572 = ($sp$0$i$i$lcssa|0)==(0|0);
     if ($572) {
      label = 191;
     } else {
      $595 = HEAP32[((9688 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$$lcssa130>>2]|0;
       $601 = HEAP32[$$lcssa132>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 200;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 201;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 191) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((10160 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((9688 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((9688 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 200;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 201;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L303: do {
    if ((label|0) == 200) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 211;
      break L279;
     }
    }
    else if ((label|0) == 201) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((10160 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L303;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 211;
      break L279;
     }
    }
   } while(0);
   $619 = HEAP32[((9688 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((9688 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 208;
  } else {
   $tsize$1$i = 0;
   label = 208;
  }
 } while(0);
 if ((label|0) == 208) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 211;
    }
   }
  }
 }
 if ((label|0) == 211) {
  $632 = HEAP32[((9688 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((9688 + 432|0))>>2] = $633;
  $634 = HEAP32[((9688 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((9688 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((9688 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L323: do {
   if ($637) {
    $638 = HEAP32[((9688 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((9688 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((9688 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((9688 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((9688 + 460|0))>>2] = 0;
    $641 = HEAP32[10160>>2]|0;
    HEAP32[((9688 + 36|0))>>2] = $641;
    HEAP32[((9688 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((9688 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((9688 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((9688 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((9688 + 24|0))>>2] = $654;
    HEAP32[((9688 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((10160 + 16|0))>>2]|0;
    HEAP32[((9688 + 28|0))>>2] = $660;
   } else {
    $sp$074$i = ((9688 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$074$i>>2]|0;
     $662 = (($sp$074$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      $$lcssa123 = $661;$$lcssa125 = $662;$$lcssa127 = $663;$sp$074$i$lcssa = $sp$074$i;
      label = 224;
      break;
     }
     $666 = (($sp$074$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      label = 229;
      break;
     } else {
      $sp$074$i = $667;
     }
    }
    if ((label|0) == 224) {
     $669 = (($sp$074$i$lcssa) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($$lcssa123>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($$lcssa127) + ($tsize$244$i))|0;
       HEAP32[$$lcssa125>>2] = $675;
       $676 = HEAP32[((9688 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((9688 + 24|0))>>2] = $684;
       HEAP32[((9688 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((10160 + 16|0))>>2]|0;
       HEAP32[((9688 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    else if ((label|0) == 229) {
    }
    $691 = HEAP32[((9688 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((9688 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$173$i = ((9688 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$173$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      $$lcssa120 = $sp$173$i;$sp$173$i$lcssa = $sp$173$i;
      label = 235;
      break;
     }
     $696 = (($sp$173$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      label = 319;
      break;
     } else {
      $sp$173$i = $697;
     }
    }
    if ((label|0) == 235) {
     $699 = (($sp$173$i$lcssa) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$$lcssa120>>2] = $tbase$245$i;
      $703 = (($sp$173$i$lcssa) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L353: do {
       if ($729) {
        $730 = HEAP32[((9688 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((9688 + 12|0))>>2] = $731;
        HEAP32[((9688 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((9688 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((9688 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((9688 + 8|0))>>2] = $737;
         HEAP32[((9688 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L361: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((9688 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[9688>>2]|0;
            $764 = $763 & $762;
            HEAP32[9688>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i$ph = $789;$RP$0$i$i$ph = $788;
              }
             } else {
              $R$0$i$i$ph = $786;$RP$0$i$i$ph = $785;
             }
             $R$0$i$i = $R$0$i$i$ph;$RP$0$i$i = $RP$0$i$i$ph;
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $794 = (($R$0$i$i) + 16|0);
               $795 = HEAP32[$794>>2]|0;
               $796 = ($795|0)==(0|0);
               if ($796) {
                $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
                break;
               } else {
                $R$0$i$i$be = $795;$RP$0$i$i$be = $794;
               }
              } else {
               $R$0$i$i$be = $792;$RP$0$i$i$be = $791;
              }
              $R$0$i$i = $R$0$i$i$be;$RP$0$i$i = $RP$0$i$i$be;
             }
             $797 = ($RP$0$i$i$lcssa>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((9688 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((9688 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((9688 + 4|0))>>2] = $807;
             break L361;
            } else {
             $808 = HEAP32[((9688 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L361;
             }
            }
           } while(0);
           $815 = HEAP32[((9688 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((9688 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((9688 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[9688>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[9688>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((9688 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((9688 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((9688 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((9688 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((9688 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((9688 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            $$lcssa = $909;$T$052$i$i$lcssa = $T$052$i$i;
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $$lcssa110 = $904;
            label = 314;
            break;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          if ((label|0) == 314) {
           $T$0$lcssa$i26$i = $$lcssa110;
           break;
          }
          $911 = HEAP32[((9688 + 16|0))>>2]|0;
          $912 = ($$lcssa>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L353;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((9688 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      return ($mem$0|0);
     }
    }
    else if ((label|0) == 319) {
    }
    $sp$0$i$i$i = ((9688 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       $$lcssa116 = $926;$$lcssa117 = $929;$$lcssa118 = $930;
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($$lcssa117) + -47)|0;
    $$sum1$i14$i = (($$lcssa117) + -39)|0;
    $934 = (($$lcssa116) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($$lcssa116) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((9688 + 24|0))>>2] = $953;
    HEAP32[((9688 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((10160 + 16|0))>>2]|0;
    HEAP32[((9688 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((9688 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((9688 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((9688 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((9688 + 448|0))+12>>2]|0;
    HEAP32[((9688 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((9688 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((9688 + 460|0))>>2] = 0;
    HEAP32[((9688 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($$lcssa118>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($$lcssa118>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((9688 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[9688>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[9688>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((9688 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((9688 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((9688 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((9688 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((9688 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((9688 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         $$lcssa112 = $1048;$T$014$i$i$lcssa = $T$014$i$i;
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $$lcssa115 = $1043;
         label = 353;
         break;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       if ((label|0) == 353) {
        $T$0$lcssa$i$i = $$lcssa115;
        break;
       }
       $1050 = HEAP32[((9688 + 16|0))>>2]|0;
       $1051 = ($$lcssa112>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa112>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i$lcssa;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L323;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((9688 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((9688 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((9688 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((9688 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((9688 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$lcssa73 = 0, $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0;
 var $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$060 = 0, $R$0 = 0;
 var $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$059 = 0, $T$059$lcssa = 0;
 var $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((9688 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((9688 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((9688 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((9688 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[9688>>2]|0;
     $36 = $35 & $34;
     HEAP32[9688>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $61;$RP$0$ph = $60;
      }
     } else {
      $R$0$ph = $58;$RP$0$ph = $57;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if ($65) {
       $66 = (($R$0) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)==(0|0);
       if ($68) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $67;$RP$0$be = $66;
       }
      } else {
       $R$0$be = $64;$RP$0$be = $63;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((9688 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((9688 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((9688 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((9688 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((9688 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((9688 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((9688 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((9688 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((9688 + 12|0))>>2] = $120;
   HEAP32[((9688 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((9688 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[((9688 + 20|0))>>2] = 0;
   HEAP32[((9688 + 8|0))>>2] = 0;
   return;
  }
  $125 = HEAP32[((9688 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((9688 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((9688 + 8|0))>>2] = $128;
   HEAP32[((9688 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((9688 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((9688 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[9688>>2]|0;
     $152 = $151 & $150;
     HEAP32[9688>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((9688 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $179;$RP9$0$ph = $178;
       }
      } else {
       $R7$0$ph = $176;$RP9$0$ph = $175;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $184 = (($R7$0) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if ($186) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $185;$RP9$0$be = $184;
        }
       } else {
        $R7$0$be = $182;$RP9$0$be = $181;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $187 = HEAP32[((9688 + 16|0))>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((9688 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((9688 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((9688 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((9688 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((9688 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((9688 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((9688 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((9688 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((9688 + 8|0))>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((9688 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[9688>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[9688>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((9688 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((9688 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((9688 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((9688 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((9688 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L205: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((9688 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$060 = $292;$T$059 = $284;
     while(1) {
      $300 = $K19$060 >>> 31;
      $301 = ((($T$059) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$059$lcssa = $T$059;
       break;
      }
      $294 = $K19$060 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $$lcssa73 = $296;
       label = 137;
       break;
      } else {
       $K19$060 = $294;$T$059 = $296;
      }
     }
     if ((label|0) == 137) {
      $T$0$lcssa = $$lcssa73;
      break;
     }
     $303 = HEAP32[((9688 + 16|0))>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$059$lcssa;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L205;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((9688 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((9688 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((9688 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if (!($319)) {
  return;
 }
 $sp$0$in$i = ((9688 + 456|0));
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((9688 + 32|0))>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$012$i = 0, $$012$i$be = 0, $$012$i$lcssa = 0, $$013$i = 0, $$01332$i = 0, $$01333$i = 0, $$07$i = 0, $$0711$i = 0, $$0712$i = 0, $$1$be$i = 0, $$1$be$i$lcssa = 0, $$1$ph$i = 0, $$14$i = 0, $$2$i = 0, $$21$i = 0, $$3$be$i = 0, $$3$be$i$lcssa = 0, $$3$lcssa$i = 0;
 var $$3127$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$lcssa120 = 0, $$lcssa120$lcssa = 0, $$lcssa121 = 0, $$lcssa121$lcssa = 0, $$lcssa122 = 0, $$lcssa125 = 0, $$lcssa126 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa143 = 0, $$lcssa55$i = 0, $$lnz$0$i = 0, $$neg38$i = 0, $$old8 = 0;
 var $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us98$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0;
 var $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0;
 var $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0;
 var $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0.0, $674 = 0.0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0.0;
 var $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0.0, $694 = 0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0, $711 = 0, $712 = 0.0, $713 = 0.0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa180$i = 0, $a$0106$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph44$i = 0, $a$2$ph44$i$lcssa = 0, $a$2$ph44$i$lcssa130 = 0, $a$2$ph44$i$ph = 0, $a$2$ph44$i131 = 0, $a$3$i = 0, $a$3$i$lcssa = 0, $a$3$i$lcssa119 = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$483$i = 0, $a$5$i = 0;
 var $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i24 = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$0$i$be = 0, $c$0$i$lcssa = 0, $c$0$i$ph = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$174 = 0, $c$2 = 0, $c$2$i = 0, $c$2$i$be = 0, $c$2$i$ph = 0, $c$2$lcssa$i = 0;
 var $c$372 = 0, $c$4 = 0, $c$5 = 0, $c$5$ph = 0, $c$6 = 0, $carry$0108$i = 0, $carry1$0$us$i = 0, $carry1$0$us94$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us$i$lcssa$lcssa = 0, $carry1$1$us99$i = 0, $carry1$1$us99$i$lcssa = 0, $carry1$1$us99$i$lcssa$lcssa = 0, $carry3$086$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$030$i = 0;
 var $denormal$031$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$ph$i$lcssa = 0, $e2$0$us$i = 0, $e2$0$us89$i = 0, $e2$0$us89$i$lcssa = 0, $e2$1$i = 0, $e2$1$i$lcssa = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$1$ph$i$ph = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0;
 var $gotdig$0$i = 0, $gotdig$0$i$lcssa = 0, $gotdig$0$i$lcssa116 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa = 0, $gotdig$0$i12$lcssa141 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i$ph = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3123$i = 0, $gotdig$3123$i$lcssa = 0, $gotdig$4$i = 0, $gotdig$4$i$lcssa = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i$ph = 0, $gotrad$0$i14 = 0;
 var $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1124$i = 0, $gotrad$2$i = 0, $gotrad$2$i$lcssa = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$073 = 0, $i$081$i = 0, $i$1 = 0, $i$1$i = 0, $i$271 = 0, $i$3 = 0, $i$3$ph = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0126$i = 0;
 var $j$0126$i$lcssa = 0, $j$072$i = 0, $j$073$i = 0, $j$074$i = 0, $j$2$i = 0, $j$2$i$lcssa = 0, $j$3115$i = 0, $k$0$lcssa$i = 0, $k$0125$i = 0, $k$0125$i$lcssa = 0, $k$068$i = 0, $k$069$i = 0, $k$070$i = 0, $k$2$i = 0, $k$2$i$lcssa = 0, $k$3$i = 0, $k$4107$i = 0, $k$5$in$us$i = 0, $k$5$in$us93$i = 0, $k$5$us$i = 0;
 var $k$5$us95$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us101$i = 0, $k$684$i = 0, $lnz$0$lcssa$i = 0, $lnz$0122$i = 0, $lnz$0122$i$lcssa = 0, $lnz$062$i = 0, $lnz$063$i = 0, $lnz$064$i = 0, $lnz$2$i = 0, $lnz$2$i$lcssa = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond11$i = 0, $or$cond11119$i = 0, $or$cond16$i = 0;
 var $or$cond18$i = 0, $or$cond185$i = 0, $or$cond19$i = 0, $or$cond20$us$i = 0, $or$cond20$us100$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond7$i = 0, $or$cond9$i = 0, $or$cond9$i26 = 0, $or$cond9$not = 0, $rp$0$lcssa181$i = 0, $rp$0105$i = 0, $rp$1$i19 = 0, $rp$1$i19$lcssa = 0;
 var $rp$2$ph42$i = 0, $rp$2$ph42$i$lcssa = 0, $rp$2$ph42$i$ph = 0, $rp$3$i$ph = 0, $rp$3$ph40$i = 0, $rp$3$ph40$i$ph = 0, $rp$482$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0;
 var $x$3$lcssa$i = 0, $x$325$i = 0, $x$4$lcssa$i = 0, $x$420$i = 0, $x$5$i = 0, $x$5$i$lcssa = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i25 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$321$i = 0.0, $y$4$i = 0.0, $y$4$i$lcssa = 0.0, $y$5$i = 0.0;
 var $z$0$i = 0, $z$1$ph43$i = 0, $z$1$ph43$i$lcssa = 0, $z$1$ph43$i$ph = 0, $z$1$us$i = 0, $z$1$us90$i = 0, $z$1$us90$i$lcssa = 0, $z$2$us$i = 0, $z$2$us92$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us$i$lcssa$lcssa = 0, $z$3$us102$i = 0, $z$3$us102$i$lcssa = 0, $z$3$us102$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$5$ph$i$lcssa = 0, $z$5$ph$i$ph = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$lcssa143 = $9;
   break;
  }
 }
 $12 = ($$lcssa143|0)==(45);
 do {
  if ((($$lcssa143|0) == 43) | (($$lcssa143|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $$lcssa143;$sign$0 = 1;
  }
 } while(0);
 $c$174 = $c$0;$i$073 = 0;
 while(1) {
  $23 = $c$174 | 32;
  $24 = (10184 + ($i$073)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$174;$i$0$lcssa = $i$073;
   break;
  }
  $28 = ($i$073>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$174;
   }
  } while(0);
  $36 = (($i$073) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$174 = $c$2;$i$073 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $38 & $39;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   if ($51) {
    $c$372 = $c$1$lcssa;$i$271 = 0;
    while(1) {
     $52 = $c$372 | 32;
     $53 = (10776 + ($i$271)|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = ($52|0)==($55|0);
     if (!($56)) {
      $c$5$ph = $c$372;$i$3$ph = $i$271;
      break;
     }
     $57 = ($i$271>>>0)<(2);
     do {
      if ($57) {
       $58 = HEAP32[$0>>2]|0;
       $59 = HEAP32[$1>>2]|0;
       $60 = ($58>>>0)<($59>>>0);
       if ($60) {
        $61 = (($58) + 1|0);
        HEAP32[$0>>2] = $61;
        $62 = HEAP8[$58>>0]|0;
        $63 = $62&255;
        $c$4 = $63;
        break;
       } else {
        $64 = (___shgetc($f)|0);
        $c$4 = $64;
        break;
       }
      } else {
       $c$4 = $c$372;
      }
     } while(0);
     $65 = (($i$271) + 1)|0;
     $66 = ($65>>>0)<(3);
     if ($66) {
      $c$372 = $c$4;$i$271 = $65;
     } else {
      $c$5$ph = $c$4;$i$3$ph = $65;
      break;
     }
    }
    $c$5 = $c$5$ph;$i$3 = $i$3$ph;
   } else {
    $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
   }
   if ((($i$3|0) == 3)) {
    $67 = HEAP32[$0>>2]|0;
    $68 = HEAP32[$1>>2]|0;
    $69 = ($67>>>0)<($68>>>0);
    if ($69) {
     $70 = (($67) + 1|0);
     HEAP32[$0>>2] = $70;
     $71 = HEAP8[$67>>0]|0;
     $72 = $71&255;
     $74 = $72;
    } else {
     $73 = (___shgetc($f)|0);
     $74 = $73;
    }
    $75 = ($74|0)==(40);
    if (!($75)) {
     $76 = HEAP32[$1>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $78 = HEAP32[$0>>2]|0;
     $79 = (($78) + -1|0);
     HEAP32[$0>>2] = $79;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $i$4 = 1;
    while(1) {
     $80 = HEAP32[$0>>2]|0;
     $81 = HEAP32[$1>>2]|0;
     $82 = ($80>>>0)<($81>>>0);
     if ($82) {
      $83 = (($80) + 1|0);
      HEAP32[$0>>2] = $83;
      $84 = HEAP8[$80>>0]|0;
      $85 = $84&255;
      $88 = $85;
     } else {
      $86 = (___shgetc($f)|0);
      $88 = $86;
     }
     $87 = (($88) + -48)|0;
     $89 = ($87>>>0)<(10);
     $90 = (($88) + -65)|0;
     $91 = ($90>>>0)<(26);
     $or$cond = $89 | $91;
     if (!($or$cond)) {
      $92 = (($88) + -97)|0;
      $93 = ($92>>>0)<(26);
      $94 = ($88|0)==(95);
      $or$cond7 = $93 | $94;
      if (!($or$cond7)) {
       $$lcssa = $88;$i$4$lcssa = $i$4;
       break;
      }
     }
     $106 = (($i$4) + 1)|0;
     $i$4 = $106;
    }
    $95 = ($$lcssa|0)==(41);
    if ($95) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $96 = HEAP32[$1>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = HEAP32[$0>>2]|0;
     $99 = (($98) + -1|0);
     HEAP32[$0>>2] = $99;
    }
    if (!($39)) {
     $101 = (___errno_location()|0);
     HEAP32[$101>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $100 = ($i$4$lcssa|0)==(0);
    $brmerge107 = $100 | $97;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $$in = $i$4$lcssa;
    while(1) {
     $102 = (($$in) + -1)|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + -1|0);
     HEAP32[$0>>2] = $104;
     $105 = ($102|0)==(0);
     if ($105) {
      break;
     } else {
      $$in = $102;
     }
    }
    $$0 = nan;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 0)) {
    $112 = ($c$5|0)==(48);
    do {
     if ($112) {
      $113 = HEAP32[$0>>2]|0;
      $114 = HEAP32[$1>>2]|0;
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $116 = (($113) + 1|0);
       HEAP32[$0>>2] = $116;
       $117 = HEAP8[$113>>0]|0;
       $118 = $117&255;
       $121 = $118;
      } else {
       $119 = (___shgetc($f)|0);
       $121 = $119;
      }
      $120 = $121 | 32;
      $122 = ($120|0)==(120);
      if (!($122)) {
       $324 = HEAP32[$1>>2]|0;
       $325 = ($324|0)==(0|0);
       if ($325) {
        $c$6 = 48;
        break;
       }
       $326 = HEAP32[$0>>2]|0;
       $327 = (($326) + -1|0);
       HEAP32[$0>>2] = $327;
       $c$6 = 48;
       break;
      }
      $123 = HEAP32[$0>>2]|0;
      $124 = HEAP32[$1>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if ($125) {
       $126 = (($123) + 1|0);
       HEAP32[$0>>2] = $126;
       $127 = HEAP8[$123>>0]|0;
       $128 = $127&255;
       $c$0$i$ph = $128;
      } else {
       $129 = (___shgetc($f)|0);
       $c$0$i$ph = $129;
      }
      $c$0$i = $c$0$i$ph;$gotdig$0$i = 0;
      while(1) {
       if ((($c$0$i|0) == 46)) {
        $gotdig$0$i$lcssa116 = $gotdig$0$i;
        label = 78;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $c$0$i$lcssa = $c$0$i;$gotdig$0$i$lcssa = $gotdig$0$i;
        label = 88;
        break;
       }
       $130 = HEAP32[$0>>2]|0;
       $131 = HEAP32[$1>>2]|0;
       $132 = ($130>>>0)<($131>>>0);
       if ($132) {
        $133 = (($130) + 1|0);
        HEAP32[$0>>2] = $133;
        $134 = HEAP8[$130>>0]|0;
        $135 = $134&255;
        $c$0$i$be = $135;
       } else {
        $136 = (___shgetc($f)|0);
        $c$0$i$be = $136;
       }
       $c$0$i = $c$0$i$be;$gotdig$0$i = 1;
      }
      if ((label|0) == 78) {
       $137 = HEAP32[$0>>2]|0;
       $138 = HEAP32[$1>>2]|0;
       $139 = ($137>>>0)<($138>>>0);
       if ($139) {
        $140 = (($137) + 1|0);
        HEAP32[$0>>2] = $140;
        $141 = HEAP8[$137>>0]|0;
        $142 = $141&255;
        $c$1$ph$i = $142;
       } else {
        $143 = (___shgetc($f)|0);
        $c$1$ph$i = $143;
       }
       $144 = ($c$1$ph$i|0)==(48);
       if ($144) {
        $152 = 0;$153 = 0;
        while(1) {
         $145 = HEAP32[$0>>2]|0;
         $146 = HEAP32[$1>>2]|0;
         $147 = ($145>>>0)<($146>>>0);
         if ($147) {
          $148 = (($145) + 1|0);
          HEAP32[$0>>2] = $148;
          $149 = HEAP8[$145>>0]|0;
          $150 = $149&255;
          $156 = $150;
         } else {
          $151 = (___shgetc($f)|0);
          $156 = $151;
         }
         $154 = (_i64Add(($152|0),($153|0),-1,-1)|0);
         $155 = tempRet0;
         $157 = ($156|0)==(48);
         if ($157) {
          $152 = $154;$153 = $155;
         } else {
          $$lcssa114 = $156;$717 = $154;$718 = $155;
          break;
         }
        }
        $715 = $717;$716 = $718;$c$2$i$ph = $$lcssa114;$gotdig$2$i$ph = 1;$gotrad$0$i$ph = 1;
       } else {
        $715 = 0;$716 = 0;$c$2$i$ph = $c$1$ph$i;$gotdig$2$i$ph = $gotdig$0$i$lcssa116;$gotrad$0$i$ph = 1;
       }
      }
      else if ((label|0) == 88) {
       $715 = 0;$716 = 0;$c$2$i$ph = $c$0$i$lcssa;$gotdig$2$i$ph = $gotdig$0$i$lcssa;$gotrad$0$i$ph = 0;
      }
      $167 = 0;$169 = 0;$719 = $715;$720 = $716;$c$2$i = $c$2$i$ph;$gotdig$2$i = $gotdig$2$i$ph;$gotrad$0$i = $gotrad$0$i$ph;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
      L130: while(1) {
       $158 = (($c$2$i) + -48)|0;
       $159 = ($158>>>0)<(10);
       do {
        if ($159) {
         $d$0$i = $158;
         label = 95;
        } else {
         $160 = $c$2$i | 32;
         $161 = (($160) + -97)|0;
         $162 = ($161>>>0)<(6);
         $163 = ($c$2$i|0)==(46);
         $or$cond6$i = $162 | $163;
         if (!($or$cond6$i)) {
          $211 = $719;$212 = $169;$214 = $720;$215 = $167;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
          break L130;
         }
         if ($163) {
          $164 = ($gotrad$0$i|0)==(0);
          if ($164) {
           $721 = $169;$722 = $167;$723 = $169;$724 = $167;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $211 = $719;$212 = $169;$214 = $720;$215 = $167;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break L130;
          }
         } else {
          $165 = ($c$2$i|0)>(57);
          $166 = (($160) + -87)|0;
          $$$i = $165 ? $166 : $158;
          $d$0$i = $$$i;
          label = 95;
          break;
         }
        }
       } while(0);
       if ((label|0) == 95) {
        label = 0;
        $168 = ($167|0)<(0);
        $170 = ($169>>>0)<(8);
        $171 = ($167|0)==(0);
        $172 = $171 & $170;
        $173 = $168 | $172;
        do {
         if ($173) {
          $174 = $x$0$i << 4;
          $175 = (($d$0$i) + ($174))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $175;$y$1$i = $y$0$i;
         } else {
          $176 = ($167|0)<(0);
          $177 = ($169>>>0)<(14);
          $178 = ($167|0)==(0);
          $179 = $178 & $177;
          $180 = $176 | $179;
          if ($180) {
           $181 = (+($d$0$i|0));
           $182 = $scale$0$i * 0.0625;
           $183 = $182 * $181;
           $184 = $y$0$i + $183;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $182;$x$1$i = $x$0$i;$y$1$i = $184;
           break;
          }
          $185 = ($d$0$i|0)==(0);
          $186 = ($gottail$0$i|0)!=(0);
          $or$cond$i = $185 | $186;
          if ($or$cond$i) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          } else {
           $187 = $scale$0$i * 0.5;
           $188 = $y$0$i + $187;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $188;
          }
         }
        } while(0);
        $189 = (_i64Add(($169|0),($167|0),1,0)|0);
        $190 = tempRet0;
        $721 = $719;$722 = $720;$723 = $189;$724 = $190;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $191 = HEAP32[$0>>2]|0;
       $192 = HEAP32[$1>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = (($191) + 1|0);
        HEAP32[$0>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $c$2$i$be = $196;
       } else {
        $197 = (___shgetc($f)|0);
        $c$2$i$be = $197;
       }
       $167 = $724;$169 = $723;$719 = $721;$720 = $722;$c$2$i = $c$2$i$be;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
      }
      $198 = ($gotdig$2$i$lcssa|0)==(0);
      if ($198) {
       $199 = HEAP32[$1>>2]|0;
       $200 = ($199|0)==(0|0);
       if (!($200)) {
        $201 = HEAP32[$0>>2]|0;
        $202 = (($201) + -1|0);
        HEAP32[$0>>2] = $202;
       }
       $203 = ($pok|0)==(0);
       if ($203) {
        ___shlim($f,0);
       } else {
        if (!($200)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i$lcssa|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i$lcssa|0)==(0);
      $213 = $210 ? $212 : $211;
      $216 = $210 ? $215 : $214;
      $217 = ($215|0)<(0);
      $218 = ($212>>>0)<(8);
      $219 = ($215|0)==(0);
      $220 = $219 & $218;
      $221 = $217 | $220;
      if ($221) {
       $223 = $212;$224 = $215;$x$325$i = $x$0$i$lcssa;
       while(1) {
        $222 = $x$325$i << 4;
        $225 = (_i64Add(($223|0),($224|0),1,0)|0);
        $226 = tempRet0;
        $227 = ($226|0)<(0);
        $228 = ($225>>>0)<(8);
        $229 = ($226|0)==(0);
        $230 = $229 & $228;
        $231 = $227 | $230;
        if ($231) {
         $223 = $225;$224 = $226;$x$325$i = $222;
        } else {
         $$lcssa113 = $222;
         break;
        }
       }
       $x$3$lcssa$i = $$lcssa113;
      } else {
       $x$3$lcssa$i = $x$0$i$lcssa;
      }
      $232 = $c$2$lcssa$i | 32;
      $233 = ($232|0)==(112);
      do {
       if ($233) {
        $234 = (_scanexp($f,$pok)|0);
        $235 = tempRet0;
        $236 = ($234|0)==(0);
        $237 = ($235|0)==(-2147483648);
        $238 = $236 & $237;
        if ($238) {
         $239 = ($pok|0)==(0);
         if ($239) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $240 = HEAP32[$1>>2]|0;
          $241 = ($240|0)==(0|0);
          if ($241) {
           $252 = 0;$253 = 0;
           break;
          }
          $242 = HEAP32[$0>>2]|0;
          $243 = (($242) + -1|0);
          HEAP32[$0>>2] = $243;
          $252 = 0;$253 = 0;
          break;
         }
        } else {
         $252 = $234;$253 = $235;
        }
       } else {
        $244 = HEAP32[$1>>2]|0;
        $245 = ($244|0)==(0|0);
        if ($245) {
         $252 = 0;$253 = 0;
        } else {
         $246 = HEAP32[$0>>2]|0;
         $247 = (($246) + -1|0);
         HEAP32[$0>>2] = $247;
         $252 = 0;$253 = 0;
        }
       }
      } while(0);
      $248 = (_bitshift64Shl(($213|0),($216|0),2)|0);
      $249 = tempRet0;
      $250 = (_i64Add(($248|0),($249|0),-32,-1)|0);
      $251 = tempRet0;
      $254 = (_i64Add(($250|0),($251|0),($252|0),($253|0))|0);
      $255 = tempRet0;
      $256 = ($x$3$lcssa$i|0)==(0);
      if ($256) {
       $257 = (+($sign$0|0));
       $258 = $257 * 0.0;
       $$0 = $258;
       STACKTOP = sp;return (+$$0);
      }
      $259 = (0 - ($emin$0$ph))|0;
      $260 = ($255|0)>(0);
      $261 = ($254>>>0)>($259>>>0);
      $262 = ($255|0)==(0);
      $263 = $262 & $261;
      $264 = $260 | $263;
      if ($264) {
       $265 = (___errno_location()|0);
       HEAP32[$265>>2] = 34;
       $266 = (+($sign$0|0));
       $267 = $266 * 1.7976931348623157E+308;
       $268 = $267 * 1.7976931348623157E+308;
       $$0 = $268;
       STACKTOP = sp;return (+$$0);
      }
      $269 = (($emin$0$ph) + -106)|0;
      $270 = ($269|0)<(0);
      $271 = $270 << 31 >> 31;
      $272 = ($255|0)<($271|0);
      $273 = ($254>>>0)<($269>>>0);
      $274 = ($255|0)==($271|0);
      $275 = $274 & $273;
      $276 = $272 | $275;
      if ($276) {
       $278 = (___errno_location()|0);
       HEAP32[$278>>2] = 34;
       $279 = (+($sign$0|0));
       $280 = $279 * 2.2250738585072014E-308;
       $281 = $280 * 2.2250738585072014E-308;
       $$0 = $281;
       STACKTOP = sp;return (+$$0);
      }
      $277 = ($x$3$lcssa$i|0)>(-1);
      if ($277) {
       $286 = $254;$287 = $255;$x$420$i = $x$3$lcssa$i;$y$321$i = $y$0$i$lcssa;
       while(1) {
        $282 = !($y$321$i >= 0.5);
        $283 = $x$420$i << 1;
        if ($282) {
         $$pn$i = $y$321$i;$x$5$i = $283;
        } else {
         $284 = $283 | 1;
         $285 = $y$321$i + -1.0;
         $$pn$i = $285;$x$5$i = $284;
        }
        $y$4$i = $y$321$i + $$pn$i;
        $288 = (_i64Add(($286|0),($287|0),-1,-1)|0);
        $289 = tempRet0;
        $290 = ($x$5$i|0)>(-1);
        if ($290) {
         $286 = $288;$287 = $289;$x$420$i = $x$5$i;$y$321$i = $y$4$i;
        } else {
         $725 = $288;$726 = $289;$x$5$i$lcssa = $x$5$i;$y$4$i$lcssa = $y$4$i;
         break;
        }
       }
       $295 = $725;$296 = $726;$x$4$lcssa$i = $x$5$i$lcssa;$y$3$lcssa$i = $y$4$i$lcssa;
      } else {
       $295 = $254;$296 = $255;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
      }
      $291 = ($emin$0$ph|0)<(0);
      $292 = $291 << 31 >> 31;
      $293 = (_i64Subtract(32,0,($emin$0$ph|0),($292|0))|0);
      $294 = tempRet0;
      $297 = (_i64Add(($295|0),($296|0),($293|0),($294|0))|0);
      $298 = tempRet0;
      $299 = (0)>($298|0);
      $300 = ($bits$0$ph>>>0)>($297>>>0);
      $301 = (0)==($298|0);
      $302 = $301 & $300;
      $303 = $299 | $302;
      if ($303) {
       $304 = ($297|0)<(0);
       if ($304) {
        $$0711$i = 0;
        label = 143;
       } else {
        $$07$i = $297;
        label = 141;
       }
      } else {
       $$07$i = $bits$0$ph;
       label = 141;
      }
      if ((label|0) == 141) {
       $305 = ($$07$i|0)<(53);
       if ($305) {
        $$0711$i = $$07$i;
        label = 143;
       } else {
        $$pre$i = (+($sign$0|0));
        $$0712$i = $$07$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
       }
      }
      if ((label|0) == 143) {
       $306 = (84 - ($$0711$i))|0;
       $307 = (+_scalbn(1.0,$306));
       $308 = (+($sign$0|0));
       $309 = (+_copysignl($307,$308));
       $$0712$i = $$0711$i;$$pre$phi$iZ2D = $308;$bias$0$i = $309;
      }
      $310 = ($$0712$i|0)<(32);
      $311 = $y$3$lcssa$i != 0.0;
      $or$cond4$i = $310 & $311;
      $312 = $x$4$lcssa$i & 1;
      $313 = ($312|0)==(0);
      $or$cond9$i = $or$cond4$i & $313;
      $314 = $or$cond9$i&1;
      $x$6$i = (($314) + ($x$4$lcssa$i))|0;
      $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
      $315 = (+($x$6$i>>>0));
      $316 = $$pre$phi$iZ2D * $315;
      $317 = $bias$0$i + $316;
      $318 = $$pre$phi$iZ2D * $y$5$i;
      $319 = $318 + $317;
      $320 = $319 - $bias$0$i;
      $321 = $320 != 0.0;
      if (!($321)) {
       $322 = (___errno_location()|0);
       HEAP32[$322>>2] = 34;
      }
      $323 = (+_scalbnl($320,$295));
      $$0 = $323;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $328 = (0 - ($sum$i))|0;
    $$012$i = $c$6;$gotdig$0$i12 = 0;
    while(1) {
     if ((($$012$i|0) == 46)) {
      $gotdig$0$i12$lcssa141 = $gotdig$0$i12;
      label = 155;
      break;
     } else if (!((($$012$i|0) == 48))) {
      $$012$i$lcssa = $$012$i;$gotdig$0$i12$lcssa = $gotdig$0$i12;
      label = 165;
      break;
     }
     $329 = HEAP32[$0>>2]|0;
     $330 = HEAP32[$1>>2]|0;
     $331 = ($329>>>0)<($330>>>0);
     if ($331) {
      $332 = (($329) + 1|0);
      HEAP32[$0>>2] = $332;
      $333 = HEAP8[$329>>0]|0;
      $334 = $333&255;
      $$012$i$be = $334;
     } else {
      $335 = (___shgetc($f)|0);
      $$012$i$be = $335;
     }
     $$012$i = $$012$i$be;$gotdig$0$i12 = 1;
    }
    if ((label|0) == 155) {
     $336 = HEAP32[$0>>2]|0;
     $337 = HEAP32[$1>>2]|0;
     $338 = ($336>>>0)<($337>>>0);
     if ($338) {
      $339 = (($336) + 1|0);
      HEAP32[$0>>2] = $339;
      $340 = HEAP8[$336>>0]|0;
      $341 = $340&255;
      $$1$ph$i = $341;
     } else {
      $342 = (___shgetc($f)|0);
      $$1$ph$i = $342;
     }
     $343 = ($$1$ph$i|0)==(48);
     if ($343) {
      $344 = 0;$345 = 0;
      while(1) {
       $346 = (_i64Add(($344|0),($345|0),-1,-1)|0);
       $347 = tempRet0;
       $348 = HEAP32[$0>>2]|0;
       $349 = HEAP32[$1>>2]|0;
       $350 = ($348>>>0)<($349>>>0);
       if ($350) {
        $351 = (($348) + 1|0);
        HEAP32[$0>>2] = $351;
        $352 = HEAP8[$348>>0]|0;
        $353 = $352&255;
        $$1$be$i = $353;
       } else {
        $354 = (___shgetc($f)|0);
        $$1$be$i = $354;
       }
       $355 = ($$1$be$i|0)==(48);
       if ($355) {
        $344 = $346;$345 = $347;
       } else {
        $$1$be$i$lcssa = $$1$be$i;$729 = $346;$730 = $347;
        break;
       }
      }
      $$2$i = $$1$be$i$lcssa;$727 = $729;$728 = $730;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
     } else {
      $$2$i = $$1$ph$i;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa141;$gotrad$0$i14 = 1;
     }
    }
    else if ((label|0) == 165) {
     $$2$i = $$012$i$lcssa;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa;$gotrad$0$i14 = 0;
    }
    HEAP32[$x$i>>2] = 0;
    $356 = (($$2$i) + -48)|0;
    $357 = ($356>>>0)<(10);
    $358 = ($$2$i|0)==(46);
    $or$cond11119$i = $357 | $358;
    do {
     if ($or$cond11119$i) {
      $359 = (($x$i) + 496|0);
      $$3127$i = $$2$i;$362 = 0;$363 = 0;$731 = $358;$732 = $356;$733 = $727;$734 = $728;$gotdig$3123$i = $gotdig$2$i13;$gotrad$1124$i = $gotrad$0$i14;$j$0126$i = 0;$k$0125$i = 0;$lnz$0122$i = 0;
      L243: while(1) {
       do {
        if ($731) {
         $cond$i = ($gotrad$1124$i|0)==(0);
         if ($cond$i) {
          $735 = $362;$736 = $363;$737 = $362;$738 = $363;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = 1;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
         } else {
          $739 = $733;$740 = $734;$741 = $362;$742 = $363;$gotdig$3123$i$lcssa = $gotdig$3123$i;$j$0126$i$lcssa = $j$0126$i;$k$0125$i$lcssa = $k$0125$i;$lnz$0122$i$lcssa = $lnz$0122$i;
          label = 170;
          break L243;
         }
        } else {
         $361 = ($k$0125$i|0)<(125);
         $364 = (_i64Add(($362|0),($363|0),1,0)|0);
         $365 = tempRet0;
         $366 = ($$3127$i|0)!=(48);
         if (!($361)) {
          if (!($366)) {
           $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
           break;
          }
          $376 = HEAP32[$359>>2]|0;
          $377 = $376 | 1;
          HEAP32[$359>>2] = $377;
          $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
          break;
         }
         $$lnz$0$i = $366 ? $364 : $lnz$0122$i;
         $367 = ($j$0126$i|0)==(0);
         $368 = (($x$i) + ($k$0125$i<<2)|0);
         if ($367) {
          $storemerge$i = $732;
         } else {
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369*10)|0;
          $371 = (($$3127$i) + -48)|0;
          $372 = (($371) + ($370))|0;
          $storemerge$i = $372;
         }
         HEAP32[$368>>2] = $storemerge$i;
         $373 = (($j$0126$i) + 1)|0;
         $374 = ($373|0)==(9);
         $375 = $374&1;
         $$k$0$i = (($375) + ($k$0125$i))|0;
         $$14$i = $374 ? 0 : $373;
         $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $$14$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $378 = HEAP32[$0>>2]|0;
       $379 = HEAP32[$1>>2]|0;
       $380 = ($378>>>0)<($379>>>0);
       if ($380) {
        $381 = (($378) + 1|0);
        HEAP32[$0>>2] = $381;
        $382 = HEAP8[$378>>0]|0;
        $383 = $382&255;
        $$3$be$i = $383;
       } else {
        $384 = (___shgetc($f)|0);
        $$3$be$i = $384;
       }
       $385 = (($$3$be$i) + -48)|0;
       $386 = ($385>>>0)<(10);
       $387 = ($$3$be$i|0)==(46);
       $or$cond11$i = $386 | $387;
       if ($or$cond11$i) {
        $$3127$i = $$3$be$i;$362 = $737;$363 = $738;$731 = $387;$732 = $385;$733 = $735;$734 = $736;$gotdig$3123$i = $gotdig$4$i;$gotrad$1124$i = $gotrad$2$i;$j$0126$i = $j$2$i;$k$0125$i = $k$2$i;$lnz$0122$i = $lnz$2$i;
       } else {
        $$3$be$i$lcssa = $$3$be$i;$748 = $737;$749 = $738;$750 = $735;$751 = $736;$gotdig$4$i$lcssa = $gotdig$4$i;$gotrad$2$i$lcssa = $gotrad$2$i;$j$2$i$lcssa = $j$2$i;$k$2$i$lcssa = $k$2$i;$lnz$2$i$lcssa = $lnz$2$i;
        label = 181;
        break;
       }
      }
      if ((label|0) == 170) {
       $360 = ($gotdig$3123$i$lcssa|0)!=(0);
       $743 = $741;$744 = $742;$745 = $739;$746 = $740;$747 = $360;$j$074$i = $j$0126$i$lcssa;$k$070$i = $k$0125$i$lcssa;$lnz$064$i = $lnz$0122$i$lcssa;
       label = 190;
       break;
      }
      else if ((label|0) == 181) {
       $$3$lcssa$i = $$3$be$i$lcssa;$389 = $750;$390 = $748;$392 = $751;$393 = $749;$gotdig$3$lcssa$i = $gotdig$4$i$lcssa;$gotrad$1$lcssa$i = $gotrad$2$i$lcssa;$j$0$lcssa$i = $j$2$i$lcssa;$k$0$lcssa$i = $k$2$i$lcssa;$lnz$0$lcssa$i = $lnz$2$i$lcssa;
       label = 182;
       break;
      }
     } else {
      $$3$lcssa$i = $$2$i;$389 = $727;$390 = 0;$392 = $728;$393 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 182;
     }
    } while(0);
    do {
     if ((label|0) == 182) {
      $388 = ($gotrad$1$lcssa$i|0)==(0);
      $391 = $388 ? $390 : $389;
      $394 = $388 ? $393 : $392;
      $395 = ($gotdig$3$lcssa$i|0)!=(0);
      $396 = $$3$lcssa$i | 32;
      $397 = ($396|0)==(101);
      $or$cond16$i = $395 & $397;
      if (!($or$cond16$i)) {
       $412 = ($$3$lcssa$i|0)>(-1);
       if ($412) {
        $743 = $390;$744 = $393;$745 = $391;$746 = $394;$747 = $395;$j$074$i = $j$0$lcssa$i;$k$070$i = $k$0$lcssa$i;$lnz$064$i = $lnz$0$lcssa$i;
        label = 190;
        break;
       } else {
        $752 = $390;$753 = $393;$754 = $395;$755 = $391;$756 = $394;$j$073$i = $j$0$lcssa$i;$k$069$i = $k$0$lcssa$i;$lnz$063$i = $lnz$0$lcssa$i;
        label = 192;
        break;
       }
      }
      $398 = (_scanexp($f,$pok)|0);
      $399 = tempRet0;
      $400 = ($398|0)==(0);
      $401 = ($399|0)==(-2147483648);
      $402 = $400 & $401;
      do {
       if ($402) {
        $403 = ($pok|0)==(0);
        if ($403) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $404 = HEAP32[$1>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $408 = 0;$409 = 0;
          break;
         }
         $406 = HEAP32[$0>>2]|0;
         $407 = (($406) + -1|0);
         HEAP32[$0>>2] = $407;
         $408 = 0;$409 = 0;
         break;
        }
       } else {
        $408 = $398;$409 = $399;
       }
      } while(0);
      $410 = (_i64Add(($408|0),($409|0),($391|0),($394|0))|0);
      $411 = tempRet0;
      $422 = $410;$424 = $390;$425 = $411;$427 = $393;$j$072$i = $j$0$lcssa$i;$k$068$i = $k$0$lcssa$i;$lnz$062$i = $lnz$0$lcssa$i;
     }
    } while(0);
    if ((label|0) == 190) {
     $413 = HEAP32[$1>>2]|0;
     $414 = ($413|0)==(0|0);
     if ($414) {
      $752 = $743;$753 = $744;$754 = $747;$755 = $745;$756 = $746;$j$073$i = $j$074$i;$k$069$i = $k$070$i;$lnz$063$i = $lnz$064$i;
      label = 192;
     } else {
      $415 = HEAP32[$0>>2]|0;
      $416 = (($415) + -1|0);
      HEAP32[$0>>2] = $416;
      if ($747) {
       $422 = $745;$424 = $743;$425 = $746;$427 = $744;$j$072$i = $j$074$i;$k$068$i = $k$070$i;$lnz$062$i = $lnz$064$i;
      } else {
       label = 193;
      }
     }
    }
    if ((label|0) == 192) {
     if ($754) {
      $422 = $755;$424 = $752;$425 = $756;$427 = $753;$j$072$i = $j$073$i;$k$068$i = $k$069$i;$lnz$062$i = $lnz$063$i;
     } else {
      label = 193;
     }
    }
    if ((label|0) == 193) {
     $417 = (___errno_location()|0);
     HEAP32[$417>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $418 = HEAP32[$x$i>>2]|0;
    $419 = ($418|0)==(0);
    if ($419) {
     $420 = (+($sign$0|0));
     $421 = $420 * 0.0;
     $$0 = $421;
     STACKTOP = sp;return (+$$0);
    }
    $423 = ($422|0)==($424|0);
    $426 = ($425|0)==($427|0);
    $428 = $423 & $426;
    $429 = ($427|0)<(0);
    $430 = ($424>>>0)<(10);
    $431 = ($427|0)==(0);
    $432 = $431 & $430;
    $433 = $429 | $432;
    $or$cond$i17 = $428 & $433;
    if ($or$cond$i17) {
     $434 = ($bits$0$ph>>>0)>(30);
     $435 = $418 >>> $bits$0$ph;
     $436 = ($435|0)==(0);
     $or$cond18$i = $434 | $436;
     if ($or$cond18$i) {
      $437 = (+($sign$0|0));
      $438 = (+($418>>>0));
      $439 = $437 * $438;
      $$0 = $439;
      STACKTOP = sp;return (+$$0);
     }
    }
    $440 = (($emin$0$ph|0) / -2)&-1;
    $441 = ($440|0)<(0);
    $442 = $441 << 31 >> 31;
    $443 = ($425|0)>($442|0);
    $444 = ($422>>>0)>($440>>>0);
    $445 = ($425|0)==($442|0);
    $446 = $445 & $444;
    $447 = $443 | $446;
    if ($447) {
     $448 = (___errno_location()|0);
     HEAP32[$448>>2] = 34;
     $449 = (+($sign$0|0));
     $450 = $449 * 1.7976931348623157E+308;
     $451 = $450 * 1.7976931348623157E+308;
     $$0 = $451;
     STACKTOP = sp;return (+$$0);
    }
    $452 = (($emin$0$ph) + -106)|0;
    $453 = ($452|0)<(0);
    $454 = $453 << 31 >> 31;
    $455 = ($425|0)<($454|0);
    $456 = ($422>>>0)<($452>>>0);
    $457 = ($425|0)==($454|0);
    $458 = $457 & $456;
    $459 = $455 | $458;
    if ($459) {
     $460 = (___errno_location()|0);
     HEAP32[$460>>2] = 34;
     $461 = (+($sign$0|0));
     $462 = $461 * 2.2250738585072014E-308;
     $463 = $462 * 2.2250738585072014E-308;
     $$0 = $463;
     STACKTOP = sp;return (+$$0);
    }
    $464 = ($j$072$i|0)==(0);
    if ($464) {
     $k$3$i = $k$068$i;
    } else {
     $465 = ($j$072$i|0)<(9);
     if ($465) {
      $466 = (($x$i) + ($k$068$i<<2)|0);
      $$promoted$i = HEAP32[$466>>2]|0;
      $468 = $$promoted$i;$j$3115$i = $j$072$i;
      while(1) {
       $467 = ($468*10)|0;
       $469 = (($j$3115$i) + 1)|0;
       $exitcond$i = ($469|0)==(9);
       if ($exitcond$i) {
        $$lcssa133 = $467;
        break;
       } else {
        $468 = $467;$j$3115$i = $469;
       }
      }
      HEAP32[$466>>2] = $$lcssa133;
     }
     $470 = (($k$068$i) + 1)|0;
     $k$3$i = $470;
    }
    $471 = ($lnz$062$i|0)<(9);
    if ($471) {
     $472 = ($lnz$062$i|0)<=($422|0);
     $473 = ($422|0)<(18);
     $or$cond3$i = $472 & $473;
     if ($or$cond3$i) {
      $474 = ($422|0)==(9);
      if ($474) {
       $475 = (+($sign$0|0));
       $476 = HEAP32[$x$i>>2]|0;
       $477 = (+($476>>>0));
       $478 = $475 * $477;
       $$0 = $478;
       STACKTOP = sp;return (+$$0);
      }
      $479 = ($422|0)<(9);
      if ($479) {
       $480 = (+($sign$0|0));
       $481 = HEAP32[$x$i>>2]|0;
       $482 = (+($481>>>0));
       $483 = $480 * $482;
       $484 = (8 - ($422))|0;
       $485 = (10208 + ($484<<2)|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = (+($486|0));
       $488 = $483 / $487;
       $$0 = $488;
       STACKTOP = sp;return (+$$0);
      }
      $489 = Math_imul($422, -3)|0;
      $$neg38$i = (($bits$0$ph) + 27)|0;
      $490 = (($$neg38$i) + ($489))|0;
      $491 = ($490|0)>(30);
      $$pre$i18 = HEAP32[$x$i>>2]|0;
      $492 = $$pre$i18 >>> $490;
      $493 = ($492|0)==(0);
      $or$cond185$i = $491 | $493;
      if ($or$cond185$i) {
       $494 = (+($sign$0|0));
       $495 = (+($$pre$i18>>>0));
       $496 = $494 * $495;
       $497 = (($422) + -10)|0;
       $498 = (10208 + ($497<<2)|0);
       $499 = HEAP32[$498>>2]|0;
       $500 = (+($499|0));
       $501 = $496 * $500;
       $$0 = $501;
       STACKTOP = sp;return (+$$0);
      }
     }
    }
    $502 = (($422|0) % 9)&-1;
    $503 = ($502|0)==(0);
    if ($503) {
     $a$2$ph44$i$ph = 0;$rp$2$ph42$i$ph = $422;$z$1$ph43$i$ph = $k$3$i;
    } else {
     $504 = ($422|0)>(-1);
     $505 = (($502) + 9)|0;
     $506 = $504 ? $502 : $505;
     $507 = (8 - ($506))|0;
     $508 = (10208 + ($507<<2)|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = ($k$3$i|0)==(0);
     if ($510) {
      $a$0$lcssa180$i = 0;$rp$0$lcssa181$i = $422;$z$0$i = 0;
     } else {
      $511 = (1000000000 / ($509|0))&-1;
      $a$0106$i = 0;$carry$0108$i = 0;$k$4107$i = 0;$rp$0105$i = $422;
      while(1) {
       $512 = (($x$i) + ($k$4107$i<<2)|0);
       $513 = HEAP32[$512>>2]|0;
       $514 = (($513>>>0) % ($509>>>0))&-1;
       $515 = (($513>>>0) / ($509>>>0))&-1;
       $516 = (($515) + ($carry$0108$i))|0;
       HEAP32[$512>>2] = $516;
       $517 = Math_imul($514, $511)|0;
       $518 = ($k$4107$i|0)==($a$0106$i|0);
       $519 = ($516|0)==(0);
       $or$cond19$i = $518 & $519;
       $520 = (($k$4107$i) + 1)|0;
       if ($or$cond19$i) {
        $521 = $520 & 127;
        $522 = (($rp$0105$i) + -9)|0;
        $a$1$i = $521;$rp$1$i19 = $522;
       } else {
        $a$1$i = $a$0106$i;$rp$1$i19 = $rp$0105$i;
       }
       $523 = ($520|0)==($k$3$i|0);
       if ($523) {
        $$lcssa132 = $517;$a$1$i$lcssa = $a$1$i;$rp$1$i19$lcssa = $rp$1$i19;
        break;
       } else {
        $a$0106$i = $a$1$i;$carry$0108$i = $517;$k$4107$i = $520;$rp$0105$i = $rp$1$i19;
       }
      }
      $524 = ($$lcssa132|0)==(0);
      if ($524) {
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $k$3$i;
      } else {
       $525 = (($k$3$i) + 1)|0;
       $526 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$526>>2] = $$lcssa132;
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $525;
      }
     }
     $527 = (9 - ($506))|0;
     $528 = (($527) + ($rp$0$lcssa181$i))|0;
     $a$2$ph44$i$ph = $a$0$lcssa180$i;$rp$2$ph42$i$ph = $528;$z$1$ph43$i$ph = $z$0$i;
    }
    $a$2$ph44$i = $a$2$ph44$i$ph;$e2$0$ph$i = 0;$rp$2$ph42$i = $rp$2$ph42$i$ph;$z$1$ph43$i = $z$1$ph43$i$ph;
    L338: while(1) {
     $529 = ($rp$2$ph42$i|0)<(18);
     $530 = (($x$i) + ($a$2$ph44$i<<2)|0);
     if ($529) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph43$i;
      while(1) {
       $532 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $532;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $533 = (($x$i) + ($k$5$us$i<<2)|0);
        $534 = HEAP32[$533>>2]|0;
        $535 = (_bitshift64Shl(($534|0),0,29)|0);
        $536 = tempRet0;
        $537 = (_i64Add(($535|0),($536|0),($carry1$0$us$i|0),0)|0);
        $538 = tempRet0;
        $539 = ($538>>>0)>(0);
        $540 = ($537>>>0)>(1000000000);
        $541 = ($538|0)==(0);
        $542 = $541 & $540;
        $543 = $539 | $542;
        if ($543) {
         $544 = (___udivdi3(($537|0),($538|0),1000000000,0)|0);
         $545 = tempRet0;
         $546 = (___uremdi3(($537|0),($538|0),1000000000,0)|0);
         $547 = tempRet0;
         $$sink$off0$us$i = $546;$carry1$1$us$i = $544;
        } else {
         $$sink$off0$us$i = $537;$carry1$1$us$i = 0;
        }
        HEAP32[$533>>2] = $$sink$off0$us$i;
        $548 = (($z$2$us$i) + 127)|0;
        $549 = $548 & 127;
        $550 = ($k$5$us$i|0)!=($549|0);
        $551 = ($k$5$us$i|0)==($a$2$ph44$i|0);
        $or$cond20$us$i = $550 | $551;
        if ($or$cond20$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $552 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $552 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $553 = (($k$5$us$i) + -1)|0;
        if ($551) {
         $carry1$1$us$i$lcssa = $carry1$1$us$i;$z$3$us$i$lcssa = $z$3$us$i;
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $553;$z$2$us$i = $z$3$us$i;
        }
       }
       $554 = (($e2$0$us$i) + -29)|0;
       $555 = ($carry1$1$us$i$lcssa|0)==(0);
       if ($555) {
        $e2$0$us$i = $554;$z$1$us$i = $z$3$us$i$lcssa;
       } else {
        $$lcssa126 = $554;$carry1$1$us$i$lcssa$lcssa = $carry1$1$us$i$lcssa;$z$3$us$i$lcssa$lcssa = $z$3$us$i$lcssa;
        break;
       }
      }
      $$lcssa55$i = $$lcssa126;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us$i$lcssa$lcssa;
     } else {
      $531 = ($rp$2$ph42$i|0)==(18);
      if (!($531)) {
       $a$2$ph44$i$lcssa = $a$2$ph44$i;$e2$0$ph$i$lcssa = $e2$0$ph$i;$rp$2$ph42$i$lcssa = $rp$2$ph42$i;$z$1$ph43$i$lcssa = $z$1$ph43$i;
       label = 240;
       break;
      }
      $e2$0$us89$i = $e2$0$ph$i;$z$1$us90$i = $z$1$ph43$i;
      while(1) {
       $556 = HEAP32[$530>>2]|0;
       $557 = ($556>>>0)<(9007199);
       if (!($557)) {
        $a$2$ph44$i$lcssa130 = $a$2$ph44$i;$e2$0$us89$i$lcssa = $e2$0$us89$i;$z$1$us90$i$lcssa = $z$1$us90$i;
        label = 239;
        break L338;
       }
       $558 = (($z$1$us90$i) + 127)|0;
       $carry1$0$us94$i = 0;$k$5$in$us93$i = $558;$z$2$us92$i = $z$1$us90$i;
       while(1) {
        $k$5$us95$i = $k$5$in$us93$i & 127;
        $559 = (($x$i) + ($k$5$us95$i<<2)|0);
        $560 = HEAP32[$559>>2]|0;
        $561 = (_bitshift64Shl(($560|0),0,29)|0);
        $562 = tempRet0;
        $563 = (_i64Add(($561|0),($562|0),($carry1$0$us94$i|0),0)|0);
        $564 = tempRet0;
        $565 = ($564>>>0)>(0);
        $566 = ($563>>>0)>(1000000000);
        $567 = ($564|0)==(0);
        $568 = $567 & $566;
        $569 = $565 | $568;
        if ($569) {
         $570 = (___udivdi3(($563|0),($564|0),1000000000,0)|0);
         $571 = tempRet0;
         $572 = (___uremdi3(($563|0),($564|0),1000000000,0)|0);
         $573 = tempRet0;
         $$sink$off0$us98$i = $572;$carry1$1$us99$i = $570;
        } else {
         $$sink$off0$us98$i = $563;$carry1$1$us99$i = 0;
        }
        HEAP32[$559>>2] = $$sink$off0$us98$i;
        $574 = (($z$2$us92$i) + 127)|0;
        $575 = $574 & 127;
        $576 = ($k$5$us95$i|0)!=($575|0);
        $577 = ($k$5$us95$i|0)==($a$2$ph44$i|0);
        $or$cond20$us100$i = $576 | $577;
        if ($or$cond20$us100$i) {
         $z$3$us102$i = $z$2$us92$i;
        } else {
         $578 = ($$sink$off0$us98$i|0)==(0);
         $k$5$z$2$us101$i = $578 ? $k$5$us95$i : $z$2$us92$i;
         $z$3$us102$i = $k$5$z$2$us101$i;
        }
        $579 = (($k$5$us95$i) + -1)|0;
        if ($577) {
         $carry1$1$us99$i$lcssa = $carry1$1$us99$i;$z$3$us102$i$lcssa = $z$3$us102$i;
         break;
        } else {
         $carry1$0$us94$i = $carry1$1$us99$i;$k$5$in$us93$i = $579;$z$2$us92$i = $z$3$us102$i;
        }
       }
       $580 = (($e2$0$us89$i) + -29)|0;
       $581 = ($carry1$1$us99$i$lcssa|0)==(0);
       if ($581) {
        $e2$0$us89$i = $580;$z$1$us90$i = $z$3$us102$i$lcssa;
       } else {
        $$lcssa125 = $580;$carry1$1$us99$i$lcssa$lcssa = $carry1$1$us99$i$lcssa;$z$3$us102$i$lcssa$lcssa = $z$3$us102$i$lcssa;
        break;
       }
      }
      $$lcssa55$i = $$lcssa125;$carry1$1$lcssa$lcssa$i = $carry1$1$us99$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us102$i$lcssa$lcssa;
     }
     $582 = (($rp$2$ph42$i) + 9)|0;
     $583 = (($a$2$ph44$i) + 127)|0;
     $584 = $583 & 127;
     $585 = ($584|0)==($z$3$lcssa$lcssa$i|0);
     if ($585) {
      $586 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $587 = $586 & 127;
      $588 = (($x$i) + ($587<<2)|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $591 = $590 & 127;
      $592 = (($x$i) + ($591<<2)|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = $593 | $589;
      HEAP32[$592>>2] = $594;
      $z$4$i = $587;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $595 = (($x$i) + ($584<<2)|0);
     HEAP32[$595>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph44$i = $584;$e2$0$ph$i = $$lcssa55$i;$rp$2$ph42$i = $582;$z$1$ph43$i = $z$4$i;
    }
    if ((label|0) == 239) {
     $a$2$ph44$i131 = $a$2$ph44$i$lcssa130;$e2$1$ph$i$ph = $e2$0$us89$i$lcssa;$rp$3$ph40$i$ph = 18;$z$5$ph$i$ph = $z$1$us90$i$lcssa;
    }
    else if ((label|0) == 240) {
     $a$2$ph44$i131 = $a$2$ph44$i$lcssa;$e2$1$ph$i$ph = $e2$0$ph$i$lcssa;$rp$3$ph40$i$ph = $rp$2$ph42$i$lcssa;$z$5$ph$i$ph = $z$1$ph43$i$lcssa;
    }
    $a$3$ph$i = $a$2$ph44$i131;$e2$1$ph$i = $e2$1$ph$i$ph;$rp$3$ph40$i = $rp$3$ph40$i$ph;$z$5$ph$i = $z$5$ph$i$ph;
    L377: while(1) {
     $632 = (($z$5$ph$i) + 1)|0;
     $629 = $632 & 127;
     $633 = (($z$5$ph$i) + 127)|0;
     $634 = $633 & 127;
     $635 = (($x$i) + ($634<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph40$i;
     while(1) {
      $608 = ($rp$3$i$ph|0)==(18);
      $636 = ($rp$3$i$ph|0)>(27);
      $$21$i = $636 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$081$i = 0;
       while(1) {
        $598 = (($i$081$i) + ($a$3$i))|0;
        $599 = $598 & 127;
        $600 = ($599|0)==($z$5$ph$i|0);
        if ($600) {
         $i$1$i = 2;
         break;
        }
        $601 = (($x$i) + ($599<<2)|0);
        $602 = HEAP32[$601>>2]|0;
        $603 = (10200 + ($i$081$i<<2)|0);
        $604 = HEAP32[$603>>2]|0;
        $605 = ($602>>>0)<($604>>>0);
        if ($605) {
         $i$1$i = 2;
         break;
        }
        $606 = ($602>>>0)>($604>>>0);
        $596 = (($i$081$i) + 1)|0;
        if ($606) {
         $i$1$i = $i$081$i;
         break;
        }
        $597 = ($596|0)<(2);
        if ($597) {
         $i$081$i = $596;
        } else {
         $i$1$i = $596;
         break;
        }
       }
       $607 = ($i$1$i|0)==(2);
       $or$cond7$i = $607 & $608;
       if ($or$cond7$i) {
        $$lcssa122 = $629;$a$3$i$lcssa = $a$3$i;$e2$1$i$lcssa = $e2$1$i;$z$5$ph$i$lcssa = $z$5$ph$i;
        break L377;
       }
       $611 = (($$21$i) + ($e2$1$i))|0;
       $612 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($612) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $611;
       } else {
        $$lcssa120 = $611;$a$3$i$lcssa119 = $a$3$i;
        break;
       }
      }
      $613 = 1 << $$21$i;
      $614 = (($613) + -1)|0;
      $615 = 1000000000 >>> $$21$i;
      $a$483$i = $a$3$i$lcssa119;$carry3$086$i = 0;$k$684$i = $a$3$i$lcssa119;$rp$482$i = $rp$3$i$ph;
      while(1) {
       $616 = (($x$i) + ($k$684$i<<2)|0);
       $617 = HEAP32[$616>>2]|0;
       $618 = $617 & $614;
       $619 = $617 >>> $$21$i;
       $620 = (($619) + ($carry3$086$i))|0;
       HEAP32[$616>>2] = $620;
       $621 = Math_imul($618, $615)|0;
       $622 = ($k$684$i|0)==($a$483$i|0);
       $623 = ($620|0)==(0);
       $or$cond22$i = $622 & $623;
       $624 = (($k$684$i) + 1)|0;
       $625 = $624 & 127;
       $626 = (($rp$482$i) + -9)|0;
       $rp$5$i = $or$cond22$i ? $626 : $rp$482$i;
       $a$5$i = $or$cond22$i ? $625 : $a$483$i;
       $627 = ($625|0)==($z$5$ph$i|0);
       if ($627) {
        $$lcssa121 = $621;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
        break;
       } else {
        $a$483$i = $a$5$i;$carry3$086$i = $621;$k$684$i = $625;$rp$482$i = $rp$5$i;
       }
      }
      $628 = ($$lcssa121|0)==(0);
      if (!($628)) {
       $630 = ($629|0)==($a$5$i$lcssa|0);
       if (!($630)) {
        $$lcssa120$lcssa = $$lcssa120;$$lcssa121$lcssa = $$lcssa121;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
        break;
       }
       $637 = HEAP32[$635>>2]|0;
       $638 = $637 | 1;
       HEAP32[$635>>2] = $638;
      }
      $a$3$i$ph = $a$5$i$lcssa;$e2$1$i$ph = $$lcssa120;$rp$3$i$ph = $rp$5$i$lcssa;
     }
     $631 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$631>>2] = $$lcssa121$lcssa;
     $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa120$lcssa;$rp$3$ph40$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $629;
    }
    $609 = $a$3$i$lcssa & 127;
    $610 = ($609|0)==($z$5$ph$i$lcssa|0);
    if ($610) {
     $639 = (($$lcssa122) + -1)|0;
     $640 = (($x$i) + ($639<<2)|0);
     HEAP32[$640>>2] = 0;
     $z$7$i = $$lcssa122;
    } else {
     $z$7$i = $z$5$ph$i$lcssa;
    }
    $641 = (($x$i) + ($609<<2)|0);
    $642 = HEAP32[$641>>2]|0;
    $643 = (+($642>>>0));
    $644 = (($a$3$i$lcssa) + 1)|0;
    $645 = $644 & 127;
    $646 = ($645|0)==($z$7$i|0);
    if ($646) {
     $705 = (($z$7$i) + 1)|0;
     $706 = $705 & 127;
     $707 = (($706) + -1)|0;
     $708 = (($x$i) + ($707<<2)|0);
     HEAP32[$708>>2] = 0;
     $z$7$1$i = $706;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $709 = $643 * 1.0E+9;
    $710 = (($x$i) + ($645<<2)|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = (+($711>>>0));
    $713 = $709 + $712;
    $670 = (+($sign$0|0));
    $652 = $670 * $713;
    $690 = (($e2$1$i$lcssa) + 53)|0;
    $647 = (($690) - ($emin$0$ph))|0;
    $714 = ($647|0)<($bits$0$ph|0);
    if ($714) {
     $648 = ($647|0)<(0);
     if ($648) {
      $$01332$i = 0;$denormal$031$i = 1;
      label = 275;
     } else {
      $$013$i = $647;$denormal$0$i = 1;
      label = 274;
     }
    } else {
     $$013$i = $bits$0$ph;$denormal$0$i = 0;
     label = 274;
    }
    if ((label|0) == 274) {
     $649 = ($$013$i|0)<(53);
     if ($649) {
      $$01332$i = $$013$i;$denormal$031$i = $denormal$0$i;
      label = 275;
     } else {
      $$01333$i = $$013$i;$bias$0$i24 = 0.0;$denormal$030$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i23 = $652;
     }
    }
    if ((label|0) == 275) {
     $650 = (105 - ($$01332$i))|0;
     $651 = (+_scalbn(1.0,$650));
     $653 = (+_copysignl($651,$652));
     $654 = (53 - ($$01332$i))|0;
     $655 = (+_scalbn(1.0,$654));
     $656 = (+_fmodl($652,$655));
     $657 = $652 - $656;
     $658 = $653 + $657;
     $$01333$i = $$01332$i;$bias$0$i24 = $653;$denormal$030$i = $denormal$031$i;$frac$0$i = $656;$y$1$i23 = $658;
    }
    $659 = (($a$3$i$lcssa) + 2)|0;
    $660 = $659 & 127;
    $661 = ($660|0)==($z$7$1$i|0);
    do {
     if ($661) {
      $frac$2$i = $frac$0$i;
     } else {
      $662 = (($x$i) + ($660<<2)|0);
      $663 = HEAP32[$662>>2]|0;
      $664 = ($663>>>0)<(500000000);
      do {
       if ($664) {
        $665 = ($663|0)==(0);
        if ($665) {
         $666 = (($a$3$i$lcssa) + 3)|0;
         $667 = $666 & 127;
         $668 = ($667|0)==($z$7$1$i|0);
         if ($668) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $669 = $670 * 0.25;
        $671 = $669 + $frac$0$i;
        $frac$1$i = $671;
       } else {
        $672 = ($663>>>0)>(500000000);
        if ($672) {
         $673 = $670 * 0.75;
         $674 = $673 + $frac$0$i;
         $frac$1$i = $674;
         break;
        }
        $675 = (($a$3$i$lcssa) + 3)|0;
        $676 = $675 & 127;
        $677 = ($676|0)==($z$7$1$i|0);
        if ($677) {
         $678 = $670 * 0.5;
         $679 = $678 + $frac$0$i;
         $frac$1$i = $679;
         break;
        } else {
         $680 = $670 * 0.75;
         $681 = $680 + $frac$0$i;
         $frac$1$i = $681;
         break;
        }
       }
      } while(0);
      $682 = (53 - ($$01333$i))|0;
      $683 = ($682|0)>(1);
      if (!($683)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $684 = (+_fmodl($frac$1$i,1.0));
      $685 = $684 != 0.0;
      if ($685) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $686 = $frac$1$i + 1.0;
      $frac$2$i = $686;
     }
    } while(0);
    $687 = $y$1$i23 + $frac$2$i;
    $688 = $687 - $bias$0$i24;
    $689 = $690 & 2147483647;
    $691 = (-2 - ($sum$i))|0;
    $692 = ($689|0)>($691|0);
    do {
     if ($692) {
      $693 = (+Math_abs((+$688)));
      $694 = !($693 >= 9007199254740992.0);
      if ($694) {
       $denormal$2$i = $denormal$030$i;$e2$2$i = $e2$1$i$lcssa;$y$2$i25 = $688;
      } else {
       $695 = ($denormal$030$i|0)!=(0);
       $696 = ($$01333$i|0)==($647|0);
       $or$cond23$i = $695 & $696;
       $denormal$1$i = $or$cond23$i ? 0 : $denormal$030$i;
       $697 = $688 * 0.5;
       $698 = (($e2$1$i$lcssa) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $698;$y$2$i25 = $697;
      }
      $699 = (($e2$2$i) + 50)|0;
      $700 = ($699|0)>($328|0);
      if (!($700)) {
       $701 = ($denormal$2$i|0)!=(0);
       $702 = $frac$2$i != 0.0;
       $or$cond9$i26 = $701 & $702;
       if (!($or$cond9$i26)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
        break;
       }
      }
      $703 = (___errno_location()|0);
      HEAP32[$703>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
     } else {
      $e2$3$i = $e2$1$i$lcssa;$y$3$i = $688;
     }
    } while(0);
    $704 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $704;
    STACKTOP = sp;return (+$$0);
   } else {
    $107 = HEAP32[$1>>2]|0;
    $108 = ($107|0)==(0|0);
    if (!($108)) {
     $109 = HEAP32[$0>>2]|0;
     $110 = (($109) + -1|0);
     HEAP32[$0>>2] = $110;
    }
    $111 = (___errno_location()|0);
    HEAP32[$111>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if (!($or$cond)) {
  $$sink = $2;
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $$sink;
  return;
 }
 $11 = (($4) + ($lim)|0);
 $$sink = $11;
 $12 = (($f) + 100|0);
 HEAP32[$12>>2] = $$sink;
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa41 = 0, $$lcssa43 = 0, $$lcssa45 = 0, $$lcssa46 = 0, $$lcssa47 = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    if (!($34)) {
     $$0 = $x;
     return (+$$0);
    }
    $35 = $x * 0.0;
    $$0 = $35;
    return (+$$0);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $$lcssa47 = $44;
       break;
      }
     }
     $ex$0$lcssa = $$lcssa47;
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $$lcssa46 = $67;
       break;
      }
     }
     $ey$0$lcssa = $$lcssa46;
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   do {
    if ($82) {
     $154 = $93;$155 = $87;$156 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($154) {
       $95 = ($94|0)==($85|0);
       $97 = ($96|0)==($86|0);
       $98 = $95 & $97;
       if ($98) {
        break;
       } else {
        $100 = $155;$101 = $156;
       }
      } else {
       $100 = $94;$101 = $96;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $154 = $112;$155 = $106;$156 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
      } else {
       $$lcssa43 = $104;$$lcssa45 = $112;$157 = $106;$158 = $107;$159 = $102;$160 = $103;
       label = 27;
       break;
      }
     }
     if ((label|0) == 27) {
      $$lcssa7 = $$lcssa45;$113 = $159;$115 = $160;$152 = $157;$153 = $158;$ex$2$lcssa = $$lcssa43;
      break;
     }
     $99 = $x * 0.0;
     $$0 = $99;
     return (+$$0);
    } else {
     $$lcssa7 = $93;$113 = $83;$115 = $84;$152 = $87;$153 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa7) {
    $114 = ($113|0)==($85|0);
    $116 = ($115|0)==($86|0);
    $117 = $114 & $116;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     return (+$$0);
    } else {
     $118 = $153;$120 = $152;
    }
   } else {
    $118 = $115;$120 = $113;
   }
   $119 = ($118>>>0)<(1048576);
   $121 = ($120>>>0)<(0);
   $122 = ($118|0)==(1048576);
   $123 = $122 & $121;
   $124 = $119 | $123;
   if ($124) {
    $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$39) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$39 = $130;
     } else {
      $$lcssa41 = $130;$161 = $128;$162 = $129;
      break;
     }
    }
    $137 = $161;$138 = $162;$ex$3$lcssa = $$lcssa41;
   } else {
    $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$151 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$151 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $150;
   return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 10240;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 10240;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 10240;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 31]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 31]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa7 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 31]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     label = 12;
     break;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa7 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   if ((label|0) == 12) {
    $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    break;
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 31]($f,$s,$i$0$lcssa7)|0);
   $26 = ($25>>>0)<($i$0$lcssa7>>>0);
   if ($26) {
    $$0 = $i$0$lcssa7;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa7)|0);
    $28 = (($l) - ($i$0$lcssa7))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa7;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 31]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=10816+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$12 = 0, $$lcssa = 0, $$lcssa4 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa4 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa4>>0]|0;
  $$1$ph = $$lcssa4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  return ($22|0);
 }
 $$12 = $$1$ph;$n$03 = 0;
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $n$0$lcssa = $$lcssa;
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 return ($22|0);
}
function _atol($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$12 = 0, $$lcssa = 0, $$lcssa4 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa4 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa4>>0]|0;
  $$1$ph = $$lcssa4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  return ($22|0);
 }
 $$12 = $$1$ph;$n$03 = 0;
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $n$0$lcssa = $$lcssa;
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 return ($22|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$019$lcssa = 0, $$1$lcssa = 0, $$1$lcssa$ph = 0, $$110 = 0, $$24 = 0, $$3 = 0, $$3$ph = 0, $$lcssa = 0, $$lcssa47 = 0, $$lcssa48 = 0, $$lcssa49 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$020$lcssa = 0, $s$15 = 0, $s$2 = 0, $s$2$ph = 0;
 var $w$0$lcssa = 0, $w$0$lcssa$ph = 0, $w$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $3 & $4;
 do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$019$lcssa = $$019;$s$020$lcssa = $s$020;
     label = 7;
     break;
    }
    $8 = (($s$020) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$lcssa47 = $8;$$lcssa48 = $9;$$lcssa49 = $13;
     label = 5;
     break;
    }
   }
   if ((label|0) == 5) {
    $$0$lcssa = $$lcssa48;$$lcssa = $$lcssa49;$s$0$lcssa = $$lcssa47;
    label = 6;
    break;
   }
   else if ((label|0) == 7) {
    $$0$lcssa44 = $$019$lcssa;$s$0$lcssa43 = $s$020$lcssa;
    break;
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
   $35 = ($$3|0)!=(0);
   $36 = $35 ? $s$2 : 0;
   return ($36|0);
  }
 }
 $14 = HEAP8[$s$0$lcssa43>>0]|0;
 $15 = $c&255;
 $16 = ($14<<24>>24)==($15<<24>>24);
 if ($16) {
  $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $17 = Math_imul($0, 16843009)|0;
 $18 = ($$0$lcssa44>>>0)>(3);
 if ($18) {
  $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
  while(1) {
   $19 = HEAP32[$w$011>>2]|0;
   $20 = $19 ^ $17;
   $21 = (($20) + -16843009)|0;
   $22 = $20 & -2139062144;
   $23 = $22 ^ -2139062144;
   $24 = $23 & $21;
   $25 = ($24|0)==(0);
   if (!($25)) {
    $$1$lcssa$ph = $$110;$w$0$lcssa$ph = $w$011;
    break;
   }
   $26 = (($w$011) + 4|0);
   $27 = (($$110) + -4)|0;
   $28 = ($27>>>0)>(3);
   if ($28) {
    $$110 = $27;$w$011 = $26;
   } else {
    $$1$lcssa$ph = $27;$w$0$lcssa$ph = $26;
    break;
   }
  }
  $$1$lcssa = $$1$lcssa$ph;$w$0$lcssa = $w$0$lcssa$ph;
 } else {
  $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
 }
 $29 = ($$1$lcssa|0)==(0);
 if ($29) {
  $$3 = 0;$s$2 = $w$0$lcssa;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
 while(1) {
  $30 = HEAP8[$s$15>>0]|0;
  $31 = ($30<<24>>24)==($15<<24>>24);
  if ($31) {
   $$3$ph = $$24;$s$2$ph = $s$15;
   break;
  }
  $32 = (($s$15) + 1|0);
  $33 = (($$24) + -1)|0;
  $34 = ($33|0)==(0);
  if ($34) {
   $$3$ph = 0;$s$2$ph = $32;
   break;
  } else {
   $$24 = $33;$s$15 = $32;
  }
 }
 $$3 = $$3$ph;$s$2 = $s$2$ph;
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 }
 $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa10 = $2;
   label = 5;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = (($l$04) + 1|0);
  $6 = (($r$05) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   label = 6;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  $8 = $$lcssa&255;
  $9 = $$lcssa10&255;
  $10 = (($8) - ($9))|0;
  $11 = $10;
  return ($11|0);
 }
 else if ((label|0) == 6) {
  $11 = 0;
  return ($11|0);
 }
 return (0)|0;
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa2 = 0, $$lcssa9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa10 = $7;$$lcssa9 = $6;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
  $$lcssa = $$lcssa9;$$lcssa2 = $$lcssa10;
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$0$lcssa$ph = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $13 = 0;$r$0$lcssa = $_r;
 } else {
  $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
  while(1) {
   $$08 = (($$08$in) + -1)|0;
   $3 = HEAP8[$r$07>>0]|0;
   $4 = ($3<<24>>24)!=(0);
   $5 = ($$08|0)!=(0);
   $or$cond = $4 & $5;
   $7 = ($6<<24>>24)==($3<<24>>24);
   $or$cond4 = $or$cond & $7;
   if (!($or$cond4)) {
    $$ph = $6;$r$0$lcssa$ph = $r$07;
    break;
   }
   $8 = (($l$06) + 1|0);
   $9 = (($r$07) + 1|0);
   $10 = HEAP8[$8>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $$ph = 0;$r$0$lcssa$ph = $9;
    break;
   } else {
    $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
   }
  }
  $13 = $$ph;$r$0$lcssa = $r$0$lcssa$ph;
 }
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$03 = $16;
 return ($$03|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$111 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $x$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $21 & $22;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  return ($97|0);
 }
 $c$111 = $c$0;$x$012 = 0;
 while(1) {
  $33 = ($x$012*10)|0;
  $34 = (($c$111) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $$ = $44 & $45;
  if ($$) {
   $c$111 = $c$1$be;$x$012 = $35;
  } else {
   $$lcssa17 = $35;$c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $46 = ($$lcssa17|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be$lcssa) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $$lcssa17;$53 = $47;$c$27 = $c$1$be$lcssa;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$27|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$27|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond5 = $70 & $75;
   if ($or$cond5) {
    $52 = $60;$53 = $61;$c$27 = $c$2$be;
   } else {
    $98 = $60;$99 = $61;$c$2$be$lcssa = $c$2$be;
    break;
   }
  }
  $90 = $98;$91 = $99;$c$2$lcssa = $c$2$be$lcssa;
 } else {
  $90 = $$lcssa17;$91 = $47;$c$2$lcssa = $c$1$be$lcssa;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0, $$0$lcssa$i69 = 0;
 var $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$0$ph = 0, $$0$ph287 = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0, $$01$i67 = 0;
 var $$01$i69$i = 0, $$01$i74 = 0, $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$100 = 0, $$12$i = 0;
 var $$12$i$i = 0, $$12$i118$i = 0, $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$21 = 0, $$216$$29$i = 0, $$216$$31$i = 0, $$216$i = 0, $$25 = 0, $$26 = 0, $$26$i = 0, $$26$us$i = 0, $$27$i = 0, $$28$i = 0.0;
 var $$29$i = 0, $$3$i = 0.0, $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us309$i = 0, $$a$3$us310$i = 0, $$a$3$us310$i$lcssa = 0, $$a$3311$i = 0, $$a$3312$i = 0, $$a$3312$i$lcssa = 0, $$be = 0, $$be288 = 0, $$fl$4 = 0;
 var $$l10n$0 = 0, $$lcssa = 0, $$lcssa283$i = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$lcssa293 = 0, $$lcssa297 = 0, $$lcssa298 = 0, $$lcssa299 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0, $$lcssa304 = 0, $$lcssa305 = 0, $$lcssa306 = 0, $$lcssa307 = 0, $$lcssa308 = 0, $$lcssa309 = 0, $$lcssa310 = 0;
 var $$lcssa311 = 0, $$lcssa313 = 0, $$lcssa314 = 0, $$lcssa315 = 0, $$lcssa316 = 0, $$lcssa317 = 0, $$lcssa318 = 0, $$lcssa319 = 0, $$lcssa320 = 0, $$lcssa321 = 0, $$lcssa322 = 0, $$lcssa323 = 0, $$lcssa324 = 0.0, $$lcssa325 = 0, $$lcssa327 = 0, $$lcssa328 = 0, $$lcssa330 = 0, $$lcssa331 = 0, $$lcssa332 = 0, $$mask$i = 0;
 var $$mask$i39 = 0, $$mask1$i = 0, $$mask1$i38 = 0, $$neg159$i = 0, $$neg160$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$ph = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre = 0, $$pre$i = 0, $$pre269 = 0, $$pre270 = 0, $$pre308$i = 0, $$sum$i = 0, $$sum21$i = 0, $$sum22$i = 0;
 var $$z$3$i = 0, $$z$4$us$i = 0, $$z$4$us$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0;
 var $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0;
 var $1030 = 0.0, $1031 = 0.0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0;
 var $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $124$phi = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0;
 var $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0;
 var $563 = 0.0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $579$phi = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0.0, $702 = 0, $703 = 0.0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $879$phi = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$2$ph$i$lcssa = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0;
 var $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0;
 var $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0;
 var $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0, $d$0255$i = 0;
 var $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0, $d$5192$i = 0, $d$6204$i = 0, $e$0237$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0, $estr$2$i = 0;
 var $exitcond$i = 0, $fl$0115 = 0, $fl$0115$ph = 0, $fl$0175 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt88$lcssa = 0, $fmt88$lcssa$ph = 0, $fmt88167 = 0, $fmt89 = 0, $fmt89$lcssa = 0, $fmt89$lcssa290 = 0, $fmt90 = 0, $fmt90$be = 0, $fmt91 = 0, $fmt93 = 0, $fmt93$lcssa294 = 0;
 var $fmt94 = 0, $i$0$lcssa = 0, $i$0$lcssa275 = 0, $i$0180 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1191 = 0, $i$1230$i = 0, $i$2166 = 0, $i$2166$lcssa = 0, $i$2217$i = 0, $i$3164 = 0, $i$3213$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i33 = 0, $isdigit10 = 0, $isdigit12 = 0;
 var $isdigit2$i = 0, $isdigit2$i29 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i32 = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$be = 0, $l$0$i = 0;
 var $l$1$i = 0, $l$1179 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$be = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i108$i = 0, $or$cond$i43$i = 0, $or$cond$i50$i = 0, $or$cond$i58 = 0;
 var $or$cond$i60$i = 0, $or$cond$i65 = 0, $or$cond$i67$i = 0, $or$cond$i72 = 0, $or$cond$i80 = 0, $or$cond$i80$i = 0, $or$cond$i82 = 0, $or$cond10$i = 0, $or$cond10191$i = 0, $or$cond12$i = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond23 = 0, $or$cond279 = 0, $or$cond35$i = 0, $or$cond37$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0;
 var $p$2$ = 0, $p$4274 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0;
 var $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$i$lcssa = 0, $s$1$us$us$i = 0, $s$1$us$us$i$lcssa = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s8$0188$i$ph = 0, $s9$0$i = 0, $s9$1200$i = 0, $s9$2$i = 0, $sext = 0, $sext101 = 0;
 var $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa295 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8113 = 0, $storemerge8113$ph = 0, $storemerge8174 = 0, $t$0 = 0, $t$1 = 0, $uglygep$i = 0, $uglygep296$i = 0, $uglygep300$i = 0, $uglygep300301$i = 0, $umax$i = 0, $umax297$i = 0, $umax297298299$i = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$25$i = 0, $w$38$i = 0, $wc = 0, $ws$0181 = 0, $ws$1192 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0$lcssa$ph = 0, $z$0168 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0, $z$2 = 0;
 var $z$2$i = 0, $z$2$i$lcssa = 0, $z$2$i$lcssa$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$5$i$lcssa = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp;
 $buf$i = sp + 832|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816|0;
 $pad$i = sp + 520|0;
 $buf = sp + 776|0;
 $wc = sp + 8|0;
 $mb = sp + 828|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1039 = 0;$1040 = 0;$cnt$0 = 0;$fmt90 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt90>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 426;
   break;
  }
  $1041 = $22;$fmt89 = $fmt90;
  while(1) {
   if ((($1041<<24>>24) == 37)) {
    $fmt89$lcssa = $fmt89;
    label = 9;
    break;
   } else if ((($1041<<24>>24) == 0)) {
    $fmt89$lcssa290 = $fmt89;
    label = 14;
    break;
   }
   $24 = (($fmt89) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1041 = $$pre;$fmt89 = $24;
  }
  if ((label|0) == 9) {
   label = 0;
   $fmt88167 = $fmt89$lcssa;$z$0168 = $fmt89$lcssa;
   while(1) {
    $25 = (($fmt88167) + 1|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ($26<<24>>24)==(37);
    if (!($27)) {
     $fmt88$lcssa$ph = $fmt88167;$z$0$lcssa$ph = $z$0168;
     break;
    }
    $28 = (($z$0168) + 1|0);
    $29 = (($fmt88167) + 2|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ($30<<24>>24)==(37);
    if ($31) {
     $fmt88167 = $29;$z$0168 = $28;
    } else {
     $fmt88$lcssa$ph = $29;$z$0$lcssa$ph = $28;
     break;
    }
   }
   $fmt88$lcssa = $fmt88$lcssa$ph;$z$0$lcssa = $z$0$lcssa$ph;
  }
  else if ((label|0) == 14) {
   label = 0;
   $fmt88$lcssa = $fmt89$lcssa290;$z$0$lcssa = $fmt89$lcssa290;
  }
  $32 = $z$0$lcssa;
  $33 = $fmt90;
  $34 = (($32) - ($33))|0;
  if ($1) {
   (___fwritex($fmt90,$34,$f)|0);
  }
  $35 = ($z$0$lcssa|0)==($fmt90|0);
  L24: do {
   if ($35) {
    $36 = (($fmt88$lcssa) + 1|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37 << 24 >> 24;
    $isdigittmp = (($38) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $39 = (($fmt88$lcssa) + 2|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(36);
     $42 = (($fmt88$lcssa) + 3|0);
     $$100 = $41 ? $42 : $36;
     $$l10n$0 = $41 ? 1 : $l10n$0;
     $isdigittmp$ = $41 ? $isdigittmp : -1;
     $$pre269 = HEAP8[$$100>>0]|0;
     $44 = $$pre269;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$100;
    } else {
     $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
    }
    $43 = $44 << 24 >> 24;
    $45 = $43 & -32;
    $46 = ($45|0)==(32);
    if ($46) {
     $48 = $43;$53 = $44;$fl$0175 = 0;$storemerge8174 = $storemerge;
     while(1) {
      $47 = (($48) + -32)|0;
      $49 = 1 << $47;
      $50 = $49 & 75913;
      $51 = ($50|0)==(0);
      if ($51) {
       $$ph = $53;$fl$0115$ph = $fl$0175;$storemerge8113$ph = $storemerge8174;
       break;
      }
      $52 = $53 << 24 >> 24;
      $54 = (($52) + -32)|0;
      $55 = 1 << $54;
      $56 = $55 | $fl$0175;
      $57 = (($storemerge8174) + 1|0);
      $58 = HEAP8[$57>>0]|0;
      $59 = $58 << 24 >> 24;
      $60 = $59 & -32;
      $61 = ($60|0)==(32);
      if ($61) {
       $48 = $59;$53 = $58;$fl$0175 = $56;$storemerge8174 = $57;
      } else {
       $$ph = $58;$fl$0115$ph = $56;$storemerge8113$ph = $57;
       break;
      }
     }
     $62 = $$ph;$fl$0115 = $fl$0115$ph;$storemerge8113 = $storemerge8113$ph;
    } else {
     $62 = $44;$fl$0115 = 0;$storemerge8113 = $storemerge;
    }
    $63 = ($62<<24>>24)==(42);
    do {
     if ($63) {
      $64 = (($storemerge8113) + 1|0);
      $65 = HEAP8[$64>>0]|0;
      $66 = $65 << 24 >> 24;
      $isdigittmp11 = (($66) + -48)|0;
      $isdigit12 = ($isdigittmp11>>>0)<(10);
      if ($isdigit12) {
       $67 = (($storemerge8113) + 2|0);
       $68 = HEAP8[$67>>0]|0;
       $69 = ($68<<24>>24)==(36);
       if ($69) {
        $70 = (($nl_type) + ($isdigittmp11<<2)|0);
        HEAP32[$70>>2] = 10;
        $71 = HEAP8[$64>>0]|0;
        $72 = $71 << 24 >> 24;
        $73 = (($72) + -48)|0;
        $74 = (($nl_arg) + ($73<<3)|0);
        $75 = $74;
        $76 = $75;
        $77 = HEAP32[$76>>2]|0;
        $78 = (($75) + 4)|0;
        $79 = $78;
        $80 = HEAP32[$79>>2]|0;
        $81 = (($storemerge8113) + 3|0);
        $l10n$2 = 1;$storemerge13 = $81;$w$0 = $77;
       } else {
        label = 29;
       }
      } else {
       label = 29;
      }
      if ((label|0) == 29) {
       label = 0;
       $82 = ($l10n$1|0)==(0);
       if (!($82)) {
        $$0$ph287 = -1;
        label = 449;
        break L1;
       }
       if (!($1)) {
        $fl$1 = $fl$0115;$fmt91 = $64;$l10n$3 = 0;$w$1 = 0;
        break;
       }
       $arglist_current = HEAP32[$ap>>2]|0;
       $83 = HEAP32[$arglist_current>>2]|0;
       $arglist_next = (($arglist_current) + 4|0);
       HEAP32[$ap>>2] = $arglist_next;
       $l10n$2 = 0;$storemerge13 = $64;$w$0 = $83;
      }
      $84 = ($w$0|0)<(0);
      if ($84) {
       $85 = $fl$0115 | 8192;
       $86 = (0 - ($w$0))|0;
       $fl$1 = $85;$fmt91 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $86;
      } else {
       $fl$1 = $fl$0115;$fmt91 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
      }
     } else {
      $87 = $62 << 24 >> 24;
      $isdigittmp1$i = (($87) + -48)|0;
      $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
      if ($isdigit2$i) {
       $91 = $storemerge8113;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
       while(1) {
        $88 = ($i$03$i*10)|0;
        $89 = (($88) + ($isdigittmp4$i))|0;
        $90 = (($91) + 1|0);
        $92 = HEAP8[$90>>0]|0;
        $93 = $92 << 24 >> 24;
        $isdigittmp$i = (($93) + -48)|0;
        $isdigit$i = ($isdigittmp$i>>>0)<(10);
        if ($isdigit$i) {
         $91 = $90;$i$03$i = $89;$isdigittmp4$i = $isdigittmp$i;
        } else {
         $$lcssa = $89;$$lcssa291 = $90;
         break;
        }
       }
       $94 = ($$lcssa|0)<(0);
       if ($94) {
        $$0$ph287 = -1;
        label = 449;
        break L1;
       } else {
        $fl$1 = $fl$0115;$fmt91 = $$lcssa291;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
       }
      } else {
       $fl$1 = $fl$0115;$fmt91 = $storemerge8113;$l10n$3 = $l10n$1;$w$1 = 0;
      }
     }
    } while(0);
    $95 = HEAP8[$fmt91>>0]|0;
    $96 = ($95<<24>>24)==(46);
    do {
     if ($96) {
      $97 = (($fmt91) + 1|0);
      $98 = HEAP8[$97>>0]|0;
      $99 = ($98<<24>>24)==(42);
      if (!($99)) {
       $120 = $98 << 24 >> 24;
       $isdigittmp1$i28 = (($120) + -48)|0;
       $isdigit2$i29 = ($isdigittmp1$i28>>>0)<(10);
       if (!($isdigit2$i29)) {
        $fmt94 = $97;$p$0 = 0;
        break;
       }
       $1042 = $97;$124 = $fmt91;$i$03$i31 = 0;$isdigittmp4$i30 = $isdigittmp1$i28;
       while(1) {
        $121 = ($i$03$i31*10)|0;
        $122 = (($121) + ($isdigittmp4$i30))|0;
        $123 = (($124) + 2|0);
        $125 = HEAP8[$123>>0]|0;
        $126 = $125 << 24 >> 24;
        $isdigittmp$i32 = (($126) + -48)|0;
        $isdigit$i33 = ($isdigittmp$i32>>>0)<(10);
        if ($isdigit$i33) {
         $124$phi = $1042;$1042 = $123;$i$03$i31 = $122;$isdigittmp4$i30 = $isdigittmp$i32;$124 = $124$phi;
        } else {
         $$lcssa292 = $122;$$lcssa293 = $123;
         break;
        }
       }
       $fmt94 = $$lcssa293;$p$0 = $$lcssa292;
       break;
      }
      $100 = (($fmt91) + 2|0);
      $101 = HEAP8[$100>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp9 = (($102) + -48)|0;
      $isdigit10 = ($isdigittmp9>>>0)<(10);
      if ($isdigit10) {
       $103 = (($fmt91) + 3|0);
       $104 = HEAP8[$103>>0]|0;
       $105 = ($104<<24>>24)==(36);
       if ($105) {
        $106 = (($nl_type) + ($isdigittmp9<<2)|0);
        HEAP32[$106>>2] = 10;
        $107 = HEAP8[$100>>0]|0;
        $108 = $107 << 24 >> 24;
        $109 = (($108) + -48)|0;
        $110 = (($nl_arg) + ($109<<3)|0);
        $111 = $110;
        $112 = $111;
        $113 = HEAP32[$112>>2]|0;
        $114 = (($111) + 4)|0;
        $115 = $114;
        $116 = HEAP32[$115>>2]|0;
        $117 = (($fmt91) + 4|0);
        $fmt94 = $117;$p$0 = $113;
        break;
       }
      }
      $118 = ($l10n$3|0)==(0);
      if (!($118)) {
       $$0$ph287 = -1;
       label = 449;
       break L1;
      }
      if ($1) {
       $arglist_current2 = HEAP32[$ap>>2]|0;
       $119 = HEAP32[$arglist_current2>>2]|0;
       $arglist_next3 = (($arglist_current2) + 4|0);
       HEAP32[$ap>>2] = $arglist_next3;
       $fmt94 = $100;$p$0 = $119;
      } else {
       $fmt94 = $100;$p$0 = 0;
      }
     } else {
      $fmt94 = $fmt91;$p$0 = -1;
     }
    } while(0);
    $fmt93 = $fmt94;$st$0 = 0;
    while(1) {
     $127 = HEAP8[$fmt93>>0]|0;
     $128 = $127 << 24 >> 24;
     $129 = (($128) + -65)|0;
     $130 = ($129>>>0)>(57);
     if ($130) {
      label = 448;
      break L1;
     }
     $131 = (($fmt93) + 1|0);
     $132 = ((10248 + (($st$0*58)|0)|0) + ($129)|0);
     $133 = HEAP8[$132>>0]|0;
     $134 = $133&255;
     $135 = (($134) + -1)|0;
     $136 = ($135>>>0)<(8);
     if ($136) {
      $fmt93 = $131;$st$0 = $134;
     } else {
      $$lcssa297 = $127;$$lcssa298 = $131;$$lcssa299 = $133;$$lcssa300 = $134;$fmt93$lcssa294 = $fmt93;$st$0$lcssa295 = $st$0;
      break;
     }
    }
    $137 = ($$lcssa299<<24>>24)==(0);
    if ($137) {
     $$0$ph287 = -1;
     label = 449;
     break L1;
    }
    $138 = ($$lcssa299<<24>>24)==(19);
    $139 = ($argpos$0|0)>(-1);
    L74: do {
     if ($138) {
      if ($139) {
       $$0$ph287 = -1;
       label = 449;
       break L1;
      } else {
       $1043 = $1039;$1044 = $1040;
       label = 71;
      }
     } else {
      if ($139) {
       $140 = (($nl_type) + ($argpos$0<<2)|0);
       HEAP32[$140>>2] = $$lcssa300;
       $141 = (($nl_arg) + ($argpos$0<<3)|0);
       $142 = $141;
       $143 = $142;
       $144 = HEAP32[$143>>2]|0;
       $145 = (($142) + 4)|0;
       $146 = $145;
       $147 = HEAP32[$146>>2]|0;
       $1043 = $144;$1044 = $147;
       label = 71;
       break;
      }
      if (!($1)) {
       $$0$ph287 = 0;
       label = 449;
       break L1;
      }
      $148 = ($$lcssa299&255)>(20);
      if ($148) {
       $182 = $$lcssa297;$190 = $1039;$217 = $1040;
      } else {
       do {
        switch ($$lcssa300|0) {
        case 17:  {
         $arglist_current29 = HEAP32[$ap>>2]|0;
         HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$175 = +HEAPF64[tempDoublePtr>>3];
         $arglist_next30 = (($arglist_current29) + 8|0);
         HEAP32[$ap>>2] = $arglist_next30;
         HEAPF64[tempDoublePtr>>3] = $175;$176 = HEAP32[tempDoublePtr>>2]|0;
         $177 = HEAP32[tempDoublePtr+4>>2]|0;
         $1045 = $177;$1046 = $176;
         label = 72;
         break L74;
         break;
        }
        case 18:  {
         $arglist_current32 = HEAP32[$ap>>2]|0;
         HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$178 = +HEAPF64[tempDoublePtr>>3];
         $arglist_next33 = (($arglist_current32) + 8|0);
         HEAP32[$ap>>2] = $arglist_next33;
         HEAPF64[tempDoublePtr>>3] = $178;$179 = HEAP32[tempDoublePtr>>2]|0;
         $180 = HEAP32[tempDoublePtr+4>>2]|0;
         $1043 = $179;$1044 = $180;
         label = 71;
         break L74;
         break;
        }
        case 14:  {
         $arglist_current20 = HEAP32[$ap>>2]|0;
         $167 = HEAP32[$arglist_current20>>2]|0;
         $arglist_next21 = (($arglist_current20) + 4|0);
         HEAP32[$ap>>2] = $arglist_next21;
         $$mask1$i38 = $167 & 65535;
         $1045 = 0;$1046 = $$mask1$i38;
         label = 72;
         break L74;
         break;
        }
        case 12:  {
         $arglist_current14 = HEAP32[$ap>>2]|0;
         $155 = $arglist_current14;
         $156 = $155;
         $157 = HEAP32[$156>>2]|0;
         $158 = (($155) + 4)|0;
         $159 = $158;
         $160 = HEAP32[$159>>2]|0;
         $arglist_next15 = (($arglist_current14) + 8|0);
         HEAP32[$ap>>2] = $arglist_next15;
         $1045 = $160;$1046 = $157;
         label = 72;
         break L74;
         break;
        }
        case 13:  {
         $arglist_current17 = HEAP32[$ap>>2]|0;
         $161 = HEAP32[$arglist_current17>>2]|0;
         $arglist_next18 = (($arglist_current17) + 4|0);
         HEAP32[$ap>>2] = $arglist_next18;
         $162 = $161&65535;
         $163 = $162 << 16 >> 16;
         $164 = ($163|0)<(0);
         $165 = $164 << 31 >> 31;
         $sext101 = $161 << 16;
         $166 = $sext101 >> 16;
         $1045 = $165;$1046 = $166;
         label = 72;
         break L74;
         break;
        }
        case 15:  {
         $arglist_current23 = HEAP32[$ap>>2]|0;
         $168 = HEAP32[$arglist_current23>>2]|0;
         $arglist_next24 = (($arglist_current23) + 4|0);
         HEAP32[$ap>>2] = $arglist_next24;
         $169 = $168&255;
         $170 = $169 << 24 >> 24;
         $171 = ($170|0)<(0);
         $172 = $171 << 31 >> 31;
         $sext = $168 << 24;
         $173 = $sext >> 24;
         $1045 = $172;$1046 = $173;
         label = 72;
         break L74;
         break;
        }
        case 16:  {
         $arglist_current26 = HEAP32[$ap>>2]|0;
         $174 = HEAP32[$arglist_current26>>2]|0;
         $arglist_next27 = (($arglist_current26) + 4|0);
         HEAP32[$ap>>2] = $arglist_next27;
         $$mask$i39 = $174 & 255;
         $1045 = 0;$1046 = $$mask$i39;
         label = 72;
         break L74;
         break;
        }
        case 11:  {
         $arglist_current11 = HEAP32[$ap>>2]|0;
         $154 = HEAP32[$arglist_current11>>2]|0;
         $arglist_next12 = (($arglist_current11) + 4|0);
         HEAP32[$ap>>2] = $arglist_next12;
         $1045 = 0;$1046 = $154;
         label = 72;
         break L74;
         break;
        }
        case 10:  {
         $arglist_current8 = HEAP32[$ap>>2]|0;
         $151 = HEAP32[$arglist_current8>>2]|0;
         $arglist_next9 = (($arglist_current8) + 4|0);
         HEAP32[$ap>>2] = $arglist_next9;
         $152 = ($151|0)<(0);
         $153 = $152 << 31 >> 31;
         $1045 = $153;$1046 = $151;
         label = 72;
         break L74;
         break;
        }
        case 9:  {
         $arglist_current5 = HEAP32[$ap>>2]|0;
         $149 = HEAP32[$arglist_current5>>2]|0;
         $arglist_next6 = (($arglist_current5) + 4|0);
         HEAP32[$ap>>2] = $arglist_next6;
         $150 = $149;
         $1045 = $1040;$1046 = $150;
         label = 72;
         break L74;
         break;
        }
        default: {
         $1045 = $1040;$1046 = $1039;
         label = 72;
         break L74;
        }
        }
       } while(0);
      }
     }
    } while(0);
    if ((label|0) == 71) {
     label = 0;
     if ($1) {
      $1045 = $1044;$1046 = $1043;
      label = 72;
     } else {
      $$be = $1043;$$be288 = $1044;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
      break;
     }
    }
    if ((label|0) == 72) {
     label = 0;
     $$pre270 = HEAP8[$fmt93$lcssa294>>0]|0;
     $182 = $$pre270;$190 = $1046;$217 = $1045;
    }
    $181 = $182 << 24 >> 24;
    $183 = ($st$0$lcssa295|0)!=(0);
    $184 = $181 & 15;
    $185 = ($184|0)==(3);
    $or$cond15 = $183 & $185;
    $186 = $181 & -33;
    $t$0 = $or$cond15 ? $186 : $181;
    $187 = $fl$1 & 8192;
    $188 = ($187|0)==(0);
    $189 = $fl$1 & -65537;
    $fl$1$ = $188 ? $fl$1 : $189;
    L98: do {
     switch ($t$0|0) {
     case 88: case 120:  {
      $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
      label = 83;
      break;
     }
     case 111:  {
      $238 = ($190|0)==(0);
      $239 = ($217|0)==(0);
      $240 = $238 & $239;
      if ($240) {
       $$0$lcssa$i52 = $2;
      } else {
       $$03$i49 = $2;$242 = $190;$246 = $217;
       while(1) {
        $241 = $242 & 7;
        $243 = $241 | 48;
        $244 = $243&255;
        $245 = (($$03$i49) + -1|0);
        HEAP8[$245>>0] = $244;
        $247 = (_bitshift64Lshr(($242|0),($246|0),3)|0);
        $248 = tempRet0;
        $249 = ($247|0)==(0);
        $250 = ($248|0)==(0);
        $251 = $249 & $250;
        if ($251) {
         $$lcssa331 = $245;
         break;
        } else {
         $$03$i49 = $245;$242 = $247;$246 = $248;
        }
       }
       $$0$lcssa$i52 = $$lcssa331;
      }
      $252 = $fl$1$ & 8;
      $253 = ($252|0)==(0);
      $or$cond19 = $253 | $240;
      $$25 = $or$cond19 ? 10712 : ((10712 + 5|0));
      $254 = $or$cond19&1;
      $$26 = $254 ^ 1;
      $292 = $190;$294 = $217;$a$0 = $$0$lcssa$i52;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$26;$prefix$1 = $$25;
      label = 105;
      break;
     }
     case 105: case 100:  {
      $255 = ($217|0)<(0);
      if ($255) {
       $256 = (_i64Subtract(0,0,($190|0),($217|0))|0);
       $257 = tempRet0;
       $262 = $257;$264 = $256;$pl$0 = 1;$prefix$0 = 10712;
       label = 97;
       break L98;
      }
      $258 = $fl$1$ & 2048;
      $259 = ($258|0)==(0);
      if ($259) {
       $260 = $fl$1$ & 1;
       $261 = ($260|0)==(0);
       $$ = $261 ? 10712 : ((10712 + 2|0));
       $262 = $217;$264 = $190;$pl$0 = $260;$prefix$0 = $$;
       label = 97;
      } else {
       $262 = $217;$264 = $190;$pl$0 = 1;$prefix$0 = ((10712 + 1|0));
       label = 97;
      }
      break;
     }
     case 110:  {
      switch ($st$0$lcssa295|0) {
      case 3:  {
       $200 = $cnt$1&65535;
       $201 = $190;
       HEAP16[$201>>1] = $200;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 4:  {
       $202 = $cnt$1&255;
       $203 = $190;
       HEAP8[$203>>0] = $202;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 6:  {
       $204 = $190;
       HEAP32[$204>>2] = $cnt$1;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 1:  {
       $192 = $190;
       HEAP32[$192>>2] = $cnt$1;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 7:  {
       $205 = ($cnt$1|0)<(0);
       $206 = $205 << 31 >> 31;
       $207 = $190;
       $208 = $207;
       $209 = $208;
       HEAP32[$209>>2] = $cnt$1;
       $210 = (($208) + 4)|0;
       $211 = $210;
       HEAP32[$211>>2] = $206;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 2:  {
       $193 = ($cnt$1|0)<(0);
       $194 = $193 << 31 >> 31;
       $195 = $190;
       $196 = $195;
       $197 = $196;
       HEAP32[$197>>2] = $cnt$1;
       $198 = (($196) + 4)|0;
       $199 = $198;
       HEAP32[$199>>2] = $194;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 0:  {
       $191 = $190;
       HEAP32[$191>>2] = $cnt$1;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      default: {
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $34;$l10n$0$be = $l10n$3;
       break L24;
      }
      }
      break;
     }
     case 112:  {
      $212 = ($p$0>>>0)>(8);
      $213 = $212 ? $p$0 : 8;
      $214 = $fl$1$ | 8;
      $fl$3 = $214;$p$1 = $213;$t$1 = 120;
      label = 83;
      break;
     }
     case 117:  {
      $262 = $217;$264 = $190;$pl$0 = 0;$prefix$0 = 10712;
      label = 97;
      break;
     }
     case 99:  {
      $304 = $190&255;
      HEAP8[$4>>0] = $304;
      $1047 = $190;$1048 = $217;$a$2 = $4;$fl$6 = $189;$p$5 = 1;$pl$2 = 0;$prefix$2 = 10712;$z$2 = $2;
      break;
     }
     case 115:  {
      $308 = $190;
      $309 = ($190|0)==(0);
      $$21 = $309 ? 10728 : $308;
      $a$1 = $$21;
      label = 110;
      break;
     }
     case 67:  {
      HEAP32[$wc>>2] = $190;
      HEAP32[$5>>2] = 0;
      $1051 = $wc;$1052 = $6;$p$4274 = -1;
      label = 115;
      break;
     }
     case 83:  {
      $316 = $190;
      $317 = ($p$0|0)==(0);
      if ($317) {
       $1053 = $190;$1054 = $316;$i$0$lcssa275 = 0;
       label = 120;
      } else {
       $1051 = $316;$1052 = $190;$p$4274 = $p$0;
       label = 115;
      }
      break;
     }
     case 109:  {
      $305 = (___errno_location()|0);
      $306 = HEAP32[$305>>2]|0;
      $307 = (_strerror(($306|0))|0);
      $a$1 = $307;
      label = 110;
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      HEAP32[tempDoublePtr>>2] = $190;HEAP32[tempDoublePtr+4>>2] = $217;$355 = +HEAPF64[tempDoublePtr>>3];
      HEAP32[$e2$i>>2] = 0;
      $356 = ($217|0)<(0);
      if ($356) {
       $357 = -$355;
       $$013$i = $357;$pl$0$i = 1;$prefix$0$i = 10736;
      } else {
       $358 = $fl$1$ & 2048;
       $359 = ($358|0)==(0);
       if ($359) {
        $360 = $fl$1$ & 1;
        $361 = ($360|0)==(0);
        $$$i = $361 ? ((10736 + 1|0)) : ((10736 + 6|0));
        $$013$i = $355;$pl$0$i = $360;$prefix$0$i = $$$i;
       } else {
        $$013$i = $355;$pl$0$i = 1;$prefix$0$i = ((10736 + 3|0));
       }
      }
      HEAPF64[tempDoublePtr>>3] = $$013$i;$362 = HEAP32[tempDoublePtr>>2]|0;
      $363 = HEAP32[tempDoublePtr+4>>2]|0;
      $364 = $363 & 2146435072;
      $365 = ($364>>>0)<(2146435072);
      $366 = (0)<(0);
      $367 = ($364|0)==(2146435072);
      $368 = $367 & $366;
      $369 = $365 | $368;
      if (!($369)) {
       $370 = $t$0 & 32;
       $371 = ($370|0)!=(0);
       $372 = $371 ? 10760 : 10768;
       $373 = ($$013$i != $$013$i) | (0.0 != 0.0);
       if ($373) {
        $374 = $371 ? 10776 : 10784;
        $pl$1$i = 0;$s1$0$i = $374;
       } else {
        $pl$1$i = $pl$0$i;$s1$0$i = $372;
       }
       $375 = (($pl$1$i) + 3)|0;
       $376 = $fl$1$ & 8192;
       $377 = ($376|0)==(0);
       $378 = ($w$1|0)>($375|0);
       $or$cond$i43$i = $377 & $378;
       if ($or$cond$i43$i) {
        $379 = (($w$1) - ($375))|0;
        $380 = ($379>>>0)>(256);
        $381 = $380 ? 256 : $379;
        _memset(($pad$i|0),32,($381|0))|0;
        $382 = ($379>>>0)>(255);
        if ($382) {
         $$01$i45$i = $379;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $383 = (($$01$i45$i) + -256)|0;
          $384 = ($383>>>0)>(255);
          if ($384) {
           $$01$i45$i = $383;
          } else {
           break;
          }
         }
         $385 = $379 & 255;
         $$0$lcssa$i47$i = $385;
        } else {
         $$0$lcssa$i47$i = $379;
        }
        (___fwritex($pad$i,$$0$lcssa$i47$i,$f)|0);
       }
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       (___fwritex($s1$0$i,3,$f)|0);
       $386 = $fl$1$ & 73728;
       $387 = ($386|0)==(8192);
       $or$cond$i50$i = $387 & $378;
       if ($or$cond$i50$i) {
        $388 = (($w$1) - ($375))|0;
        $389 = ($388>>>0)>(256);
        $390 = $389 ? 256 : $388;
        _memset(($pad$i|0),32,($390|0))|0;
        $391 = ($388>>>0)>(255);
        if ($391) {
         $$01$i52$i = $388;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $392 = (($$01$i52$i) + -256)|0;
          $393 = ($392>>>0)>(255);
          if ($393) {
           $$01$i52$i = $392;
          } else {
           break;
          }
         }
         $394 = $388 & 255;
         $$0$lcssa$i54$i = $394;
        } else {
         $$0$lcssa$i54$i = $388;
        }
        (___fwritex($pad$i,$$0$lcssa$i54$i,$f)|0);
       }
       $w$$i = $378 ? $w$1 : $375;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $w$$i;$l10n$0$be = $l10n$3;
       break L24;
      }
      $395 = (+_frexpl($$013$i,$e2$i));
      $396 = $395 * 2.0;
      $397 = $396 != 0.0;
      if ($397) {
       $398 = HEAP32[$e2$i>>2]|0;
       $399 = (($398) + -1)|0;
       HEAP32[$e2$i>>2] = $399;
      }
      $400 = $t$0 | 32;
      $401 = ($400|0)==(97);
      if ($401) {
       $402 = $t$0 & 32;
       $403 = ($402|0)==(0);
       $404 = (($prefix$0$i) + 9|0);
       $prefix$0$$i = $403 ? $prefix$0$i : $404;
       $405 = $pl$0$i | 2;
       $406 = ($p$0>>>0)>(11);
       $407 = (12 - ($p$0))|0;
       $re$0$i = $406 ? 0 : $407;
       $408 = ($re$0$i|0)==(0);
       do {
        if ($408) {
         $$1$i = $396;
        } else {
         $re$1187$i = $re$0$i;$round$0186$i = 8.0;
         while(1) {
          $409 = (($re$1187$i) + -1)|0;
          $410 = $round$0186$i * 16.0;
          $411 = ($409|0)==(0);
          if ($411) {
           $$lcssa324 = $410;
           break;
          } else {
           $re$1187$i = $409;$round$0186$i = $410;
          }
         }
         $412 = HEAP8[$prefix$0$$i>>0]|0;
         $413 = ($412<<24>>24)==(45);
         if ($413) {
          $414 = -$396;
          $415 = $414 - $$lcssa324;
          $416 = $$lcssa324 + $415;
          $417 = -$416;
          $$1$i = $417;
          break;
         } else {
          $418 = $396 + $$lcssa324;
          $419 = $418 - $$lcssa324;
          $$1$i = $419;
          break;
         }
        }
       } while(0);
       $420 = HEAP32[$e2$i>>2]|0;
       $421 = ($420|0)<(0);
       $422 = (0 - ($420))|0;
       $423 = $421 ? $422 : $420;
       $424 = ($423|0)<(0);
       if ($424) {
        $425 = ($423|0)<(0);
        $426 = $425 << 31 >> 31;
        $$05$i$i = $7;$427 = $423;$428 = $426;
        while(1) {
         $429 = (___uremdi3(($427|0),($428|0),10,0)|0);
         $430 = tempRet0;
         $431 = $429 | 48;
         $432 = $431&255;
         $433 = (($$05$i$i) + -1|0);
         HEAP8[$433>>0] = $432;
         $434 = (___udivdi3(($427|0),($428|0),10,0)|0);
         $435 = tempRet0;
         $436 = ($428>>>0)>(9);
         $437 = ($427>>>0)>(4294967295);
         $438 = ($428|0)==(9);
         $439 = $438 & $437;
         $440 = $436 | $439;
         if ($440) {
          $$05$i$i = $433;$427 = $434;$428 = $435;
         } else {
          $$lcssa325 = $433;$1055 = $434;$1056 = $435;
          break;
         }
        }
        $$0$lcssa$i56$i = $$lcssa325;$$01$lcssa$off0$i$i = $1055;
       } else {
        $$0$lcssa$i56$i = $7;$$01$lcssa$off0$i$i = $423;
       }
       $441 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($441) {
        $$1$lcssa$i$i = $$0$lcssa$i56$i;
       } else {
        $$12$i$i = $$0$lcssa$i56$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $442 = (($y$03$i$i>>>0) % 10)&-1;
         $443 = $442 | 48;
         $444 = $443&255;
         $445 = (($$12$i$i) + -1|0);
         HEAP8[$445>>0] = $444;
         $446 = (($y$03$i$i>>>0) / 10)&-1;
         $447 = ($y$03$i$i>>>0)<(10);
         if ($447) {
          $$lcssa327 = $445;
          break;
         } else {
          $$12$i$i = $445;$y$03$i$i = $446;
         }
        }
        $$1$lcssa$i$i = $$lcssa327;
       }
       $448 = ($$1$lcssa$i$i|0)==($7|0);
       if ($448) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $449 = HEAP32[$e2$i>>2]|0;
       $450 = $449 >> 31;
       $451 = $450 & 2;
       $452 = (($451) + 43)|0;
       $453 = $452&255;
       $454 = (($estr$0$i) + -1|0);
       HEAP8[$454>>0] = $453;
       $455 = (($t$0) + 15)|0;
       $456 = $455&255;
       $457 = (($estr$0$i) + -2|0);
       HEAP8[$457>>0] = $456;
       $notrhs$i = ($p$0|0)<(1);
       do {
        if ($notrhs$i) {
         $458 = $fl$1$ & 8;
         $459 = ($458|0)==(0);
         if ($459) {
          $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
          while(1) {
           $460 = (~~(($$2$us$us$i)));
           $461 = (10792 + ($460)|0);
           $462 = HEAP8[$461>>0]|0;
           $463 = $462&255;
           $464 = $463 | $402;
           $465 = $464&255;
           $466 = (($s$0$us$us$i) + 1|0);
           HEAP8[$s$0$us$us$i>>0] = $465;
           $467 = (+($460|0));
           $468 = $$2$us$us$i - $467;
           $469 = $468 * 16.0;
           $470 = $466;
           $471 = (($470) - ($0))|0;
           $472 = ($471|0)!=(1);
           $notlhs$us$us$i = $469 == 0.0;
           $or$cond$i80 = $472 | $notlhs$us$us$i;
           if ($or$cond$i80) {
            $s$1$us$us$i = $466;
           } else {
            $473 = (($s$0$us$us$i) + 2|0);
            HEAP8[$466>>0] = 46;
            $s$1$us$us$i = $473;
           }
           $474 = $469 != 0.0;
           if ($474) {
            $$2$us$us$i = $469;$s$0$us$us$i = $s$1$us$us$i;
           } else {
            $s$1$us$us$i$lcssa = $s$1$us$us$i;
            break;
           }
          }
          $s$1$lcssa$i = $s$1$us$us$i$lcssa;
          break;
         } else {
          $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
          while(1) {
           $475 = (~~(($$2$us$i)));
           $476 = (10792 + ($475)|0);
           $477 = HEAP8[$476>>0]|0;
           $478 = $477&255;
           $479 = $478 | $402;
           $480 = $479&255;
           $481 = (($s$0$us$i) + 1|0);
           HEAP8[$s$0$us$i>>0] = $480;
           $482 = (+($475|0));
           $483 = $$2$us$i - $482;
           $484 = $483 * 16.0;
           $485 = $481;
           $486 = (($485) - ($0))|0;
           $487 = ($486|0)==(1);
           if ($487) {
            $488 = (($s$0$us$i) + 2|0);
            HEAP8[$481>>0] = 46;
            $s$1$us$i = $488;
           } else {
            $s$1$us$i = $481;
           }
           $489 = $484 != 0.0;
           if ($489) {
            $$2$us$i = $484;$s$0$us$i = $s$1$us$i;
           } else {
            $s$1$us$i$lcssa = $s$1$us$i;
            break;
           }
          }
          $s$1$lcssa$i = $s$1$us$i$lcssa;
          break;
         }
        } else {
         $$2$i = $$1$i;$s$0$i = $buf$i;
         while(1) {
          $490 = (~~(($$2$i)));
          $491 = (10792 + ($490)|0);
          $492 = HEAP8[$491>>0]|0;
          $493 = $492&255;
          $494 = $493 | $402;
          $495 = $494&255;
          $496 = (($s$0$i) + 1|0);
          HEAP8[$s$0$i>>0] = $495;
          $497 = (+($490|0));
          $498 = $$2$i - $497;
          $499 = $498 * 16.0;
          $500 = $496;
          $501 = (($500) - ($0))|0;
          $502 = ($501|0)==(1);
          if ($502) {
           $503 = (($s$0$i) + 2|0);
           HEAP8[$496>>0] = 46;
           $s$1$i = $503;
          } else {
           $s$1$i = $496;
          }
          $504 = $499 != 0.0;
          if ($504) {
           $$2$i = $499;$s$0$i = $s$1$i;
          } else {
           $s$1$i$lcssa = $s$1$i;
           break;
          }
         }
         $s$1$lcssa$i = $s$1$i$lcssa;
        }
       } while(0);
       $505 = ($p$0|0)!=(0);
       $$pre308$i = $s$1$lcssa$i;
       $506 = (($11) + ($$pre308$i))|0;
       $507 = ($506|0)<($p$0|0);
       $or$cond279 = $505 & $507;
       $508 = $457;
       if ($or$cond279) {
        $509 = (($12) + ($p$0))|0;
        $510 = (($509) - ($508))|0;
        $l$0$i = $510;
       } else {
        $511 = (($10) - ($508))|0;
        $512 = (($511) + ($$pre308$i))|0;
        $l$0$i = $512;
       }
       $513 = (($l$0$i) + ($405))|0;
       $514 = $fl$1$ & 73728;
       $515 = ($514|0)==(0);
       $516 = ($w$1|0)>($513|0);
       $or$cond$i60$i = $515 & $516;
       if ($or$cond$i60$i) {
        $517 = (($w$1) - ($513))|0;
        $518 = ($517>>>0)>(256);
        $519 = $518 ? 256 : $517;
        _memset(($pad$i|0),32,($519|0))|0;
        $520 = ($517>>>0)>(255);
        if ($520) {
         $$01$i62$i = $517;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $521 = (($$01$i62$i) + -256)|0;
          $522 = ($521>>>0)>(255);
          if ($522) {
           $$01$i62$i = $521;
          } else {
           break;
          }
         }
         $523 = $517 & 255;
         $$0$lcssa$i64$i = $523;
        } else {
         $$0$lcssa$i64$i = $517;
        }
        (___fwritex($pad$i,$$0$lcssa$i64$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$405,$f)|0);
       $524 = ($514|0)==(65536);
       $or$cond$i67$i = $524 & $516;
       if ($or$cond$i67$i) {
        $525 = (($w$1) - ($513))|0;
        $526 = ($525>>>0)>(256);
        $527 = $526 ? 256 : $525;
        _memset(($pad$i|0),48,($527|0))|0;
        $528 = ($525>>>0)>(255);
        if ($528) {
         $$01$i69$i = $525;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $529 = (($$01$i69$i) + -256)|0;
          $530 = ($529>>>0)>(255);
          if ($530) {
           $$01$i69$i = $529;
          } else {
           break;
          }
         }
         $531 = $525 & 255;
         $$0$lcssa$i71$i = $531;
        } else {
         $$0$lcssa$i71$i = $525;
        }
        (___fwritex($pad$i,$$0$lcssa$i71$i,$f)|0);
       }
       $532 = (($$pre308$i) - ($0))|0;
       (___fwritex($buf$i,$532,$f)|0);
       $533 = $457;
       $534 = (($9) - ($533))|0;
       $535 = (($l$0$i) - ($534))|0;
       $536 = (($535) - ($532))|0;
       $537 = ($536|0)>(0);
       if ($537) {
        $538 = ($536>>>0)>(256);
        $539 = $538 ? 256 : $536;
        _memset(($pad$i|0),48,($539|0))|0;
        $540 = ($536>>>0)>(255);
        if ($540) {
         $$01$i75$i = $536;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $541 = (($$01$i75$i) + -256)|0;
          $542 = ($541>>>0)>(255);
          if ($542) {
           $$01$i75$i = $541;
          } else {
           break;
          }
         }
         $543 = $536 & 255;
         $$0$lcssa$i77$i = $543;
        } else {
         $$0$lcssa$i77$i = $536;
        }
        (___fwritex($pad$i,$$0$lcssa$i77$i,$f)|0);
       }
       (___fwritex($457,$534,$f)|0);
       $544 = ($514|0)==(8192);
       $or$cond$i80$i = $544 & $516;
       if ($or$cond$i80$i) {
        $545 = (($w$1) - ($513))|0;
        $546 = ($545>>>0)>(256);
        $547 = $546 ? 256 : $545;
        _memset(($pad$i|0),32,($547|0))|0;
        $548 = ($545>>>0)>(255);
        if ($548) {
         $$01$i82$i = $545;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $549 = (($$01$i82$i) + -256)|0;
          $550 = ($549>>>0)>(255);
          if ($550) {
           $$01$i82$i = $549;
          } else {
           break;
          }
         }
         $551 = $545 & 255;
         $$0$lcssa$i84$i = $551;
        } else {
         $$0$lcssa$i84$i = $545;
        }
        (___fwritex($pad$i,$$0$lcssa$i84$i,$f)|0);
       }
       $w$25$i = $516 ? $w$1 : $513;
       $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $w$25$i;$l10n$0$be = $l10n$3;
       break L24;
      }
      $552 = ($p$0|0)<(0);
      $$p$i = $552 ? 6 : $p$0;
      if ($397) {
       $553 = $396 * 268435456.0;
       $554 = HEAP32[$e2$i>>2]|0;
       $555 = (($554) + -28)|0;
       HEAP32[$e2$i>>2] = $555;
       $$3$i = $553;$556 = $555;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $396;$556 = $$pre$i;
      }
      $557 = ($556|0)<(0);
      $$39$i = $557 ? $big$i : $13;
      $558 = $$39$i;
      $$4$i = $$3$i;$z$0$i = $$39$i;
      while(1) {
       $559 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $559;
       $560 = (($z$0$i) + 4|0);
       $561 = (+($559>>>0));
       $562 = $$4$i - $561;
       $563 = $562 * 1.0E+9;
       $564 = $563 != 0.0;
       if ($564) {
        $$4$i = $563;$z$0$i = $560;
       } else {
        $$lcssa301 = $560;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $565 = ($$pr$i|0)>(0);
      if ($565) {
       $566 = $$pr$i;$a$1261$i = $$39$i;$z$1260$i = $$lcssa301;
       while(1) {
        $567 = ($566|0)>(29);
        $568 = $567 ? 29 : $566;
        $d$0253$i = (($z$1260$i) + -4|0);
        $569 = ($d$0253$i>>>0)<($a$1261$i>>>0);
        do {
         if ($569) {
          $a$2$ph$i = $a$1261$i;
         } else {
          $579 = $z$1260$i;$carry$0254$i = 0;$d$0255$i = $d$0253$i;
          while(1) {
           $570 = HEAP32[$d$0255$i>>2]|0;
           $571 = (_bitshift64Shl(($570|0),0,($568|0))|0);
           $572 = tempRet0;
           $573 = (_i64Add(($571|0),($572|0),($carry$0254$i|0),0)|0);
           $574 = tempRet0;
           $575 = (___uremdi3(($573|0),($574|0),1000000000,0)|0);
           $576 = tempRet0;
           HEAP32[$d$0255$i>>2] = $575;
           $577 = (___udivdi3(($573|0),($574|0),1000000000,0)|0);
           $578 = tempRet0;
           $d$0$i = (($579) + -8|0);
           $580 = ($d$0$i>>>0)<($a$1261$i>>>0);
           if ($580) {
            $$lcssa302 = $577;
            break;
           } else {
            $579$phi = $d$0255$i;$carry$0254$i = $577;$d$0255$i = $d$0$i;$579 = $579$phi;
           }
          }
          $581 = ($$lcssa302|0)==(0);
          if ($581) {
           $a$2$ph$i = $a$1261$i;
           break;
          }
          $582 = (($a$1261$i) + -4|0);
          HEAP32[$582>>2] = $$lcssa302;
          $a$2$ph$i = $582;
         }
        } while(0);
        $z$2$i = $z$1260$i;
        while(1) {
         $583 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($583)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $584 = (($z$2$i) + -4|0);
         $585 = HEAP32[$584>>2]|0;
         $586 = ($585|0)==(0);
         if ($586) {
          $z$2$i = $584;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $587 = HEAP32[$e2$i>>2]|0;
        $588 = (($587) - ($568))|0;
        HEAP32[$e2$i>>2] = $588;
        $589 = ($588|0)>(0);
        if ($589) {
         $566 = $588;$a$1261$i = $a$2$ph$i;$z$1260$i = $z$2$i$lcssa;
        } else {
         $$lcssa303 = $588;$a$2$ph$i$lcssa = $a$2$ph$i;$z$2$i$lcssa$lcssa = $z$2$i$lcssa;
         break;
        }
       }
       $$pr154$i = $$lcssa303;$a$1$lcssa$i = $a$2$ph$i$lcssa;$z$1$lcssa$i = $z$2$i$lcssa$lcssa;
      } else {
       $$pr154$i = $$pr$i;$a$1$lcssa$i = $$39$i;$z$1$lcssa$i = $$lcssa301;
      }
      $590 = ($$pr154$i|0)<(0);
      do {
       if ($590) {
        $591 = (($$p$i) + 25)|0;
        $592 = (($591|0) / 9)&-1;
        $593 = (($592) + 1)|0;
        $594 = ($400|0)==(102);
        if ($594) {
         $595 = (($$39$i) + ($593<<2)|0);
         $596 = $$pr154$i;$a$3248$us$i = $a$1$lcssa$i;$z$3247$us$i = $z$1$lcssa$i;
         while(1) {
          $597 = ($596|0)<(-9);
          $598 = (0 - ($596))|0;
          $$26$us$i = $597 ? 9 : $598;
          $599 = ($a$3248$us$i>>>0)<($z$3247$us$i>>>0);
          do {
           if ($599) {
            $624 = 1 << $$26$us$i;
            $617 = (($624) + -1)|0;
            $621 = 1000000000 >>> $$26$us$i;
            $carry3$0242$us$i = 0;$d$1241$us$i = $a$3248$us$i;
            while(1) {
             $615 = HEAP32[$d$1241$us$i>>2]|0;
             $616 = $615 & $617;
             $618 = $615 >>> $$26$us$i;
             $619 = (($618) + ($carry3$0242$us$i))|0;
             HEAP32[$d$1241$us$i>>2] = $619;
             $620 = Math_imul($616, $621)|0;
             $622 = (($d$1241$us$i) + 4|0);
             $623 = ($622>>>0)<($z$3247$us$i>>>0);
             if ($623) {
              $carry3$0242$us$i = $620;$d$1241$us$i = $622;
             } else {
              $$lcssa305 = $620;
              break;
             }
            }
            $603 = HEAP32[$a$3248$us$i>>2]|0;
            $604 = ($603|0)==(0);
            $605 = (($a$3248$us$i) + 4|0);
            $$a$3$us$i = $604 ? $605 : $a$3248$us$i;
            $606 = ($$lcssa305|0)==(0);
            if ($606) {
             $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $z$3247$us$i;
             break;
            }
            $607 = (($z$3247$us$i) + 4|0);
            HEAP32[$z$3247$us$i>>2] = $$lcssa305;
            $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $607;
           } else {
            $600 = HEAP32[$a$3248$us$i>>2]|0;
            $601 = ($600|0)==(0);
            $602 = (($a$3248$us$i) + 4|0);
            $$a$3$us309$i = $601 ? $602 : $a$3248$us$i;
            $$a$3$us310$i = $$a$3$us309$i;$z$4$us$i = $z$3247$us$i;
           }
          } while(0);
          $608 = $z$4$us$i;
          $609 = (($608) - ($558))|0;
          $610 = $609 >> 2;
          $611 = ($610|0)>($593|0);
          $$z$4$us$i = $611 ? $595 : $z$4$us$i;
          $612 = HEAP32[$e2$i>>2]|0;
          $613 = (($612) + ($$26$us$i))|0;
          HEAP32[$e2$i>>2] = $613;
          $614 = ($613|0)<(0);
          if ($614) {
           $596 = $613;$a$3248$us$i = $$a$3$us310$i;$z$3247$us$i = $$z$4$us$i;
          } else {
           $$a$3$us310$i$lcssa = $$a$3$us310$i;$$z$4$us$i$lcssa = $$z$4$us$i;
           break;
          }
         }
         $a$3$lcssa$i = $$a$3$us310$i$lcssa;$z$3$lcssa$i = $$z$4$us$i$lcssa;
         break;
        }
        $625 = $$pr154$i;$a$3248$i = $a$1$lcssa$i;$z$3247$i = $z$1$lcssa$i;
        while(1) {
         $626 = ($625|0)<(-9);
         $627 = (0 - ($625))|0;
         $$26$i = $626 ? 9 : $627;
         $628 = ($a$3248$i>>>0)<($z$3247$i>>>0);
         do {
          if ($628) {
           $632 = 1 << $$26$i;
           $633 = (($632) + -1)|0;
           $634 = 1000000000 >>> $$26$i;
           $carry3$0242$i = 0;$d$1241$i = $a$3248$i;
           while(1) {
            $635 = HEAP32[$d$1241$i>>2]|0;
            $636 = $635 & $633;
            $637 = $635 >>> $$26$i;
            $638 = (($637) + ($carry3$0242$i))|0;
            HEAP32[$d$1241$i>>2] = $638;
            $639 = Math_imul($636, $634)|0;
            $640 = (($d$1241$i) + 4|0);
            $641 = ($640>>>0)<($z$3247$i>>>0);
            if ($641) {
             $carry3$0242$i = $639;$d$1241$i = $640;
            } else {
             $$lcssa304 = $639;
             break;
            }
           }
           $642 = HEAP32[$a$3248$i>>2]|0;
           $643 = ($642|0)==(0);
           $644 = (($a$3248$i) + 4|0);
           $$a$3$i = $643 ? $644 : $a$3248$i;
           $645 = ($$lcssa304|0)==(0);
           if ($645) {
            $$a$3312$i = $$a$3$i;$z$4$i = $z$3247$i;
            break;
           }
           $646 = (($z$3247$i) + 4|0);
           HEAP32[$z$3247$i>>2] = $$lcssa304;
           $$a$3312$i = $$a$3$i;$z$4$i = $646;
          } else {
           $629 = HEAP32[$a$3248$i>>2]|0;
           $630 = ($629|0)==(0);
           $631 = (($a$3248$i) + 4|0);
           $$a$3311$i = $630 ? $631 : $a$3248$i;
           $$a$3312$i = $$a$3311$i;$z$4$i = $z$3247$i;
          }
         } while(0);
         $647 = $z$4$i;
         $648 = $$a$3312$i;
         $649 = (($647) - ($648))|0;
         $650 = $649 >> 2;
         $651 = ($650|0)>($593|0);
         if ($651) {
          $652 = (($$a$3312$i) + ($593<<2)|0);
          $z$5$i = $652;
         } else {
          $z$5$i = $z$4$i;
         }
         $653 = HEAP32[$e2$i>>2]|0;
         $654 = (($653) + ($$26$i))|0;
         HEAP32[$e2$i>>2] = $654;
         $655 = ($654|0)<(0);
         if ($655) {
          $625 = $654;$a$3248$i = $$a$3312$i;$z$3247$i = $z$5$i;
         } else {
          $$a$3312$i$lcssa = $$a$3312$i;$z$5$i$lcssa = $z$5$i;
          break;
         }
        }
        $a$3$lcssa$i = $$a$3312$i$lcssa;$z$3$lcssa$i = $z$5$i$lcssa;
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $656 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($656) {
        $657 = $a$3$lcssa$i;
        $658 = (($558) - ($657))|0;
        $659 = $658 >> 2;
        $660 = ($659*9)|0;
        $661 = HEAP32[$a$3$lcssa$i>>2]|0;
        $662 = ($661>>>0)<(10);
        if ($662) {
         $e$1$i = $660;
         break;
        }
        $e$0237$i = $660;$i$0236$i = 10;
        while(1) {
         $663 = ($i$0236$i*10)|0;
         $664 = (($e$0237$i) + 1)|0;
         $665 = ($661>>>0)<($663>>>0);
         if ($665) {
          $$lcssa306 = $664;
          break;
         } else {
          $e$0237$i = $664;$i$0236$i = $663;
         }
        }
        $e$1$i = $$lcssa306;
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $666 = ($400|0)!=(102);
      $667 = $666 ? $e$1$i : 0;
      $668 = (($$p$i) - ($667))|0;
      $669 = ($400|0)==(103);
      $670 = ($$p$i|0)!=(0);
      $$27$i = $669 & $670;
      $$neg159$i = $$27$i << 31 >> 31;
      $671 = (($668) + ($$neg159$i))|0;
      $672 = $z$3$lcssa$i;
      $673 = (($672) - ($558))|0;
      $674 = $673 >> 2;
      $675 = ($674*9)|0;
      $676 = (($675) + -9)|0;
      $677 = ($671|0)<($676|0);
      if ($677) {
       $678 = (($671) + 9216)|0;
       $679 = (($678|0) / 9)&-1;
       $$sum$i = (($679) + -1023)|0;
       $680 = (($$39$i) + ($$sum$i<<2)|0);
       $681 = (($678|0) % 9)&-1;
       $j$0229$i = (($681) + 1)|0;
       $682 = ($j$0229$i|0)<(9);
       if ($682) {
        $i$1230$i = 10;$j$0231$i = $j$0229$i;
        while(1) {
         $683 = ($i$1230$i*10)|0;
         $j$0$i = (($j$0231$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $$lcssa307 = $683;
          break;
         } else {
          $i$1230$i = $683;$j$0231$i = $j$0$i;
         }
        }
        $i$1$lcssa$i = $$lcssa307;
       } else {
        $i$1$lcssa$i = 10;
       }
       $684 = HEAP32[$680>>2]|0;
       $685 = (($684>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $686 = ($685|0)==(0);
       if ($686) {
        $$sum21$i = (($679) + -1022)|0;
        $687 = (($$39$i) + ($$sum21$i<<2)|0);
        $688 = ($687|0)==($z$3$lcssa$i|0);
        if ($688) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $680;$e$3$i = $e$1$i;
        } else {
         label = 275;
        }
       } else {
        label = 275;
       }
       do {
        if ((label|0) == 275) {
         label = 0;
         $689 = (($684>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $690 = $689 & 1;
         $691 = ($690|0)==(0);
         $$28$i = $691 ? 9007199254740992.0 : 9007199254740994.0;
         $692 = (($i$1$lcssa$i|0) / 2)&-1;
         $693 = ($685>>>0)<($692>>>0);
         do {
          if ($693) {
           $small$0$i = 0.5;
          } else {
           $694 = ($685|0)==($692|0);
           if ($694) {
            $$sum22$i = (($679) + -1022)|0;
            $695 = (($$39$i) + ($$sum22$i<<2)|0);
            $696 = ($695|0)==($z$3$lcssa$i|0);
            if ($696) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $697 = ($pl$0$i|0)==(0);
         do {
          if ($697) {
           $round6$1$i = $$28$i;$small$1$i = $small$0$i;
          } else {
           $698 = HEAP8[$prefix$0$i>>0]|0;
           $699 = ($698<<24>>24)==(45);
           if (!($699)) {
            $round6$1$i = $$28$i;$small$1$i = $small$0$i;
            break;
           }
           $700 = -$$28$i;
           $701 = -$small$0$i;
           $round6$1$i = $700;$small$1$i = $701;
          }
         } while(0);
         $702 = (($684) - ($685))|0;
         HEAP32[$680>>2] = $702;
         $703 = $round6$1$i + $small$1$i;
         $704 = $703 != $round6$1$i;
         if (!($704)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $680;$e$3$i = $e$1$i;
          break;
         }
         $705 = (($702) + ($i$1$lcssa$i))|0;
         HEAP32[$680>>2] = $705;
         $706 = ($705>>>0)>(999999999);
         if ($706) {
          $a$5223$i = $a$3$lcssa$i;$d$2222$i = $680;
          while(1) {
           $707 = (($d$2222$i) + -4|0);
           HEAP32[$d$2222$i>>2] = 0;
           $708 = ($707>>>0)<($a$5223$i>>>0);
           if ($708) {
            $709 = (($a$5223$i) + -4|0);
            HEAP32[$709>>2] = 0;
            $a$6$i = $709;
           } else {
            $a$6$i = $a$5223$i;
           }
           $710 = HEAP32[$707>>2]|0;
           $711 = (($710) + 1)|0;
           HEAP32[$707>>2] = $711;
           $712 = ($711>>>0)>(999999999);
           if ($712) {
            $a$5223$i = $a$6$i;$d$2222$i = $707;
           } else {
            $$lcssa308 = $707;$a$6$i$lcssa = $a$6$i;
            break;
           }
          }
          $a$5$lcssa$i = $a$6$i$lcssa;$d$2$lcssa$i = $$lcssa308;
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $680;
         }
         $713 = $a$5$lcssa$i;
         $714 = (($558) - ($713))|0;
         $715 = $714 >> 2;
         $716 = ($715*9)|0;
         $717 = HEAP32[$a$5$lcssa$i>>2]|0;
         $718 = ($717>>>0)<(10);
         if ($718) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $716;
          break;
         }
         $e$2218$i = $716;$i$2217$i = 10;
         while(1) {
          $719 = ($i$2217$i*10)|0;
          $720 = (($e$2218$i) + 1)|0;
          $721 = ($717>>>0)<($719>>>0);
          if ($721) {
           $$lcssa309 = $720;
           break;
          } else {
           $e$2218$i = $720;$i$2217$i = $719;
          }
         }
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $$lcssa309;
        }
       } while(0);
       $722 = (($d$3$i) + 4|0);
       $723 = ($z$3$lcssa$i>>>0)>($722>>>0);
       $$z$3$i = $723 ? $722 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $a$8$ph294$i = $a$8$ph$i;
      $724 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $725 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($725)) {
        $$lcssa283$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $726 = (($z$6$i) + -4|0);
       $727 = HEAP32[$726>>2]|0;
       $728 = ($727|0)==(0);
       if ($728) {
        $z$6$i = $726;
       } else {
        $$lcssa283$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($669) {
        $729 = ($$p$i|0)==(0);
        $730 = $729&1;
        $$$p$i = (($730) + ($$p$i))|0;
        $731 = ($$$p$i|0)>($e$4$ph$i|0);
        $732 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $731 & $732;
        if ($or$cond6$i) {
         $733 = (($t$0) + -1)|0;
         $$neg160$i = (($$$p$i) + -1)|0;
         $734 = (($$neg160$i) - ($e$4$ph$i))|0;
         $$019$i = $733;$$216$i = $734;
        } else {
         $735 = (($t$0) + -2)|0;
         $736 = (($$$p$i) + -1)|0;
         $$019$i = $735;$$216$i = $736;
        }
        $737 = $fl$1$ & 8;
        $738 = ($737|0)==(0);
        if (!($738)) {
         $$120$i = $$019$i;$$317$i = $$216$i;
         break;
        }
        do {
         if ($$lcssa283$i) {
          $739 = (($z$6$i$lcssa) + -4|0);
          $740 = HEAP32[$739>>2]|0;
          $741 = ($740|0)==(0);
          if ($741) {
           $j$2$i = 9;
           break;
          }
          $742 = (($740>>>0) % 10)&-1;
          $743 = ($742|0)==(0);
          if (!($743)) {
           $j$2$i = 0;
           break;
          }
          $i$3213$i = 10;$j$1214$i = 0;
          while(1) {
           $744 = ($i$3213$i*10)|0;
           $745 = (($j$1214$i) + 1)|0;
           $746 = (($740>>>0) % ($744>>>0))&-1;
           $747 = ($746|0)==(0);
           if ($747) {
            $i$3213$i = $744;$j$1214$i = $745;
           } else {
            $$lcssa310 = $745;
            break;
           }
          }
          $j$2$i = $$lcssa310;
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $748 = $$019$i | 32;
        $749 = ($748|0)==(102);
        $750 = $z$6$i$lcssa;
        $751 = (($750) - ($558))|0;
        $752 = $751 >> 2;
        $753 = ($752*9)|0;
        $754 = (($753) + -9)|0;
        if ($749) {
         $755 = (($754) - ($j$2$i))|0;
         $756 = ($755|0)<(0);
         $$29$i = $756 ? 0 : $755;
         $757 = ($$216$i|0)<($$29$i|0);
         $$216$$29$i = $757 ? $$216$i : $$29$i;
         $$120$i = $$019$i;$$317$i = $$216$$29$i;
         break;
        } else {
         $758 = (($754) + ($e$4$ph$i))|0;
         $759 = (($758) - ($j$2$i))|0;
         $760 = ($759|0)<(0);
         $$31$i = $760 ? 0 : $759;
         $761 = ($$216$i|0)<($$31$i|0);
         $$216$$31$i = $761 ? $$216$i : $$31$i;
         $$120$i = $$019$i;$$317$i = $$216$$31$i;
         break;
        }
       } else {
        $$120$i = $t$0;$$317$i = $$p$i;
       }
      } while(0);
      $762 = ($$317$i|0)!=(0);
      if ($762) {
       $766 = 1;
      } else {
       $763 = $fl$1$ & 8;
       $764 = ($763|0)!=(0);
       $766 = $764;
      }
      $765 = $766&1;
      $767 = $$120$i | 32;
      $768 = ($767|0)==(102);
      if ($768) {
       $769 = ($e$4$ph$i|0)>(0);
       $770 = $769 ? $e$4$ph$i : 0;
       $$pn$i = $770;$estr$2$i = 0;
      } else {
       $771 = ($e$4$ph$i|0)<(0);
       $772 = $771 ? $724 : $e$4$ph$i;
       $773 = ($772|0)<(0);
       if ($773) {
        $774 = ($772|0)<(0);
        $775 = $774 << 31 >> 31;
        $$05$i87$i = $7;$776 = $772;$777 = $775;
        while(1) {
         $778 = (___uremdi3(($776|0),($777|0),10,0)|0);
         $779 = tempRet0;
         $780 = $778 | 48;
         $781 = $780&255;
         $782 = (($$05$i87$i) + -1|0);
         HEAP8[$782>>0] = $781;
         $783 = (___udivdi3(($776|0),($777|0),10,0)|0);
         $784 = tempRet0;
         $785 = ($777>>>0)>(9);
         $786 = ($776>>>0)>(4294967295);
         $787 = ($777|0)==(9);
         $788 = $787 & $786;
         $789 = $785 | $788;
         if ($789) {
          $$05$i87$i = $782;$776 = $783;$777 = $784;
         } else {
          $$lcssa311 = $782;$1057 = $783;$1058 = $784;
          break;
         }
        }
        $$0$lcssa$i92$i = $$lcssa311;$$01$lcssa$off0$i93$i = $1057;
       } else {
        $$0$lcssa$i92$i = $7;$$01$lcssa$off0$i93$i = $772;
       }
       $790 = ($$01$lcssa$off0$i93$i|0)==(0);
       if ($790) {
        $estr$1$ph$i = $$0$lcssa$i92$i;
       } else {
        $$12$i95$i = $$0$lcssa$i92$i;$y$03$i94$i = $$01$lcssa$off0$i93$i;
        while(1) {
         $791 = (($y$03$i94$i>>>0) % 10)&-1;
         $792 = $791 | 48;
         $793 = $792&255;
         $794 = (($$12$i95$i) + -1|0);
         HEAP8[$794>>0] = $793;
         $795 = (($y$03$i94$i>>>0) / 10)&-1;
         $796 = ($y$03$i94$i>>>0)<(10);
         if ($796) {
          $$lcssa313 = $794;
          break;
         } else {
          $$12$i95$i = $794;$y$03$i94$i = $795;
         }
        }
        $estr$1$ph$i = $$lcssa313;
       }
       $797 = $estr$1$ph$i;
       $798 = (($9) - ($797))|0;
       $799 = ($798|0)<(2);
       if ($799) {
        $estr$1209$i = $estr$1$ph$i;
        while(1) {
         $800 = (($estr$1209$i) + -1|0);
         HEAP8[$800>>0] = 48;
         $801 = $800;
         $802 = (($9) - ($801))|0;
         $803 = ($802|0)<(2);
         if ($803) {
          $estr$1209$i = $800;
         } else {
          $$lcssa314 = $800;
          break;
         }
        }
        $estr$1$lcssa$i = $$lcssa314;
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $804 = $e$4$ph$i >> 31;
       $805 = $804 & 2;
       $806 = (($805) + 43)|0;
       $807 = $806&255;
       $808 = (($estr$1$lcssa$i) + -1|0);
       HEAP8[$808>>0] = $807;
       $809 = $$120$i&255;
       $810 = (($estr$1$lcssa$i) + -2|0);
       HEAP8[$810>>0] = $809;
       $811 = $810;
       $812 = (($9) - ($811))|0;
       $$pn$i = $812;$estr$2$i = $810;
      }
      $813 = (($pl$0$i) + 1)|0;
      $814 = (($813) + ($$317$i))|0;
      $l$1$i = (($814) + ($765))|0;
      $815 = (($l$1$i) + ($$pn$i))|0;
      $816 = $fl$1$ & 73728;
      $817 = ($816|0)==(0);
      $818 = ($w$1|0)>($815|0);
      $or$cond$i101$i = $817 & $818;
      if ($or$cond$i101$i) {
       $819 = (($w$1) - ($815))|0;
       $820 = ($819>>>0)>(256);
       $821 = $820 ? 256 : $819;
       _memset(($pad$i|0),32,($821|0))|0;
       $822 = ($819>>>0)>(255);
       if ($822) {
        $$01$i103$i = $819;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $823 = (($$01$i103$i) + -256)|0;
         $824 = ($823>>>0)>(255);
         if ($824) {
          $$01$i103$i = $823;
         } else {
          break;
         }
        }
        $825 = $819 & 255;
        $$0$lcssa$i105$i = $825;
       } else {
        $$0$lcssa$i105$i = $819;
       }
       (___fwritex($pad$i,$$0$lcssa$i105$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $826 = ($816|0)==(65536);
      $or$cond$i108$i = $826 & $818;
      if ($or$cond$i108$i) {
       $827 = (($w$1) - ($815))|0;
       $828 = ($827>>>0)>(256);
       $829 = $828 ? 256 : $827;
       _memset(($pad$i|0),48,($829|0))|0;
       $830 = ($827>>>0)>(255);
       if ($830) {
        $$01$i110$i = $827;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $831 = (($$01$i110$i) + -256)|0;
         $832 = ($831>>>0)>(255);
         if ($832) {
          $$01$i110$i = $831;
         } else {
          break;
         }
        }
        $833 = $827 & 255;
        $$0$lcssa$i112$i = $833;
       } else {
        $$0$lcssa$i112$i = $827;
       }
       (___fwritex($pad$i,$$0$lcssa$i112$i,$f)|0);
      }
      do {
       if ($768) {
        $834 = ($a$8$ph$i>>>0)>($$39$i>>>0);
        $r$0$a$8$i = $834 ? $$39$i : $a$8$ph$i;
        $835 = $558 ^ -1;
        $836 = $a$8$ph294$i ^ -1;
        $837 = ($835>>>0)>($836>>>0);
        $umax$i = $837 ? $835 : $836;
        $838 = (3 - ($umax$i))|0;
        $uglygep$i = (($$39$i) + 1|0);
        $uglygep296$i = $uglygep$i;
        $839 = ($838>>>0)>($uglygep296$i>>>0);
        $umax297$i = $839 ? $838 : $uglygep296$i;
        $umax297298299$i = $umax297$i;
        $uglygep300$i = (($umax297298299$i) + ($umax$i)|0);
        $uglygep300301$i = $uglygep300$i;
        $840 = $umax$i ^ -1;
        $d$4199$i = $r$0$a$8$i;
        while(1) {
         $841 = HEAP32[$d$4199$i>>2]|0;
         $842 = ($841|0)==(0);
         if ($842) {
          $$1$lcssa$i120$i = $14;
         } else {
          $$12$i118$i = $14;$y$03$i117$i = $841;
          while(1) {
           $843 = (($y$03$i117$i>>>0) % 10)&-1;
           $844 = $843 | 48;
           $845 = $844&255;
           $846 = (($$12$i118$i) + -1|0);
           HEAP8[$846>>0] = $845;
           $847 = (($y$03$i117$i>>>0) / 10)&-1;
           $848 = ($y$03$i117$i>>>0)<(10);
           if ($848) {
            $$lcssa318 = $846;
            break;
           } else {
            $$12$i118$i = $846;$y$03$i117$i = $847;
           }
          }
          $$1$lcssa$i120$i = $$lcssa318;
         }
         $849 = ($d$4199$i|0)==($r$0$a$8$i|0);
         do {
          if ($849) {
           $853 = ($$1$lcssa$i120$i|0)==($14|0);
           if (!($853)) {
            $s7$1$i = $$1$lcssa$i120$i;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $850 = ($$1$lcssa$i120$i>>>0)>($buf$i>>>0);
           if (!($850)) {
            $s7$1$i = $$1$lcssa$i120$i;
            break;
           }
           $s7$0196$i = $$1$lcssa$i120$i;
           while(1) {
            $851 = (($s7$0196$i) + -1|0);
            HEAP8[$851>>0] = 48;
            $852 = ($851>>>0)>($buf$i>>>0);
            if ($852) {
             $s7$0196$i = $851;
            } else {
             $$lcssa319 = $851;
             break;
            }
           }
           $s7$1$i = $$lcssa319;
          }
         } while(0);
         $854 = $s7$1$i;
         $855 = (($15) - ($854))|0;
         (___fwritex($s7$1$i,$855,$f)|0);
         $856 = (($d$4199$i) + 4|0);
         $857 = ($856>>>0)>($$39$i>>>0);
         if ($857) {
          $$lcssa320 = $856;
          break;
         } else {
          $d$4199$i = $856;
         }
        }
        $858 = $uglygep300301$i & -4;
        $859 = (($858) + ($840))|0;
        $860 = $859;
        $$not$i = $762 ^ 1;
        $861 = $fl$1$ & 8;
        $862 = ($861|0)==(0);
        $or$cond35$i = $862 & $$not$i;
        if (!($or$cond35$i)) {
         (___fwritex(10808,1,$f)|0);
        }
        $863 = ($$lcssa320>>>0)<($z$6$i$lcssa>>>0);
        $864 = ($$317$i|0)>(0);
        $or$cond10191$i = $863 & $864;
        if ($or$cond10191$i) {
         $$418193$i = $$317$i;$879 = $860;$d$5192$i = $$lcssa320;
         while(1) {
          $865 = HEAP32[$d$5192$i>>2]|0;
          $866 = ($865|0)==(0);
          if ($866) {
           $s8$0188$i$ph = $14;
           label = 362;
          } else {
           $$12$i127$i = $14;$y$03$i126$i = $865;
           while(1) {
            $867 = (($y$03$i126$i>>>0) % 10)&-1;
            $868 = $867 | 48;
            $869 = $868&255;
            $870 = (($$12$i127$i) + -1|0);
            HEAP8[$870>>0] = $869;
            $871 = (($y$03$i126$i>>>0) / 10)&-1;
            $872 = ($y$03$i126$i>>>0)<(10);
            if ($872) {
             $$lcssa321 = $870;
             break;
            } else {
             $$12$i127$i = $870;$y$03$i126$i = $871;
            }
           }
           $873 = ($$lcssa321>>>0)>($buf$i>>>0);
           if ($873) {
            $s8$0188$i$ph = $$lcssa321;
            label = 362;
           } else {
            $s8$0$lcssa$i = $$lcssa321;
           }
          }
          if ((label|0) == 362) {
           label = 0;
           $s8$0188$i = $s8$0188$i$ph;
           while(1) {
            $874 = (($s8$0188$i) + -1|0);
            HEAP8[$874>>0] = 48;
            $875 = ($874>>>0)>($buf$i>>>0);
            if ($875) {
             $s8$0188$i = $874;
            } else {
             $$lcssa322 = $874;
             break;
            }
           }
           $s8$0$lcssa$i = $$lcssa322;
          }
          $876 = ($$418193$i|0)>(9);
          $877 = $876 ? 9 : $$418193$i;
          (___fwritex($s8$0$lcssa$i,$877,$f)|0);
          $878 = (($879) + 8|0);
          $880 = (($$418193$i) + -9)|0;
          $881 = ($878>>>0)<($z$6$i$lcssa>>>0);
          $882 = ($880|0)>(0);
          $or$cond10$i = $881 & $882;
          if ($or$cond10$i) {
           $879$phi = $d$5192$i;$$418193$i = $880;$d$5192$i = $878;$879 = $879$phi;
          } else {
           $$lcssa323 = $880;
           break;
          }
         }
         $$418$lcssa$i = $$lcssa323;
        } else {
         $$418$lcssa$i = $$317$i;
        }
        $883 = ($$418$lcssa$i|0)>(0);
        if (!($883)) {
         break;
        }
        $884 = ($$418$lcssa$i>>>0)>(256);
        $885 = $884 ? 256 : $$418$lcssa$i;
        _memset(($pad$i|0),48,($885|0))|0;
        $886 = ($$418$lcssa$i>>>0)>(255);
        if ($886) {
         $$01$i134$i = $$418$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $887 = (($$01$i134$i) + -256)|0;
          $888 = ($887>>>0)>(255);
          if ($888) {
           $$01$i134$i = $887;
          } else {
           break;
          }
         }
         $889 = $$418$lcssa$i & 255;
         $$0$lcssa$i136$i = $889;
        } else {
         $$0$lcssa$i136$i = $$418$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i136$i,$f)|0);
       } else {
        $890 = (($a$8$ph$i) + 4|0);
        $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $890;
        $891 = ($$317$i|0)>(-1);
        do {
         if ($891) {
          $892 = $fl$1$ & 8;
          $893 = ($892|0)==(0);
          $$5205$i = $$317$i;$d$6204$i = $a$8$ph$i;
          while(1) {
           $894 = HEAP32[$d$6204$i>>2]|0;
           $895 = ($894|0)==(0);
           if ($895) {
            label = 379;
           } else {
            $$12$i142$i = $14;$y$03$i141$i = $894;
            while(1) {
             $896 = (($y$03$i141$i>>>0) % 10)&-1;
             $897 = $896 | 48;
             $898 = $897&255;
             $899 = (($$12$i142$i) + -1|0);
             HEAP8[$899>>0] = $898;
             $900 = (($y$03$i141$i>>>0) / 10)&-1;
             $901 = ($y$03$i141$i>>>0)<(10);
             if ($901) {
              $$12$i142$i$lcssa = $$12$i142$i;$$lcssa315 = $899;
              break;
             } else {
              $$12$i142$i = $899;$y$03$i141$i = $900;
             }
            }
            $902 = ($$lcssa315|0)==($14|0);
            if ($902) {
             label = 379;
            } else {
             $1059 = $$12$i142$i$lcssa;$s9$0$i = $$lcssa315;
            }
           }
           if ((label|0) == 379) {
            label = 0;
            HEAP8[$16>>0] = 48;
            $1059 = $14;$s9$0$i = $16;
           }
           $903 = ($d$6204$i|0)==($a$8$ph$i|0);
           do {
            if ($903) {
             (___fwritex($s9$0$i,1,$f)|0);
             $907 = ($$5205$i|0)<(1);
             $or$cond37$i = $907 & $893;
             if ($or$cond37$i) {
              $s9$2$i = $1059;
              break;
             }
             (___fwritex(10808,1,$f)|0);
             $s9$2$i = $1059;
            } else {
             $904 = ($s9$0$i>>>0)>($buf$i>>>0);
             if (!($904)) {
              $s9$2$i = $s9$0$i;
              break;
             }
             $s9$1200$i = $s9$0$i;
             while(1) {
              $905 = (($s9$1200$i) + -1|0);
              HEAP8[$905>>0] = 48;
              $906 = ($905>>>0)>($buf$i>>>0);
              if ($906) {
               $s9$1200$i = $905;
              } else {
               $$lcssa316 = $905;
               break;
              }
             }
             $s9$2$i = $$lcssa316;
            }
           } while(0);
           $908 = $s9$2$i;
           $909 = (($15) - ($908))|0;
           $910 = ($$5205$i|0)>($909|0);
           $$$5$i = $910 ? $909 : $$5205$i;
           (___fwritex($s9$2$i,$$$5$i,$f)|0);
           $911 = (($$5205$i) - ($909))|0;
           $912 = (($d$6204$i) + 4|0);
           $913 = ($912>>>0)<($z$6$$i>>>0);
           $914 = ($911|0)>(-1);
           $or$cond12$i = $913 & $914;
           if ($or$cond12$i) {
            $$5205$i = $911;$d$6204$i = $912;
           } else {
            $$lcssa317 = $911;
            break;
           }
          }
          $915 = ($$lcssa317|0)>(0);
          if (!($915)) {
           break;
          }
          $916 = ($$lcssa317>>>0)>(256);
          $917 = $916 ? 256 : $$lcssa317;
          _memset(($pad$i|0),48,($917|0))|0;
          $918 = ($$lcssa317>>>0)>(255);
          if ($918) {
           $$01$i149$i = $$lcssa317;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $919 = (($$01$i149$i) + -256)|0;
            $920 = ($919>>>0)>(255);
            if ($920) {
             $$01$i149$i = $919;
            } else {
             break;
            }
           }
           $921 = $$lcssa317 & 255;
           $$0$lcssa$i151$i = $921;
          } else {
           $$0$lcssa$i151$i = $$lcssa317;
          }
          (___fwritex($pad$i,$$0$lcssa$i151$i,$f)|0);
         }
        } while(0);
        $922 = $estr$2$i;
        $923 = (($9) - ($922))|0;
        (___fwritex($estr$2$i,$923,$f)|0);
       }
      } while(0);
      $924 = ($816|0)==(8192);
      $or$cond$i$i = $924 & $818;
      if ($or$cond$i$i) {
       $925 = (($w$1) - ($815))|0;
       $926 = ($925>>>0)>(256);
       $927 = $926 ? 256 : $925;
       _memset(($pad$i|0),32,($927|0))|0;
       $928 = ($925>>>0)>(255);
       if ($928) {
        $$01$i$i = $925;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $929 = (($$01$i$i) + -256)|0;
         $930 = ($929>>>0)>(255);
         if ($930) {
          $$01$i$i = $929;
         } else {
          break;
         }
        }
        $931 = $925 & 255;
        $$0$lcssa$i$i = $931;
       } else {
        $$0$lcssa$i$i = $925;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$38$i = $818 ? $w$1 : $815;
      $$be = $190;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $w$38$i;$l10n$0$be = $l10n$3;
      break L24;
      break;
     }
     default: {
      $1047 = $190;$1048 = $217;$a$2 = $fmt90;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 10712;$z$2 = $2;
     }
     }
    } while(0);
    do {
     if ((label|0) == 83) {
      label = 0;
      $215 = $t$1 & 32;
      $216 = ($190|0)==(0);
      $218 = ($217|0)==(0);
      $219 = $216 & $218;
      if ($219) {
       $292 = $190;$294 = $217;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 10712;
       label = 105;
      } else {
       $$012$i = $2;$221 = $190;$228 = $217;
       while(1) {
        $220 = $221 & 15;
        $222 = (10792 + ($220)|0);
        $223 = HEAP8[$222>>0]|0;
        $224 = $223&255;
        $225 = $224 | $215;
        $226 = $225&255;
        $227 = (($$012$i) + -1|0);
        HEAP8[$227>>0] = $226;
        $229 = (_bitshift64Lshr(($221|0),($228|0),4)|0);
        $230 = tempRet0;
        $231 = ($229|0)==(0);
        $232 = ($230|0)==(0);
        $233 = $231 & $232;
        if ($233) {
         $$lcssa332 = $227;
         break;
        } else {
         $$012$i = $227;$221 = $229;$228 = $230;
        }
       }
       $234 = $fl$3 & 8;
       $235 = ($234|0)==(0);
       if ($235) {
        $292 = $190;$294 = $217;$a$0 = $$lcssa332;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 10712;
        label = 105;
       } else {
        $236 = $t$1 >> 4;
        $237 = (10712 + ($236)|0);
        $292 = $190;$294 = $217;$a$0 = $$lcssa332;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $237;
        label = 105;
       }
      }
     }
     else if ((label|0) == 97) {
      label = 0;
      $263 = ($262>>>0)>(0);
      $265 = ($264>>>0)>(4294967295);
      $266 = ($262|0)==(0);
      $267 = $266 & $265;
      $268 = $263 | $267;
      if ($268) {
       $$05$i = $2;$269 = $264;$270 = $262;
       while(1) {
        $271 = (___uremdi3(($269|0),($270|0),10,0)|0);
        $272 = tempRet0;
        $273 = $271 | 48;
        $274 = $273&255;
        $275 = (($$05$i) + -1|0);
        HEAP8[$275>>0] = $274;
        $276 = (___udivdi3(($269|0),($270|0),10,0)|0);
        $277 = tempRet0;
        $278 = ($270>>>0)>(9);
        $279 = ($269>>>0)>(4294967295);
        $280 = ($270|0)==(9);
        $281 = $280 & $279;
        $282 = $278 | $281;
        if ($282) {
         $$05$i = $275;$269 = $276;$270 = $277;
        } else {
         $$lcssa328 = $275;$1049 = $276;$1050 = $277;
         break;
        }
       }
       $$0$lcssa$i54 = $$lcssa328;$$01$lcssa$off0$i = $1049;
      } else {
       $$0$lcssa$i54 = $2;$$01$lcssa$off0$i = $264;
      }
      $283 = ($$01$lcssa$off0$i|0)==(0);
      if ($283) {
       $292 = $264;$294 = $262;$a$0 = $$0$lcssa$i54;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 105;
      } else {
       $$12$i = $$0$lcssa$i54;$y$03$i = $$01$lcssa$off0$i;
       while(1) {
        $284 = (($y$03$i>>>0) % 10)&-1;
        $285 = $284 | 48;
        $286 = $285&255;
        $287 = (($$12$i) + -1|0);
        HEAP8[$287>>0] = $286;
        $288 = (($y$03$i>>>0) / 10)&-1;
        $289 = ($y$03$i>>>0)<(10);
        if ($289) {
         $$lcssa330 = $287;
         break;
        } else {
         $$12$i = $287;$y$03$i = $288;
        }
       }
       $292 = $264;$294 = $262;$a$0 = $$lcssa330;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 105;
      }
     }
     else if ((label|0) == 110) {
      label = 0;
      $310 = (_memchr($a$1,0,$p$0)|0);
      $311 = ($310|0)==(0|0);
      if ($311) {
       $312 = (($a$1) + ($p$0)|0);
       $1047 = $190;$1048 = $217;$a$2 = $a$1;$fl$6 = $189;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 10712;$z$2 = $312;
       break;
      } else {
       $313 = $310;
       $314 = $a$1;
       $315 = (($313) - ($314))|0;
       $1047 = $190;$1048 = $217;$a$2 = $a$1;$fl$6 = $189;$p$5 = $315;$pl$2 = 0;$prefix$2 = 10712;$z$2 = $310;
       break;
      }
     }
     else if ((label|0) == 115) {
      label = 0;
      $i$0180 = 0;$l$1179 = 0;$ws$0181 = $1051;
      while(1) {
       $318 = HEAP32[$ws$0181>>2]|0;
       $319 = ($318|0)==(0);
       if ($319) {
        $i$0$lcssa = $i$0180;$l$2 = $l$1179;
        break;
       }
       $320 = (_wctomb($mb,$318)|0);
       $321 = ($320|0)<(0);
       $322 = (($p$4274) - ($i$0180))|0;
       $323 = ($320>>>0)>($322>>>0);
       $or$cond23 = $321 | $323;
       if ($or$cond23) {
        $i$0$lcssa = $i$0180;$l$2 = $320;
        break;
       }
       $324 = (($ws$0181) + 4|0);
       $325 = (($320) + ($i$0180))|0;
       $326 = ($p$4274>>>0)>($325>>>0);
       if ($326) {
        $i$0180 = $325;$l$1179 = $320;$ws$0181 = $324;
       } else {
        $i$0$lcssa = $325;$l$2 = $320;
        break;
       }
      }
      $327 = ($l$2|0)<(0);
      if ($327) {
       $$0$ph287 = -1;
       label = 449;
       break L1;
      } else {
       $1053 = $1052;$1054 = $1051;$i$0$lcssa275 = $i$0$lcssa;
       label = 120;
      }
     }
    } while(0);
    if ((label|0) == 105) {
     label = 0;
     $290 = ($p$2|0)>(-1);
     $291 = $fl$4 & -65537;
     $$fl$4 = $290 ? $291 : $fl$4;
     $293 = ($292|0)!=(0);
     $295 = ($294|0)!=(0);
     $296 = $293 | $295;
     $297 = ($p$2|0)!=(0);
     $or$cond = $296 | $297;
     if ($or$cond) {
      $298 = $a$0;
      $299 = (($3) - ($298))|0;
      $300 = $296&1;
      $301 = $300 ^ 1;
      $302 = (($301) + ($299))|0;
      $303 = ($p$2|0)>($302|0);
      $p$2$ = $303 ? $p$2 : $302;
      $1047 = $292;$1048 = $294;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     } else {
      $1047 = $292;$1048 = $294;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     }
    }
    else if ((label|0) == 120) {
     label = 0;
     $328 = $fl$1$ & 73728;
     $329 = ($328|0)==(0);
     $330 = ($w$1|0)>($i$0$lcssa275|0);
     $or$cond$i65 = $329 & $330;
     if ($or$cond$i65) {
      $331 = (($w$1) - ($i$0$lcssa275))|0;
      $332 = ($331>>>0)>(256);
      $333 = $332 ? 256 : $331;
      _memset(($pad$i|0),32,($333|0))|0;
      $334 = ($331>>>0)>(255);
      if ($334) {
       $$01$i67 = $331;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $335 = (($$01$i67) + -256)|0;
        $336 = ($335>>>0)>(255);
        if ($336) {
         $$01$i67 = $335;
        } else {
         break;
        }
       }
       $337 = $331 & 255;
       $$0$lcssa$i69 = $337;
      } else {
       $$0$lcssa$i69 = $331;
      }
      (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
     }
     $338 = ($i$0$lcssa275|0)==(0);
     if (!($338)) {
      $i$1191 = 0;$ws$1192 = $1054;
      while(1) {
       $339 = HEAP32[$ws$1192>>2]|0;
       $340 = ($339|0)==(0);
       if ($340) {
        break;
       }
       $341 = (_wctomb($mb,$339)|0);
       $342 = (($341) + ($i$1191))|0;
       $343 = ($342|0)>($i$0$lcssa275|0);
       if ($343) {
        break;
       }
       $344 = (($ws$1192) + 4|0);
       (___fwritex($mb,$341,$f)|0);
       $345 = ($342>>>0)<($i$0$lcssa275>>>0);
       if ($345) {
        $i$1191 = $342;$ws$1192 = $344;
       } else {
        break;
       }
      }
     }
     $346 = ($328|0)==(8192);
     $or$cond$i72 = $346 & $330;
     if ($or$cond$i72) {
      $347 = (($w$1) - ($i$0$lcssa275))|0;
      $348 = ($347>>>0)>(256);
      $349 = $348 ? 256 : $347;
      _memset(($pad$i|0),32,($349|0))|0;
      $350 = ($347>>>0)>(255);
      if ($350) {
       $$01$i74 = $347;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $351 = (($$01$i74) + -256)|0;
        $352 = ($351>>>0)>(255);
        if ($352) {
         $$01$i74 = $351;
        } else {
         break;
        }
       }
       $353 = $347 & 255;
       $$0$lcssa$i76 = $353;
      } else {
       $$0$lcssa$i76 = $347;
      }
      (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
     }
     $354 = $330 ? $w$1 : $i$0$lcssa275;
     $$be = $1053;$$be288 = $217;$fmt90$be = $$lcssa298;$l$0$be = $354;$l10n$0$be = $l10n$3;
     break;
    }
    $932 = $z$2;
    $933 = $a$2;
    $934 = (($932) - ($933))|0;
    $935 = ($p$5|0)<($934|0);
    $$p$5 = $935 ? $934 : $p$5;
    $936 = (($pl$2) + ($$p$5))|0;
    $937 = ($w$1|0)<($936|0);
    $w$2 = $937 ? $936 : $w$1;
    $938 = $fl$6 & 73728;
    $939 = ($938|0)==(0);
    $940 = ($w$2|0)>($936|0);
    $or$cond$i82 = $939 & $940;
    if ($or$cond$i82) {
     $941 = (($w$2) - ($936))|0;
     $942 = ($941>>>0)>(256);
     $943 = $942 ? 256 : $941;
     _memset(($pad$i|0),32,($943|0))|0;
     $944 = ($941>>>0)>(255);
     if ($944) {
      $$01$i84 = $941;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $945 = (($$01$i84) + -256)|0;
       $946 = ($945>>>0)>(255);
       if ($946) {
        $$01$i84 = $945;
       } else {
        break;
       }
      }
      $947 = $941 & 255;
      $$0$lcssa$i86 = $947;
     } else {
      $$0$lcssa$i86 = $941;
     }
     (___fwritex($pad$i,$$0$lcssa$i86,$f)|0);
    }
    (___fwritex($prefix$2,$pl$2,$f)|0);
    $948 = ($938|0)==(65536);
    $or$cond$i58 = $948 & $940;
    if ($or$cond$i58) {
     $949 = (($w$2) - ($936))|0;
     $950 = ($949>>>0)>(256);
     $951 = $950 ? 256 : $949;
     _memset(($pad$i|0),48,($951|0))|0;
     $952 = ($949>>>0)>(255);
     if ($952) {
      $$01$i60 = $949;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $953 = (($$01$i60) + -256)|0;
       $954 = ($953>>>0)>(255);
       if ($954) {
        $$01$i60 = $953;
       } else {
        break;
       }
      }
      $955 = $949 & 255;
      $$0$lcssa$i62 = $955;
     } else {
      $$0$lcssa$i62 = $949;
     }
     (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
    }
    $956 = ($$p$5|0)>($934|0);
    if ($956) {
     $957 = (($$p$5) - ($934))|0;
     $958 = ($957>>>0)>(256);
     $959 = $958 ? 256 : $957;
     _memset(($pad$i|0),48,($959|0))|0;
     $960 = ($957>>>0)>(255);
     if ($960) {
      $$01$i45 = $957;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $961 = (($$01$i45) + -256)|0;
       $962 = ($961>>>0)>(255);
       if ($962) {
        $$01$i45 = $961;
       } else {
        break;
       }
      }
      $963 = $957 & 255;
      $$0$lcssa$i47 = $963;
     } else {
      $$0$lcssa$i47 = $957;
     }
     (___fwritex($pad$i,$$0$lcssa$i47,$f)|0);
    }
    (___fwritex($a$2,$934,$f)|0);
    $964 = ($938|0)==(8192);
    $or$cond$i = $964 & $940;
    if ($or$cond$i) {
     $965 = (($w$2) - ($936))|0;
     $966 = ($965>>>0)>(256);
     $967 = $966 ? 256 : $965;
     _memset(($pad$i|0),32,($967|0))|0;
     $968 = ($965>>>0)>(255);
     if ($968) {
      $$01$i = $965;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $969 = (($$01$i) + -256)|0;
       $970 = ($969>>>0)>(255);
       if ($970) {
        $$01$i = $969;
       } else {
        break;
       }
      }
      $971 = $965 & 255;
      $$0$lcssa$i = $971;
     } else {
      $$0$lcssa$i = $965;
     }
     (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
     $$be = $1047;$$be288 = $1048;$fmt90$be = $$lcssa298;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
    } else {
     $$be = $1047;$$be288 = $1048;$fmt90$be = $$lcssa298;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
    }
   } else {
    $$be = $1039;$$be288 = $1040;$fmt90$be = $fmt88$lcssa;$l$0$be = $34;$l10n$0$be = $l10n$0;
   }
  } while(0);
  $1039 = $$be;$1040 = $$be288;$cnt$0 = $cnt$1;$fmt90 = $fmt90$be;$l$0 = $l$0$be;$l10n$0 = $l10n$0$be;
 }
 if ((label|0) == 426) {
  $972 = ($f|0)==(0|0);
  if (!($972)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $973 = ($l10n$0$lcssa|0)==(0);
  if ($973) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $i$2166 = 1;
  while(1) {
   $974 = (($nl_type) + ($i$2166<<2)|0);
   $975 = HEAP32[$974>>2]|0;
   $976 = ($975|0)==(0);
   if ($976) {
    $i$2166$lcssa = $i$2166;
    break;
   }
   $977 = (($nl_arg) + ($i$2166<<3)|0);
   $978 = ($975>>>0)>(20);
   L610: do {
    if (!($978)) {
     do {
      switch ($975|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $979 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$977>>2] = $979;
       break L610;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $980 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $981 = ($980|0)<(0);
       $982 = $981 << 31 >> 31;
       $983 = $977;
       $984 = $983;
       HEAP32[$984>>2] = $980;
       $985 = (($983) + 4)|0;
       $986 = $985;
       HEAP32[$986>>2] = $982;
       break L610;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $987 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $988 = $977;
       $989 = $988;
       HEAP32[$989>>2] = $987;
       $990 = (($988) + 4)|0;
       $991 = $990;
       HEAP32[$991>>2] = 0;
       break L610;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $992 = $arglist_current44;
       $993 = $992;
       $994 = HEAP32[$993>>2]|0;
       $995 = (($992) + 4)|0;
       $996 = $995;
       $997 = HEAP32[$996>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $998 = $977;
       $999 = $998;
       HEAP32[$999>>2] = $994;
       $1000 = (($998) + 4)|0;
       $1001 = $1000;
       HEAP32[$1001>>2] = $997;
       break L610;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1002 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1003 = $1002&65535;
       $1004 = $1003 << 16 >> 16;
       $1005 = ($1004|0)<(0);
       $1006 = $1005 << 31 >> 31;
       $1007 = $977;
       $1008 = $1007;
       HEAP32[$1008>>2] = $1004;
       $1009 = (($1007) + 4)|0;
       $1010 = $1009;
       HEAP32[$1010>>2] = $1006;
       break L610;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1011 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1011 & 65535;
       $1012 = $977;
       $1013 = $1012;
       HEAP32[$1013>>2] = $$mask1$i;
       $1014 = (($1012) + 4)|0;
       $1015 = $1014;
       HEAP32[$1015>>2] = 0;
       break L610;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1016 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1017 = $1016&255;
       $1018 = $1017 << 24 >> 24;
       $1019 = ($1018|0)<(0);
       $1020 = $1019 << 31 >> 31;
       $1021 = $977;
       $1022 = $1021;
       HEAP32[$1022>>2] = $1018;
       $1023 = (($1021) + 4)|0;
       $1024 = $1023;
       HEAP32[$1024>>2] = $1020;
       break L610;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1025 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1025 & 255;
       $1026 = $977;
       $1027 = $1026;
       HEAP32[$1027>>2] = $$mask$i;
       $1028 = (($1026) + 4)|0;
       $1029 = $1028;
       HEAP32[$1029>>2] = 0;
       break L610;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1030 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$977>>3] = $1030;
       break L610;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1031 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$977>>3] = $1031;
       break L610;
       break;
      }
      default: {
       break L610;
      }
      }
     } while(0);
    }
   } while(0);
   $1032 = (($i$2166) + 1)|0;
   $1033 = ($1032|0)<(10);
   if ($1033) {
    $i$2166 = $1032;
   } else {
    label = 447;
    break;
   }
  }
  if ((label|0) == 447) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $i$3164 = $i$2166$lcssa;
  while(1) {
   $1036 = (($nl_type) + ($i$3164<<2)|0);
   $1037 = HEAP32[$1036>>2]|0;
   $1038 = ($1037|0)==(0);
   $1034 = (($i$3164) + 1)|0;
   if (!($1038)) {
    $$0$ph = -1;
    break;
   }
   $1035 = ($1034|0)<(10);
   if ($1035) {
    $i$3164 = $1034;
   } else {
    $$0$ph = 1;
    break;
   }
  }
  $$0 = $$0$ph;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 448) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 449) {
  $$0 = $$0$ph287;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&63](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
function b1(p0) { p0 = p0|0; nullFunc_vi(1); }
function _exit__wrapper(p0) { p0 = p0|0; _exit(p0|0); }
function b2(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(2); }
function b3(p0) { p0 = p0|0; nullFunc_ii(3);return 0; }
function _strlen__wrapper(p0) { p0 = p0|0; return _strlen(p0|0)|0; }
function b4(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(4); }
function b5() { ; nullFunc_v(5); }
function b6(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(6);return 0; }
function _strcpy__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _strcpy(p0|0,p1|0)|0; }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,_sn_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_strncat,b0
,b0,b0,b0];
var FUNCTION_TABLE_vi = [b1,b1,_constantifyanonymous,_modifyanonymous,_reorganisefuncdef,_constantifyfuncdef,_modifyfuncdef,b1,b1,b1,b1,b1,b1,b1,b1,_createmem,b1,b1,b1,b1,b1,b1,_parsefile,b1,b1,_exit__wrapper,b1,b1,b1
,b1,b1,_Interpret,_SetIntSignal,b1,b1,b1,b1,b1,b1,b1,b1,b1,_buildstring257,_make,b1,_makeinverse,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,_countsynonym,_expandsynonym,_modifytypeexpr,_countabstype,_expandabstype,_settypechanged,_checkfuncdef,_checkgeneric,_markfuncdef,_markcell,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,_Write,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,_checkexpression,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_ii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_GetOption,_atol,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_strlen__wrapper,b3,_gettemplate,b3,b3,_commandline,b3,b3,_parseinput,b3,_modify_expression,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_viii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_fillstring,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_v = [b5,b5,b5,b5,b5,b5,b5,b5,_TrapIntSignal,b5,_createstack,_createhashtable,_createIO,b5,b5,b5,_inithashtable,_lockmem,_initlex,_initlib,_initsyslib,_initmodify,b5,_checkdefinitions,_modify_definitions,b5,b5,b5,b5
,_unlockmem,b5,b5,b5,b5,_restoretemplates,_CloseAllIOFiles,b5,b5,b5,_starttiming,_toplevel,_stoptiming,b5,b5,_eval,b5,b5,_apply_SECTION,_applyIF,_applyPOWER,_applyNEG,_applyTIMES,_applyDIV,_applyDIVIDE,_applyMOD,_applyPLUS,_applyMINUS,_applyEQ,_applyNE
,_applyLT,_applyLE,_applyGT,_applyGE,_applyUPDATE,_applySTRICT,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_applyERROR,_applyDEBUG,_applyTIMEDATE,_applyEMPTY,_applyHD,_applyTL,_applyFST,_applySND,_applyAND,_applyDROP,_applyDROPWHILE,_applyMEMBER,_applyMIN,_applyMAX
,_applyOR,_applyPROD,_applyREVERSE,_applySEQ,_applySUM,_applyUNTIL,_applyFOLDL,_applyFOLDL1,_applyFOLDR,_applyFOLDR1,_applyCONCAT,_applyFILTER,_applyMAP,_applyNAT,_applyNATS,_applyGENNAT,_applyGENNATS,_applySPLIT,_applySPLITWHILE,_applyTAKE,_applyTAKEWHILE,_applyZIP2,_applyZIP3,_applyZIP,_applyCOMPOSE,_applyCONS,_applyINDEX,_applyAPPEND,_applyREMOVE,_apply_AND
,_apply_OR,_applyLENGTH,_apply_NOT,_applyFREAD,_applyFWRITE,_applyFAPPEND,_apply_FREAD,_applyGRAPHDISPLAY,_applyMIN2,_applyMAX2,_applyITERATE,_applySCAN,_applyITOA,_applyATOI,_applyFTOA,_applyATOF,_applyABS,_applyROUND,_applyTRUNC,_applyDECODE,_applyCODE,_applyRANDOM,_applyCOS,_applySIN,_applyEXP,_applyLOG,_applySQRT,_applyATAN,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iii = [b6,b6,b6,b6,b6,b6,b6,_comparefuncdef,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_strcpy__wrapper,b6,b6
,b6,b6,b6];

  return { _testSetjmp: _testSetjmp, _i64Subtract: _i64Subtract, _strcat: _strcat, _free: _free, _main: _main, _i64Add: _i64Add, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _saveSetjmp: _saveSetjmp, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _Interpret: _Interpret, _strcpy: _strcpy, _calloc: _calloc, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strcat = asm["_strcat"]; asm["_strcat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcat.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__Interpret = asm["_Interpret"]; asm["_Interpret"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__Interpret.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__calloc = asm["_calloc"]; asm["_calloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__calloc.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _Interpret = Module["_Interpret"] = asm["_Interpret"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    function applyMemoryInitializer(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (Module['onExit']) Module['onExit'](status);

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



